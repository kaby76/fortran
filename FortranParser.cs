//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FortranParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class FortranParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LINE_COMMENT=1, BLOCK_COMMENT=2, SPACE=3, WS=4, EXTENDS=5, PROGRAM=6, 
		END=7, COMMA=8, FUNCTION=9, LPAREN=10, RPAREN=11, ASTERIK=12, SUBROUTINE=13, 
		MODULE=14, SUBMODULE=15, BLOCK=16, DATA=17, COLON=18, INTRINSIC=19, NONINTRINSIC=20, 
		IMPLIES=21, OPERATOR=22, POWER=23, SLASH=24, PLUS=25, MINUS=26, CONCAT=27, 
		EQ=28, NE=29, LT=30, LE=31, GT=32, GE=33, EQUAL=34, NOTEQUAL=35, LESSTHAN=36, 
		LESSEQUAL=37, GREATERTHAN=38, GREATEREQUAL=39, NOT=40, AND=41, OR=42, 
		EQV=43, NEQV=44, READ=45, FORMATTED=46, UNFORMATTED=47, WRITE=48, ASSIGNMENT=49, 
		ASSIGN=50, USE=51, DOUBLECOLON=52, ONLY=53, IMPORT=54, NONE=55, ALL=56, 
		KIND=57, INTEGER=58, LEN=59, REAL=60, DOUBLE=61, PRECISION=62, COMPLEX=63, 
		CHARACTER=64, LOGICAL=65, TYPE=66, CLASS=67, EXTERNAL=68, IMPLICIT=69, 
		PARAMETER=70, FORMATIN=71, FORMAT=72, BINDC=73, BIND=74, NAAM=75, RESULT=76, 
		ENTRY=77, DOT=78, TRUE=79, FALSE=80, SQUOTE=81, DQUOTE=82, STAT=83, TEAM=84, 
		TEAMNUMBER=85, LBRACKET=86, RBRACKET=87, RE=88, IM=89, PERCENT=90, LPARENSLASH=91, 
		RPARENSLASH=92, UNDERSCORE=93, SEQUENCE=94, PRIVATE=95, PROCEDURE=96, 
		NOPASS=97, PASS=98, POINTER=99, ALLOCATABLE=100, CODIMENSION=101, CONTIGUOUS=102, 
		DIMENSION=103, PUBLIC=104, CONTAINS=105, FINAL=106, GENERIC=107, DEFERRED=108, 
		NONOVERRIDABLE=109, INTENT=110, OPTIONAL=111, PROTECTED=112, SAVE=113, 
		IN=114, OUT=115, INOUT=116, INTERFACE=117, ABSTRACT=118, ENUM=119, ENUMERATOR=120, 
		ASYNCHRONOUS=121, TARGET=122, VALUE=123, VOLATILE=124, EQUIVALENCE=125, 
		COMMON=126, NAMELIST=127, DOUBLEDOT=128, EVENT=129, WAIT=130, UNTILCOUNT=131, 
		POST=132, ERRMSG=133, ERROR=134, STOP=135, QUIET=136, ENDFILE=137, DEALLOCATE=138, 
		CYCLE=139, CONTINUE=140, CLOSE=141, UNIT=142, IOSTAT=143, IOMSG=144, ERR=145, 
		STATUS=146, CALL=147, BACKSPACE=148, ALLOCATE=149, MOLD=150, SOURCE=151, 
		OPEN=152, ACCESS=153, ACTION=154, BLANK=155, DECIMAL=156, DELIM=157, ENCODING=158, 
		FILE=159, FORM=160, NEWUNIT=161, PAD=162, POSITION=163, RECL=164, ROUND=165, 
		SIGN=166, NULLIFY=167, LOCK=168, ACQUIREDLOCK=169, INQUIRE=170, IOLENGTH=171, 
		EXIST=172, ID=173, NAMED=174, NEXTREC=175, NUMBER=176, OPENED=177, PENDING=178, 
		POS=179, READWRITE=180, SEQUENTIAL=181, SIZE=182, STREAM=183, IF=184, 
		GO=185, TO=186, NEWINDEX=187, FLUSH=188, FAIL=189, IMAGE=190, EXIT=191, 
		FORALL=192, WHERE=193, EOR=194, UNLOCK=195, SYNC=196, MEMORY=197, IMAGES=198, 
		REWIND=199, RETURN=200, FMT=201, NML=202, ADVANCE=203, REC=204, PRINT=205, 
		CRITICAL=206, CHANGE=207, SELECT=208, CASE=209, DEFAULT=210, ASSOCIATE=211, 
		ELSEWHERE=212, IS=213, RANK=214, ELSE=215, THEN=216, DO=217, CONCURRENT=218, 
		WHILE=219, SHARED=220, LOCAL=221, LOCALINIT=222, RECURSIVE=223, PURE=224, 
		NONRECURSIVE=225, IMPURE=226, ELEMENTAL=227, ATSYMBOL=228, NIL=229, QUESTION=230, 
		NOTIFY=231, TYPEOF=232, CLASSOF=233, ENUMERATION=234, DIRECT=235, LEADINGZERO=236, 
		REDUCE=237, SIMPLE=238, DEFINEDUNARYBINARYOP=239, LETTER_SPEC=240, BINARY_CONSTANT=241, 
		OCTAL_CONSTANT=242, HEX_CONSTANT=243, SQUOTE_REP_CHAR=244, DQUOTE_REP_CHAR=245, 
		REALEXPONENTLETTER=246, NAME=247, LETTER=248, DIGITSTRING=249, DIGIT=250, 
		ALPHANUMERICCHARACTER=251, C=252, E=253, D=254, EXPONENTLETTER=255, B=256, 
		O=257, Z=258, A=259, F=260, HEXDIGIT=261, FORMAT_SPACE=262, P=263, DC=264, 
		DP=265, LZS=266, LZP=267, LZ=268, RU=269, RD=270, RZ=271, RN=272, RC=273, 
		RP=274, BN=275, BZ=276, SS=277, SP=278, S=279, T=280, TL=281, TR=282, 
		X=283, I=284, EN=285, ES=286, EX=287, G=288, L=289, AT=290, DT=291;
	public const int
		RULE_name = 0, RULE_program = 1, RULE_program_unit = 2, RULE_main_program = 3, 
		RULE_external_subprogram = 4, RULE_function_subprogram = 5, RULE_subroutine_subprogram = 6, 
		RULE_module = 7, RULE_submodule = 8, RULE_block_data = 9, RULE_specification_part = 10, 
		RULE_implicit_part = 11, RULE_implicit_part_stmt = 12, RULE_declaration_construct = 13, 
		RULE_specification_construct = 14, RULE_execution_part = 15, RULE_execution_part_construct = 16, 
		RULE_internal_subprogram_part = 17, RULE_internal_subprogram = 18, RULE_module_subprogram_part = 19, 
		RULE_module_subprogram = 20, RULE_separate_module_subprogram = 21, RULE_other_specification_stmt = 22, 
		RULE_executable_construct = 23, RULE_action_stmt = 24, RULE_keyword = 25, 
		RULE_underscore = 26, RULE_constant = 27, RULE_literal_constant = 28, 
		RULE_named_constant = 29, RULE_int_constant = 30, RULE_intrinsic_operator = 31, 
		RULE_power_op = 32, RULE_mult_op = 33, RULE_add_op = 34, RULE_concat_op = 35, 
		RULE_rel_op = 36, RULE_not_op = 37, RULE_and_op = 38, RULE_or_op = 39, 
		RULE_equiv_op = 40, RULE_defined_operator = 41, RULE_defined_unary_op = 42, 
		RULE_defined_binary_op = 43, RULE_extended_intrinsic_op = 44, RULE_label = 45, 
		RULE_type_param_value = 46, RULE_type_spec = 47, RULE_declaration_type_spec = 48, 
		RULE_intrinsic_type_spec = 49, RULE_integer_type_spec = 50, RULE_kind_selector = 51, 
		RULE_signed_int_literal_constant = 52, RULE_int_literal_constant = 53, 
		RULE_kind_param = 54, RULE_signed_digit_string = 55, RULE_digit_string = 56, 
		RULE_sign = 57, RULE_signed_real_literal_constant = 58, RULE_real_literal_constant = 59, 
		RULE_significand = 60, RULE_exponent_letter = 61, RULE_exponent = 62, 
		RULE_complex_literal_constant = 63, RULE_real_part = 64, RULE_imag_part = 65, 
		RULE_char_selector = 66, RULE_length_selector = 67, RULE_char_length = 68, 
		RULE_char_literal_constant = 69, RULE_logical_literal_constant = 70, RULE_derived_type_def = 71, 
		RULE_derived_type_stmt = 72, RULE_type_attr_spec = 73, RULE_private_or_sequence = 74, 
		RULE_end_type_stmt = 75, RULE_sequence_stmt = 76, RULE_type_param_def_stmt = 77, 
		RULE_type_param_decl = 78, RULE_type_param_attr_spec = 79, RULE_component_part = 80, 
		RULE_component_def_stmt = 81, RULE_data_component_def_stmt = 82, RULE_component_attr_spec = 83, 
		RULE_component_decl = 84, RULE_component_array_spec = 85, RULE_proc_component_def_stmt = 86, 
		RULE_proc_component_attr_spec = 87, RULE_component_initialization = 88, 
		RULE_initial_data_target = 89, RULE_private_components_stmt = 90, RULE_type_bound_procedure_part = 91, 
		RULE_binding_private_stmt = 92, RULE_type_bound_proc_binding = 93, RULE_type_bound_procedure_stmt = 94, 
		RULE_type_bound_proc_decl = 95, RULE_type_bound_generic_stmt = 96, RULE_binding_attr = 97, 
		RULE_final_procedure_stmt = 98, RULE_derived_type_spec = 99, RULE_type_param_spec = 100, 
		RULE_structure_constructor = 101, RULE_component_spec = 102, RULE_component_data_source = 103, 
		RULE_enum_def = 104, RULE_enum_def_stmt = 105, RULE_enumerator_def_stmt = 106, 
		RULE_enumerator = 107, RULE_end_enum_stmt = 108, RULE_enum_type_spec = 109, 
		RULE_enum_constructor = 110, RULE_enumeration_type_def = 111, RULE_enumeration_type_stmt = 112, 
		RULE_enumeration_enumerator_stmt = 113, RULE_end_enumeration_type_stmt = 114, 
		RULE_enumeration_type_spec = 115, RULE_enumeration_constructor = 116, 
		RULE_boz_literal_constant = 117, RULE_array_constructor = 118, RULE_ac_spec = 119, 
		RULE_lbracket = 120, RULE_rbracket = 121, RULE_ac_value = 122, RULE_ac_implied_do = 123, 
		RULE_ac_implied_do_control = 124, RULE_ac_do_variable = 125, RULE_type_declaration_stmt = 126, 
		RULE_attr_spec = 127, RULE_entity_decl = 128, RULE_object_name = 129, 
		RULE_initialization = 130, RULE_null_init = 131, RULE_access_spec = 132, 
		RULE_language_binding_spec = 133, RULE_coarray_spec = 134, RULE_deferred_coshape_spec = 135, 
		RULE_explicit_coshape_spec = 136, RULE_lower_cobound = 137, RULE_upper_cobound = 138, 
		RULE_array_spec = 139, RULE_explicit_shape_spec = 140, RULE_lower_bound = 141, 
		RULE_upper_bound = 142, RULE_explicit_shape_bounds_spec = 143, RULE_explicit_bounds_expr = 144, 
		RULE_assumed_shape_spec = 145, RULE_assumed_shape_bounds_spec = 146, RULE_deferred_shape_spec = 147, 
		RULE_assumed_implied_spec = 148, RULE_assumed_size_spec = 149, RULE_implied_shape_or_assumed_size_spec = 150, 
		RULE_implied_shape_spec = 151, RULE_assumed_rank_spec = 152, RULE_intent_spec = 153, 
		RULE_rank_clause = 154, RULE_access_stmt = 155, RULE_access_id = 156, 
		RULE_allocatable_stmt = 157, RULE_allocatable_decl = 158, RULE_asynchronous_stmt = 159, 
		RULE_bind_stmt = 160, RULE_bind_entity = 161, RULE_codimension_stmt = 162, 
		RULE_codimension_decl = 163, RULE_contiguous_stmt = 164, RULE_data_stmt = 165, 
		RULE_data_stmt_set = 166, RULE_data_stmt_object = 167, RULE_data_implied_do = 168, 
		RULE_data_i_do_object = 169, RULE_data_i_do_variable = 170, RULE_data_stmt_value = 171, 
		RULE_data_stmt_repeat = 172, RULE_data_stmt_constant = 173, RULE_int_constant_subobject = 174, 
		RULE_constant_subobject = 175, RULE_dimension_stmt = 176, RULE_intent_stmt = 177, 
		RULE_optional_stmt = 178, RULE_parameter_stmt = 179, RULE_named_constant_def = 180, 
		RULE_pointer_stmt = 181, RULE_pointer_decl = 182, RULE_protected_stmt = 183, 
		RULE_save_stmt = 184, RULE_saved_entity = 185, RULE_proc_pointer_name = 186, 
		RULE_target_stmt = 187, RULE_target_decl = 188, RULE_value_stmt = 189, 
		RULE_volatile_stmt = 190, RULE_implicit_stmt = 191, RULE_implicit_spec = 192, 
		RULE_letter_spec = 193, RULE_implicit_none_spec = 194, RULE_import_stmt = 195, 
		RULE_namelist_stmt = 196, RULE_namelist_group_object = 197, RULE_equivalence_stmt = 198, 
		RULE_equivalence_set = 199, RULE_equivalence_object = 200, RULE_common_stmt = 201, 
		RULE_common_block_object = 202, RULE_designator = 203, RULE_variable = 204, 
		RULE_variable_name = 205, RULE_logical_variable = 206, RULE_char_variable = 207, 
		RULE_default_char_variable = 208, RULE_int_variable = 209, RULE_substring = 210, 
		RULE_parent_string = 211, RULE_substring_range = 212, RULE_data_ref = 213, 
		RULE_part_ref = 214, RULE_structure_component = 215, RULE_coindexed_named_object = 216, 
		RULE_complex_part_designator = 217, RULE_type_param_inquiry = 218, RULE_array_element = 219, 
		RULE_array_section = 220, RULE_subscript = 221, RULE_multiple_subscript = 222, 
		RULE_section_subscript = 223, RULE_subscript_triplet = 224, RULE_multiple_subscript_triplet = 225, 
		RULE_stride = 226, RULE_vector_subscript = 227, RULE_image_selector = 228, 
		RULE_cosubscript = 229, RULE_image_selector_spec = 230, RULE_allocate_stmt = 231, 
		RULE_alloc_opt = 232, RULE_errmsg_variable = 233, RULE_source_expr = 234, 
		RULE_allocation = 235, RULE_allocate_object = 236, RULE_allocate_shape_spec = 237, 
		RULE_lower_bound_expr = 238, RULE_lower_bounds_expr = 239, RULE_upper_bound_expr = 240, 
		RULE_upper_bounds_expr = 241, RULE_allocate_coarray_spec = 242, RULE_allocate_coshape_spec = 243, 
		RULE_nullify_stmt = 244, RULE_pointer_object = 245, RULE_deallocate_stmt = 246, 
		RULE_dealloc_opt = 247, RULE_stat_variable = 248, RULE_primary = 249, 
		RULE_conditional_expr = 250, RULE_level_1_expr = 251, RULE_mult_operand = 252, 
		RULE_add_operand = 253, RULE_level_2_expr = 254, RULE_level_3_expr = 255, 
		RULE_level_4_expr = 256, RULE_and_operand = 257, RULE_or_operand = 258, 
		RULE_equiv_operand = 259, RULE_level_5_expr = 260, RULE_expr = 261, RULE_logical_expr = 262, 
		RULE_default_char_expr = 263, RULE_int_expr = 264, RULE_numeric_expr = 265, 
		RULE_specification_expr = 266, RULE_constant_expr = 267, RULE_default_char_constant_expr = 268, 
		RULE_int_constant_expr = 269, RULE_assignment_stmt = 270, RULE_pointer_assignment_stmt = 271, 
		RULE_data_pointer_object = 272, RULE_bounds_spec = 273, RULE_bounds_remapping = 274, 
		RULE_data_target = 275, RULE_proc_pointer_object = 276, RULE_proc_component_ref = 277, 
		RULE_proc_target = 278, RULE_where_stmt = 279, RULE_where_construct = 280, 
		RULE_where_construct_stmt = 281, RULE_where_body_construct = 282, RULE_where_assignment_stmt = 283, 
		RULE_mask_expr = 284, RULE_masked_elsewhere_stmt = 285, RULE_elsewhere_stmt = 286, 
		RULE_end_where_stmt = 287, RULE_forall_construct = 288, RULE_forall_construct_stmt = 289, 
		RULE_forall_body_construct = 290, RULE_forall_assignment_stmt = 291, RULE_end_forall_stmt = 292, 
		RULE_forall_stmt = 293, RULE_block = 294, RULE_associate_construct = 295, 
		RULE_associate_stmt = 296, RULE_association = 297, RULE_selector = 298, 
		RULE_end_associate_stmt = 299, RULE_block_construct = 300, RULE_block_stmt = 301, 
		RULE_block_specification_part = 302, RULE_end_block_stmt = 303, RULE_change_team_construct = 304, 
		RULE_change_team_stmt = 305, RULE_coarray_association = 306, RULE_end_change_team_stmt = 307, 
		RULE_team_value = 308, RULE_critical_construct = 309, RULE_critical_stmt = 310, 
		RULE_end_critical_stmt = 311, RULE_do_construct = 312, RULE_do_stmt = 313, 
		RULE_label_do_stmt = 314, RULE_nonlabel_do_stmt = 315, RULE_loop_control = 316, 
		RULE_do_variable = 317, RULE_concurrent_header = 318, RULE_concurrent_control = 319, 
		RULE_concurrent_limit = 320, RULE_concurrent_step = 321, RULE_concurrent_locality = 322, 
		RULE_locality_spec = 323, RULE_reduce_operation = 324, RULE_binary_reduce_op = 325, 
		RULE_end_do = 326, RULE_end_do_stmt = 327, RULE_cycle_stmt = 328, RULE_if_construct = 329, 
		RULE_if_then_stmt = 330, RULE_else_if_stmt = 331, RULE_else_stmt = 332, 
		RULE_end_if_stmt = 333, RULE_if_stmt = 334, RULE_case_construct = 335, 
		RULE_select_case_stmt = 336, RULE_case_stmt = 337, RULE_end_select_stmt = 338, 
		RULE_case_expr = 339, RULE_case_selector = 340, RULE_case_value_range = 341, 
		RULE_case_value = 342, RULE_select_rank_construct = 343, RULE_select_rank_stmt = 344, 
		RULE_select_rank_case_stmt = 345, RULE_end_select_rank_stmt = 346, RULE_select_type_construct = 347, 
		RULE_select_type_stmt = 348, RULE_type_guard_stmt = 349, RULE_end_select_type_stmt = 350, 
		RULE_exit_stmt = 351, RULE_goto_stmt = 352, RULE_computed_goto_stmt = 353, 
		RULE_continue_stmt = 354, RULE_stop_stmt = 355, RULE_error_stop_stmt = 356, 
		RULE_stop_code = 357, RULE_fail_image_stmt = 358, RULE_notify_wait_stmt = 359, 
		RULE_notify_variable = 360, RULE_sync_all_stmt = 361, RULE_sync_stat = 362, 
		RULE_sync_images_stmt = 363, RULE_image_set = 364, RULE_sync_memory_stmt = 365, 
		RULE_sync_team_stmt = 366, RULE_event_post_stmt = 367, RULE_event_variable = 368, 
		RULE_event_wait_stmt = 369, RULE_event_wait_spec = 370, RULE_until_spec = 371, 
		RULE_form_team_stmt = 372, RULE_team_number = 373, RULE_team_variable = 374, 
		RULE_form_team_spec = 375, RULE_lock_stmt = 376, RULE_lock_stat = 377, 
		RULE_unlock_stmt = 378, RULE_lock_variable = 379, RULE_io_unit = 380, 
		RULE_file_unit_number = 381, RULE_internal_file_variable = 382, RULE_open_stmt = 383, 
		RULE_connect_spec = 384, RULE_file_name_expr = 385, RULE_iomsg_variable = 386, 
		RULE_close_stmt = 387, RULE_close_spec = 388, RULE_read_stmt = 389, RULE_write_stmt = 390, 
		RULE_print_stmt = 391, RULE_io_control_spec = 392, RULE_id_variable = 393, 
		RULE_format = 394, RULE_input_item = 395, RULE_output_item = 396, RULE_io_implied_do = 397, 
		RULE_io_implied_do_object = 398, RULE_io_implied_do_control = 399, RULE_dtv_type_spec = 400, 
		RULE_wait_stmt = 401, RULE_wait_spec = 402, RULE_backspace_stmt = 403, 
		RULE_endfile_stmt = 404, RULE_rewind_stmt = 405, RULE_position_spec = 406, 
		RULE_flush_stmt = 407, RULE_flush_spec = 408, RULE_inquire_stmt = 409, 
		RULE_inquire_spec = 410, RULE_format_stmt = 411, RULE_format_specification = 412, 
		RULE_format_items = 413, RULE_format_item = 414, RULE_unlimited_format_item = 415, 
		RULE_r = 416, RULE_data_edit_desc = 417, RULE_w = 418, RULE_m = 419, RULE_d = 420, 
		RULE_e = 421, RULE_v = 422, RULE_control_edit_desc = 423, RULE_k = 424, 
		RULE_position_edit_desc = 425, RULE_n = 426, RULE_blank_interp_edit_desc = 427, 
		RULE_decimal_edit_desc = 428, RULE_leading_zero_edit_desc = 429, RULE_round_edit_desc = 430, 
		RULE_sign_edit_desc = 431, RULE_char_string_edit_desc = 432, RULE_program_stmt = 433, 
		RULE_end_program_stmt = 434, RULE_module_stmt = 435, RULE_end_module_stmt = 436, 
		RULE_use_stmt = 437, RULE_module_nature = 438, RULE_rename = 439, RULE_only = 440, 
		RULE_only_use_name = 441, RULE_local_defined_operator = 442, RULE_use_defined_operator = 443, 
		RULE_submodule_stmt = 444, RULE_parent_identifier = 445, RULE_end_submodule_stmt = 446, 
		RULE_block_data_stmt = 447, RULE_end_block_data_stmt = 448, RULE_interface_block = 449, 
		RULE_interface_specification = 450, RULE_interface_stmt = 451, RULE_end_interface_stmt = 452, 
		RULE_interface_body = 453, RULE_procedure_stmt = 454, RULE_specific_procedure = 455, 
		RULE_generic_spec = 456, RULE_defined_io_generic_spec = 457, RULE_generic_stmt = 458, 
		RULE_external_stmt = 459, RULE_procedure_declaration_stmt = 460, RULE_proc_interface = 461, 
		RULE_proc_attr_spec = 462, RULE_proc_decl = 463, RULE_interface_name = 464, 
		RULE_proc_pointer_init = 465, RULE_initial_proc_target = 466, RULE_intrinsic_stmt = 467, 
		RULE_function_reference = 468, RULE_call_stmt = 469, RULE_procedure_designator = 470, 
		RULE_actual_arg_spec = 471, RULE_actual_arg = 472, RULE_alt_return_spec = 473, 
		RULE_conditional_arg = 474, RULE_consequent = 475, RULE_consequent_arg = 476, 
		RULE_prefix = 477, RULE_prefix_spec = 478, RULE_proc_language_binding_spec = 479, 
		RULE_function_stmt = 480, RULE_dummy_arg_name = 481, RULE_suffix = 482, 
		RULE_end_function_stmt = 483, RULE_subroutine_stmt = 484, RULE_dummy_arg = 485, 
		RULE_end_subroutine_stmt = 486, RULE_mp_subprogram_stmt = 487, RULE_end_mp_subprogram_stmt = 488, 
		RULE_entry_stmt = 489, RULE_return_stmt = 490, RULE_contains_stmt = 491, 
		RULE_stmt_function_stmt = 492, RULE_ac_value_list = 493, RULE_access_id_list = 494, 
		RULE_actual_arg_spec_list = 495, RULE_alloc_opt_list = 496, RULE_allocatable_decl_list = 497, 
		RULE_allocate_coshape_spec_list = 498, RULE_allocate_object_list = 499, 
		RULE_allocate_shape_spec_list = 500, RULE_allocation_list = 501, RULE_association_list = 502, 
		RULE_assumed_implied_spec_list = 503, RULE_assumed_shape_spec_list = 504, 
		RULE_bind_entity_list = 505, RULE_binding_attr_list = 506, RULE_binding_name_list = 507, 
		RULE_bounds_remapping_list = 508, RULE_bounds_spec_list = 509, RULE_case_value_range_list = 510, 
		RULE_close_spec_list = 511, RULE_coarray_association_list = 512, RULE_codimension_decl_list = 513, 
		RULE_common_block_object_list = 514, RULE_component_attr_spec_list = 515, 
		RULE_component_decl_list = 516, RULE_component_spec_list = 517, RULE_concurrent_control_list = 518, 
		RULE_connect_spec_list = 519, RULE_cosubscript_list = 520, RULE_data_i_do_object_list = 521, 
		RULE_data_stmt_object_list = 522, RULE_data_stmt_value_list = 523, RULE_dealloc_opt_list = 524, 
		RULE_deferred_coshape_spec_list = 525, RULE_deferred_shape_spec_list = 526, 
		RULE_dummy_arg_list = 527, RULE_dummy_arg_name_list = 528, RULE_entity_decl_list = 529, 
		RULE_entity_name_list = 530, RULE_enumerator_list = 531, RULE_enumerator_name_list = 532, 
		RULE_equivalence_object_list = 533, RULE_equivalence_set_list = 534, RULE_event_wait_spec_list = 535, 
		RULE_explicit_shape_spec_list = 536, RULE_external_name_list = 537, RULE_final_subroutine_name_list = 538, 
		RULE_flush_spec_list = 539, RULE_form_team_spec_list = 540, RULE_image_selector_spec_list = 541, 
		RULE_implicit_none_spec_list = 542, RULE_implicit_spec_list = 543, RULE_import_name_list = 544, 
		RULE_input_item_list = 545, RULE_inquire_spec_list = 546, RULE_intrinsic_procedure_name_list = 547, 
		RULE_io_control_spec_list = 548, RULE_io_implied_do_object_list = 549, 
		RULE_label_list = 550, RULE_letter_spec_list = 551, RULE_lock_stat_list = 552, 
		RULE_named_constant_def_list = 553, RULE_namelist_group_object_list = 554, 
		RULE_object_name_list = 555, RULE_only_list = 556, RULE_output_item_list = 557, 
		RULE_pointer_decl_list = 558, RULE_pointer_object_list = 559, RULE_position_spec_list = 560, 
		RULE_proc_component_attr_spec_list = 561, RULE_proc_decl_list = 562, RULE_rename_list = 563, 
		RULE_saved_entity_list = 564, RULE_section_subscript_list = 565, RULE_specific_procedure_list = 566, 
		RULE_sync_stat_list = 567, RULE_target_decl_list = 568, RULE_type_attr_spec_list = 569, 
		RULE_type_bound_proc_decl_list = 570, RULE_type_param_decl_list = 571, 
		RULE_type_param_name_list = 572, RULE_type_param_spec_list = 573, RULE_v_list = 574, 
		RULE_variable_name_list = 575, RULE_wait_spec_list = 576, RULE_access_name = 577, 
		RULE_ancestor_module_name = 578, RULE_arg_name = 579, RULE_array_name = 580, 
		RULE_associate_construct_name = 581, RULE_associate_name = 582, RULE_binding_name = 583, 
		RULE_block_construct_name = 584, RULE_block_data_name = 585, RULE_case_construct_name = 586, 
		RULE_coarray_name = 587, RULE_common_block_name = 588, RULE_component_name = 589, 
		RULE_construct_name = 590, RULE_critical_construct_name = 591, RULE_data_pointer_component_name = 592, 
		RULE_do_construct_name = 593, RULE_entity_name = 594, RULE_entry_name = 595, 
		RULE_enum_type_name = 596, RULE_enumeration_type_name = 597, RULE_enumerator_name = 598, 
		RULE_external_name = 599, RULE_final_subroutine_name = 600, RULE_forall_construct_name = 601, 
		RULE_function_name = 602, RULE_function_reduction_name = 603, RULE_generic_name = 604, 
		RULE_if_construct_name = 605, RULE_import_name = 606, RULE_index_name = 607, 
		RULE_int_constant_name = 608, RULE_int_variable_name = 609, RULE_intrinsic_procedure_name = 610, 
		RULE_local_name = 611, RULE_module_name = 612, RULE_namelist_group_name = 613, 
		RULE_parent_submodule_name = 614, RULE_parent_type_name = 615, RULE_part_name = 616, 
		RULE_procedure_component_name = 617, RULE_procedure_entity_name = 618, 
		RULE_procedure_name = 619, RULE_procptr_entity_name = 620, RULE_program_name = 621, 
		RULE_result_name = 622, RULE_scalar_constant_expr = 623, RULE_scalar_constant_subobject = 624, 
		RULE_scalar_constant = 625, RULE_scalar_default_char_constant_expr = 626, 
		RULE_scalar_default_char_expr = 627, RULE_scalar_default_char_variable = 628, 
		RULE_scalar_expr = 629, RULE_scalar_int_constant_expr = 630, RULE_scalar_int_constant_name = 631, 
		RULE_scalar_int_constant_subobject = 632, RULE_scalar_int_constant = 633, 
		RULE_scalar_int_expr = 634, RULE_scalar_int_variable_name = 635, RULE_scalar_int_variable = 636, 
		RULE_scalar_logical_expr = 637, RULE_scalar_logical_variable = 638, RULE_scalar_mask_expr = 639, 
		RULE_scalar_structure_component = 640, RULE_scalar_variable_name = 641, 
		RULE_scalar_variable = 642, RULE_select_construct_name = 643, RULE_submodule_name = 644, 
		RULE_subroutine_name = 645, RULE_team_construct_name = 646, RULE_type_name = 647, 
		RULE_type_param_name = 648, RULE_use_name = 649, RULE_where_construct_name = 650;
	public static readonly string[] ruleNames = {
		"name", "program", "program_unit", "main_program", "external_subprogram", 
		"function_subprogram", "subroutine_subprogram", "module", "submodule", 
		"block_data", "specification_part", "implicit_part", "implicit_part_stmt", 
		"declaration_construct", "specification_construct", "execution_part", 
		"execution_part_construct", "internal_subprogram_part", "internal_subprogram", 
		"module_subprogram_part", "module_subprogram", "separate_module_subprogram", 
		"other_specification_stmt", "executable_construct", "action_stmt", "keyword", 
		"underscore", "constant", "literal_constant", "named_constant", "int_constant", 
		"intrinsic_operator", "power_op", "mult_op", "add_op", "concat_op", "rel_op", 
		"not_op", "and_op", "or_op", "equiv_op", "defined_operator", "defined_unary_op", 
		"defined_binary_op", "extended_intrinsic_op", "label", "type_param_value", 
		"type_spec", "declaration_type_spec", "intrinsic_type_spec", "integer_type_spec", 
		"kind_selector", "signed_int_literal_constant", "int_literal_constant", 
		"kind_param", "signed_digit_string", "digit_string", "sign", "signed_real_literal_constant", 
		"real_literal_constant", "significand", "exponent_letter", "exponent", 
		"complex_literal_constant", "real_part", "imag_part", "char_selector", 
		"length_selector", "char_length", "char_literal_constant", "logical_literal_constant", 
		"derived_type_def", "derived_type_stmt", "type_attr_spec", "private_or_sequence", 
		"end_type_stmt", "sequence_stmt", "type_param_def_stmt", "type_param_decl", 
		"type_param_attr_spec", "component_part", "component_def_stmt", "data_component_def_stmt", 
		"component_attr_spec", "component_decl", "component_array_spec", "proc_component_def_stmt", 
		"proc_component_attr_spec", "component_initialization", "initial_data_target", 
		"private_components_stmt", "type_bound_procedure_part", "binding_private_stmt", 
		"type_bound_proc_binding", "type_bound_procedure_stmt", "type_bound_proc_decl", 
		"type_bound_generic_stmt", "binding_attr", "final_procedure_stmt", "derived_type_spec", 
		"type_param_spec", "structure_constructor", "component_spec", "component_data_source", 
		"enum_def", "enum_def_stmt", "enumerator_def_stmt", "enumerator", "end_enum_stmt", 
		"enum_type_spec", "enum_constructor", "enumeration_type_def", "enumeration_type_stmt", 
		"enumeration_enumerator_stmt", "end_enumeration_type_stmt", "enumeration_type_spec", 
		"enumeration_constructor", "boz_literal_constant", "array_constructor", 
		"ac_spec", "lbracket", "rbracket", "ac_value", "ac_implied_do", "ac_implied_do_control", 
		"ac_do_variable", "type_declaration_stmt", "attr_spec", "entity_decl", 
		"object_name", "initialization", "null_init", "access_spec", "language_binding_spec", 
		"coarray_spec", "deferred_coshape_spec", "explicit_coshape_spec", "lower_cobound", 
		"upper_cobound", "array_spec", "explicit_shape_spec", "lower_bound", "upper_bound", 
		"explicit_shape_bounds_spec", "explicit_bounds_expr", "assumed_shape_spec", 
		"assumed_shape_bounds_spec", "deferred_shape_spec", "assumed_implied_spec", 
		"assumed_size_spec", "implied_shape_or_assumed_size_spec", "implied_shape_spec", 
		"assumed_rank_spec", "intent_spec", "rank_clause", "access_stmt", "access_id", 
		"allocatable_stmt", "allocatable_decl", "asynchronous_stmt", "bind_stmt", 
		"bind_entity", "codimension_stmt", "codimension_decl", "contiguous_stmt", 
		"data_stmt", "data_stmt_set", "data_stmt_object", "data_implied_do", "data_i_do_object", 
		"data_i_do_variable", "data_stmt_value", "data_stmt_repeat", "data_stmt_constant", 
		"int_constant_subobject", "constant_subobject", "dimension_stmt", "intent_stmt", 
		"optional_stmt", "parameter_stmt", "named_constant_def", "pointer_stmt", 
		"pointer_decl", "protected_stmt", "save_stmt", "saved_entity", "proc_pointer_name", 
		"target_stmt", "target_decl", "value_stmt", "volatile_stmt", "implicit_stmt", 
		"implicit_spec", "letter_spec", "implicit_none_spec", "import_stmt", "namelist_stmt", 
		"namelist_group_object", "equivalence_stmt", "equivalence_set", "equivalence_object", 
		"common_stmt", "common_block_object", "designator", "variable", "variable_name", 
		"logical_variable", "char_variable", "default_char_variable", "int_variable", 
		"substring", "parent_string", "substring_range", "data_ref", "part_ref", 
		"structure_component", "coindexed_named_object", "complex_part_designator", 
		"type_param_inquiry", "array_element", "array_section", "subscript", "multiple_subscript", 
		"section_subscript", "subscript_triplet", "multiple_subscript_triplet", 
		"stride", "vector_subscript", "image_selector", "cosubscript", "image_selector_spec", 
		"allocate_stmt", "alloc_opt", "errmsg_variable", "source_expr", "allocation", 
		"allocate_object", "allocate_shape_spec", "lower_bound_expr", "lower_bounds_expr", 
		"upper_bound_expr", "upper_bounds_expr", "allocate_coarray_spec", "allocate_coshape_spec", 
		"nullify_stmt", "pointer_object", "deallocate_stmt", "dealloc_opt", "stat_variable", 
		"primary", "conditional_expr", "level_1_expr", "mult_operand", "add_operand", 
		"level_2_expr", "level_3_expr", "level_4_expr", "and_operand", "or_operand", 
		"equiv_operand", "level_5_expr", "expr", "logical_expr", "default_char_expr", 
		"int_expr", "numeric_expr", "specification_expr", "constant_expr", "default_char_constant_expr", 
		"int_constant_expr", "assignment_stmt", "pointer_assignment_stmt", "data_pointer_object", 
		"bounds_spec", "bounds_remapping", "data_target", "proc_pointer_object", 
		"proc_component_ref", "proc_target", "where_stmt", "where_construct", 
		"where_construct_stmt", "where_body_construct", "where_assignment_stmt", 
		"mask_expr", "masked_elsewhere_stmt", "elsewhere_stmt", "end_where_stmt", 
		"forall_construct", "forall_construct_stmt", "forall_body_construct", 
		"forall_assignment_stmt", "end_forall_stmt", "forall_stmt", "block", "associate_construct", 
		"associate_stmt", "association", "selector", "end_associate_stmt", "block_construct", 
		"block_stmt", "block_specification_part", "end_block_stmt", "change_team_construct", 
		"change_team_stmt", "coarray_association", "end_change_team_stmt", "team_value", 
		"critical_construct", "critical_stmt", "end_critical_stmt", "do_construct", 
		"do_stmt", "label_do_stmt", "nonlabel_do_stmt", "loop_control", "do_variable", 
		"concurrent_header", "concurrent_control", "concurrent_limit", "concurrent_step", 
		"concurrent_locality", "locality_spec", "reduce_operation", "binary_reduce_op", 
		"end_do", "end_do_stmt", "cycle_stmt", "if_construct", "if_then_stmt", 
		"else_if_stmt", "else_stmt", "end_if_stmt", "if_stmt", "case_construct", 
		"select_case_stmt", "case_stmt", "end_select_stmt", "case_expr", "case_selector", 
		"case_value_range", "case_value", "select_rank_construct", "select_rank_stmt", 
		"select_rank_case_stmt", "end_select_rank_stmt", "select_type_construct", 
		"select_type_stmt", "type_guard_stmt", "end_select_type_stmt", "exit_stmt", 
		"goto_stmt", "computed_goto_stmt", "continue_stmt", "stop_stmt", "error_stop_stmt", 
		"stop_code", "fail_image_stmt", "notify_wait_stmt", "notify_variable", 
		"sync_all_stmt", "sync_stat", "sync_images_stmt", "image_set", "sync_memory_stmt", 
		"sync_team_stmt", "event_post_stmt", "event_variable", "event_wait_stmt", 
		"event_wait_spec", "until_spec", "form_team_stmt", "team_number", "team_variable", 
		"form_team_spec", "lock_stmt", "lock_stat", "unlock_stmt", "lock_variable", 
		"io_unit", "file_unit_number", "internal_file_variable", "open_stmt", 
		"connect_spec", "file_name_expr", "iomsg_variable", "close_stmt", "close_spec", 
		"read_stmt", "write_stmt", "print_stmt", "io_control_spec", "id_variable", 
		"format", "input_item", "output_item", "io_implied_do", "io_implied_do_object", 
		"io_implied_do_control", "dtv_type_spec", "wait_stmt", "wait_spec", "backspace_stmt", 
		"endfile_stmt", "rewind_stmt", "position_spec", "flush_stmt", "flush_spec", 
		"inquire_stmt", "inquire_spec", "format_stmt", "format_specification", 
		"format_items", "format_item", "unlimited_format_item", "r", "data_edit_desc", 
		"w", "m", "d", "e", "v", "control_edit_desc", "k", "position_edit_desc", 
		"n", "blank_interp_edit_desc", "decimal_edit_desc", "leading_zero_edit_desc", 
		"round_edit_desc", "sign_edit_desc", "char_string_edit_desc", "program_stmt", 
		"end_program_stmt", "module_stmt", "end_module_stmt", "use_stmt", "module_nature", 
		"rename", "only", "only_use_name", "local_defined_operator", "use_defined_operator", 
		"submodule_stmt", "parent_identifier", "end_submodule_stmt", "block_data_stmt", 
		"end_block_data_stmt", "interface_block", "interface_specification", "interface_stmt", 
		"end_interface_stmt", "interface_body", "procedure_stmt", "specific_procedure", 
		"generic_spec", "defined_io_generic_spec", "generic_stmt", "external_stmt", 
		"procedure_declaration_stmt", "proc_interface", "proc_attr_spec", "proc_decl", 
		"interface_name", "proc_pointer_init", "initial_proc_target", "intrinsic_stmt", 
		"function_reference", "call_stmt", "procedure_designator", "actual_arg_spec", 
		"actual_arg", "alt_return_spec", "conditional_arg", "consequent", "consequent_arg", 
		"prefix", "prefix_spec", "proc_language_binding_spec", "function_stmt", 
		"dummy_arg_name", "suffix", "end_function_stmt", "subroutine_stmt", "dummy_arg", 
		"end_subroutine_stmt", "mp_subprogram_stmt", "end_mp_subprogram_stmt", 
		"entry_stmt", "return_stmt", "contains_stmt", "stmt_function_stmt", "ac_value_list", 
		"access_id_list", "actual_arg_spec_list", "alloc_opt_list", "allocatable_decl_list", 
		"allocate_coshape_spec_list", "allocate_object_list", "allocate_shape_spec_list", 
		"allocation_list", "association_list", "assumed_implied_spec_list", "assumed_shape_spec_list", 
		"bind_entity_list", "binding_attr_list", "binding_name_list", "bounds_remapping_list", 
		"bounds_spec_list", "case_value_range_list", "close_spec_list", "coarray_association_list", 
		"codimension_decl_list", "common_block_object_list", "component_attr_spec_list", 
		"component_decl_list", "component_spec_list", "concurrent_control_list", 
		"connect_spec_list", "cosubscript_list", "data_i_do_object_list", "data_stmt_object_list", 
		"data_stmt_value_list", "dealloc_opt_list", "deferred_coshape_spec_list", 
		"deferred_shape_spec_list", "dummy_arg_list", "dummy_arg_name_list", "entity_decl_list", 
		"entity_name_list", "enumerator_list", "enumerator_name_list", "equivalence_object_list", 
		"equivalence_set_list", "event_wait_spec_list", "explicit_shape_spec_list", 
		"external_name_list", "final_subroutine_name_list", "flush_spec_list", 
		"form_team_spec_list", "image_selector_spec_list", "implicit_none_spec_list", 
		"implicit_spec_list", "import_name_list", "input_item_list", "inquire_spec_list", 
		"intrinsic_procedure_name_list", "io_control_spec_list", "io_implied_do_object_list", 
		"label_list", "letter_spec_list", "lock_stat_list", "named_constant_def_list", 
		"namelist_group_object_list", "object_name_list", "only_list", "output_item_list", 
		"pointer_decl_list", "pointer_object_list", "position_spec_list", "proc_component_attr_spec_list", 
		"proc_decl_list", "rename_list", "saved_entity_list", "section_subscript_list", 
		"specific_procedure_list", "sync_stat_list", "target_decl_list", "type_attr_spec_list", 
		"type_bound_proc_decl_list", "type_param_decl_list", "type_param_name_list", 
		"type_param_spec_list", "v_list", "variable_name_list", "wait_spec_list", 
		"access_name", "ancestor_module_name", "arg_name", "array_name", "associate_construct_name", 
		"associate_name", "binding_name", "block_construct_name", "block_data_name", 
		"case_construct_name", "coarray_name", "common_block_name", "component_name", 
		"construct_name", "critical_construct_name", "data_pointer_component_name", 
		"do_construct_name", "entity_name", "entry_name", "enum_type_name", "enumeration_type_name", 
		"enumerator_name", "external_name", "final_subroutine_name", "forall_construct_name", 
		"function_name", "function_reduction_name", "generic_name", "if_construct_name", 
		"import_name", "index_name", "int_constant_name", "int_variable_name", 
		"intrinsic_procedure_name", "local_name", "module_name", "namelist_group_name", 
		"parent_submodule_name", "parent_type_name", "part_name", "procedure_component_name", 
		"procedure_entity_name", "procedure_name", "procptr_entity_name", "program_name", 
		"result_name", "scalar_constant_expr", "scalar_constant_subobject", "scalar_constant", 
		"scalar_default_char_constant_expr", "scalar_default_char_expr", "scalar_default_char_variable", 
		"scalar_expr", "scalar_int_constant_expr", "scalar_int_constant_name", 
		"scalar_int_constant_subobject", "scalar_int_constant", "scalar_int_expr", 
		"scalar_int_variable_name", "scalar_int_variable", "scalar_logical_expr", 
		"scalar_logical_variable", "scalar_mask_expr", "scalar_structure_component", 
		"scalar_variable_name", "scalar_variable", "select_construct_name", "submodule_name", 
		"subroutine_name", "team_construct_name", "type_name", "type_param_name", 
		"use_name", "where_construct_name"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'EXTENDS'", "'PROGRAM'", "'END'", null, 
		"'FUNCTION'", "'('", null, null, "'SUBROUTINE'", "'MODULE'", "'SUBMODULE'", 
		"'BLOCK'", "'DATA'", null, "'INTRINSIC'", "'NON_INTRINSIC'", "'=>'", "'OPERATOR'", 
		"'**'", null, null, null, "'//'", "'.EQ.'", "'.NE.'", "'.LT.'", "'.LE.'", 
		"'.GT.'", "'.GE.'", "'=='", "'/='", "'<'", "'<='", "'>'", "'>='", "'.NOT.'", 
		"'.AND.'", "'.OR.'", "'.EQV.'", "'.NEQV.'", "'READ'", "'FORMATTED'", "'UNFORMATTED'", 
		"'WRITE'", "'ASSIGNMENT'", "'='", "'USE'", "'::'", "'ONLY'", "'IMPORT'", 
		"'NONE'", "'ALL'", "'KIND'", "'INTEGER'", "'LEN'", "'REAL'", "'DOUBLE'", 
		"'PRECISION'", "'COMPLEX'", "'CHARACTER'", "'LOGICAL'", "'TYPE'", "'CLASS'", 
		"'EXTERNAL'", "'IMPLICIT'", "'PARAMETER'", null, "'FORMAT'", null, "'BIND'", 
		"'NAME'", "'RESULT'", "'ENTRY'", null, "'.TRUE.'", "'.FALSE.'", null, 
		null, "'STAT'", "'TEAM'", "'TEAM_NUMBER'", "'['", "']'", "'RE'", "'IM'", 
		"'%'", "'(/'", "'/)'", null, "'SEQUENCE'", "'PRIVATE'", "'PROCEDURE'", 
		"'NOPASS'", "'PASS'", "'POINTER'", "'ALLOCATABLE'", "'CODIMENSION'", "'CONTIGUOUS'", 
		"'DIMENSION'", "'PUBLIC'", "'CONTAINS'", "'FINAL'", "'GENERIC'", "'DEFERRED'", 
		"'NON_OVERRIDABLE'", "'INTENT'", "'OPTIONAL'", "'PROTECTED'", "'SAVE'", 
		"'IN'", "'OUT'", "'INOUT'", "'INTERFACE'", "'ABSTRACT'", "'ENUM'", "'ENUMERATOR'", 
		"'ASYNCHRONOUS'", "'TARGET'", "'VALUE'", "'VOLATILE'", "'EQUIVALENCE'", 
		"'COMMON'", "'NAMELIST'", "'..'", "'EVENT'", "'WAIT'", "'UNTIL_COUNT'", 
		"'POST'", "'ERRMSG'", "'ERROR'", "'STOP'", "'QUIET'", "'ENDFILE'", "'DEALLOCATE'", 
		"'CYCLE'", "'CONTINUE'", "'CLOSE'", "'UNIT'", "'IOSTAT'", "'IOMSG'", "'ERR'", 
		"'STATUS'", "'CALL'", "'BACKSPACE'", "'ALLOCATE'", "'MOLD'", "'SOURCE'", 
		"'OPEN'", "'ACCESS'", "'ACTION'", "'BLANK'", "'DECIMAL'", "'DELIM'", "'ENCODING'", 
		"'FILE'", "'FORM'", "'NEWUNIT'", "'PAD'", "'POSITION'", "'RECL'", "'ROUND'", 
		"'SIGN'", "'NULLIFY'", "'LOCK'", "'ACQUIRED_LOCK'", "'INQUIRE'", "'IOLENGTH'", 
		"'EXIST'", "'ID'", "'NAMED'", "'NEXTREC'", "'NUMBER'", "'OPENED'", "'PENDING'", 
		"'POS'", "'READWRITE'", "'SEQUENTIAL'", "'SIZE'", "'STREAM'", "'IF'", 
		"'GO'", "'TO'", "'NEW_INDEX'", "'FLUSH'", "'FAIL'", "'IMAGE'", "'EXIT'", 
		"'FORALL'", "'WHERE'", "'EOR'", "'UNLOCK'", "'SYNC'", "'MEMORY'", "'IMAGES'", 
		"'REWIND'", "'RETURN'", "'FMT'", "'NML'", "'ADVANCE'", "'REC'", "'PRINT'", 
		"'CRITICAL'", "'CHANGE'", "'SELECT'", "'CASE'", "'DEFAULT'", "'ASSOCIATE'", 
		"'ELSEWHERE'", "'IS'", "'RANK'", "'ELSE'", "'THEN'", "'DO'", "'CONCURRENT'", 
		"'WHILE'", "'SHARED'", "'LOCAL'", "'LOCAL_INIT'", "'RECURSIVE'", "'PURE'", 
		"'NON_RECURSIVE'", "'IMPURE'", "'ELEMENTAL'", "'@'", "'.NIL'", "'?'", 
		"'NOTIFY'", "'TYPEOF'", "'CLASSOF'", "'ENUMERATION'", "'DIRECT'", "'LEADING_ZERO'", 
		"'REDUCE'", "'SIMPLE'", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'C'", null, null, null, null, null, null, 
		null, null, null, "' '", "'P'", "'DC'", "'DP'", "'LZS'", "'LZP'", "'LZ'", 
		"'RU'", "'RD'", "'RZ'", "'RN'", "'RC'", "'RP'", "'BN'", "'BZ'", "'SS'", 
		"'SP'", "'S'", "'T'", "'TL'", "'TR'", "'X'", "'I'", "'EN'", "'ES'", "'EX'", 
		"'G'", "'L'", "'AT'", "'DT'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LINE_COMMENT", "BLOCK_COMMENT", "SPACE", "WS", "EXTENDS", "PROGRAM", 
		"END", "COMMA", "FUNCTION", "LPAREN", "RPAREN", "ASTERIK", "SUBROUTINE", 
		"MODULE", "SUBMODULE", "BLOCK", "DATA", "COLON", "INTRINSIC", "NONINTRINSIC", 
		"IMPLIES", "OPERATOR", "POWER", "SLASH", "PLUS", "MINUS", "CONCAT", "EQ", 
		"NE", "LT", "LE", "GT", "GE", "EQUAL", "NOTEQUAL", "LESSTHAN", "LESSEQUAL", 
		"GREATERTHAN", "GREATEREQUAL", "NOT", "AND", "OR", "EQV", "NEQV", "READ", 
		"FORMATTED", "UNFORMATTED", "WRITE", "ASSIGNMENT", "ASSIGN", "USE", "DOUBLECOLON", 
		"ONLY", "IMPORT", "NONE", "ALL", "KIND", "INTEGER", "LEN", "REAL", "DOUBLE", 
		"PRECISION", "COMPLEX", "CHARACTER", "LOGICAL", "TYPE", "CLASS", "EXTERNAL", 
		"IMPLICIT", "PARAMETER", "FORMATIN", "FORMAT", "BINDC", "BIND", "NAAM", 
		"RESULT", "ENTRY", "DOT", "TRUE", "FALSE", "SQUOTE", "DQUOTE", "STAT", 
		"TEAM", "TEAMNUMBER", "LBRACKET", "RBRACKET", "RE", "IM", "PERCENT", "LPARENSLASH", 
		"RPARENSLASH", "UNDERSCORE", "SEQUENCE", "PRIVATE", "PROCEDURE", "NOPASS", 
		"PASS", "POINTER", "ALLOCATABLE", "CODIMENSION", "CONTIGUOUS", "DIMENSION", 
		"PUBLIC", "CONTAINS", "FINAL", "GENERIC", "DEFERRED", "NONOVERRIDABLE", 
		"INTENT", "OPTIONAL", "PROTECTED", "SAVE", "IN", "OUT", "INOUT", "INTERFACE", 
		"ABSTRACT", "ENUM", "ENUMERATOR", "ASYNCHRONOUS", "TARGET", "VALUE", "VOLATILE", 
		"EQUIVALENCE", "COMMON", "NAMELIST", "DOUBLEDOT", "EVENT", "WAIT", "UNTILCOUNT", 
		"POST", "ERRMSG", "ERROR", "STOP", "QUIET", "ENDFILE", "DEALLOCATE", "CYCLE", 
		"CONTINUE", "CLOSE", "UNIT", "IOSTAT", "IOMSG", "ERR", "STATUS", "CALL", 
		"BACKSPACE", "ALLOCATE", "MOLD", "SOURCE", "OPEN", "ACCESS", "ACTION", 
		"BLANK", "DECIMAL", "DELIM", "ENCODING", "FILE", "FORM", "NEWUNIT", "PAD", 
		"POSITION", "RECL", "ROUND", "SIGN", "NULLIFY", "LOCK", "ACQUIREDLOCK", 
		"INQUIRE", "IOLENGTH", "EXIST", "ID", "NAMED", "NEXTREC", "NUMBER", "OPENED", 
		"PENDING", "POS", "READWRITE", "SEQUENTIAL", "SIZE", "STREAM", "IF", "GO", 
		"TO", "NEWINDEX", "FLUSH", "FAIL", "IMAGE", "EXIT", "FORALL", "WHERE", 
		"EOR", "UNLOCK", "SYNC", "MEMORY", "IMAGES", "REWIND", "RETURN", "FMT", 
		"NML", "ADVANCE", "REC", "PRINT", "CRITICAL", "CHANGE", "SELECT", "CASE", 
		"DEFAULT", "ASSOCIATE", "ELSEWHERE", "IS", "RANK", "ELSE", "THEN", "DO", 
		"CONCURRENT", "WHILE", "SHARED", "LOCAL", "LOCALINIT", "RECURSIVE", "PURE", 
		"NONRECURSIVE", "IMPURE", "ELEMENTAL", "ATSYMBOL", "NIL", "QUESTION", 
		"NOTIFY", "TYPEOF", "CLASSOF", "ENUMERATION", "DIRECT", "LEADINGZERO", 
		"REDUCE", "SIMPLE", "DEFINEDUNARYBINARYOP", "LETTER_SPEC", "BINARY_CONSTANT", 
		"OCTAL_CONSTANT", "HEX_CONSTANT", "SQUOTE_REP_CHAR", "DQUOTE_REP_CHAR", 
		"REALEXPONENTLETTER", "NAME", "LETTER", "DIGITSTRING", "DIGIT", "ALPHANUMERICCHARACTER", 
		"C", "E", "D", "EXPONENTLETTER", "B", "O", "Z", "A", "F", "HEXDIGIT", 
		"FORMAT_SPACE", "P", "DC", "DP", "LZS", "LZP", "LZ", "RU", "RD", "RZ", 
		"RN", "RC", "RP", "BN", "BZ", "SS", "SP", "S", "T", "TL", "TR", "X", "I", 
		"EN", "ES", "EX", "G", "L", "AT", "DT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FortranParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FortranParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FortranParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FortranParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(FortranParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(FortranParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(FortranParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBROUTINE() { return GetToken(FortranParser.SUBROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(FortranParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBMODULE() { return GetToken(FortranParser.SUBMODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(FortranParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(FortranParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRINSIC() { return GetToken(FortranParser.INTRINSIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONINTRINSIC() { return GetToken(FortranParser.NONINTRINSIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(FortranParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(FortranParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMATTED() { return GetToken(FortranParser.FORMATTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNFORMATTED() { return GetToken(FortranParser.UNFORMATTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(FortranParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(FortranParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(FortranParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(FortranParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(FortranParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(FortranParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(FortranParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KIND() { return GetToken(FortranParser.KIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(FortranParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEN() { return GetToken(FortranParser.LEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(FortranParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(FortranParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(FortranParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLEX() { return GetToken(FortranParser.COMPLEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(FortranParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL() { return GetToken(FortranParser.LOGICAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(FortranParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(FortranParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(FortranParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT() { return GetToken(FortranParser.IMPLICIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETER() { return GetToken(FortranParser.PARAMETER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(FortranParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIND() { return GetToken(FortranParser.BIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESULT() { return GetToken(FortranParser.RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(FortranParser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAT() { return GetToken(FortranParser.STAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEAM() { return GetToken(FortranParser.TEAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEAMNUMBER() { return GetToken(FortranParser.TEAMNUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RE() { return GetToken(FortranParser.RE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IM() { return GetToken(FortranParser.IM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(FortranParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(FortranParser.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(FortranParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOPASS() { return GetToken(FortranParser.NOPASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASS() { return GetToken(FortranParser.PASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(FortranParser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOCATABLE() { return GetToken(FortranParser.ALLOCATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODIMENSION() { return GetToken(FortranParser.CODIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTIGUOUS() { return GetToken(FortranParser.CONTIGUOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIMENSION() { return GetToken(FortranParser.DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(FortranParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(FortranParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(FortranParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERIC() { return GetToken(FortranParser.GENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(FortranParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONOVERRIDABLE() { return GetToken(FortranParser.NONOVERRIDABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTENT() { return GetToken(FortranParser.INTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(FortranParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(FortranParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVE() { return GetToken(FortranParser.SAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(FortranParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(FortranParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(FortranParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(FortranParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(FortranParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(FortranParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUMERATOR() { return GetToken(FortranParser.ENUMERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNCHRONOUS() { return GetToken(FortranParser.ASYNCHRONOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET() { return GetToken(FortranParser.TARGET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(FortranParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(FortranParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUIVALENCE() { return GetToken(FortranParser.EQUIVALENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMON() { return GetToken(FortranParser.COMMON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMELIST() { return GetToken(FortranParser.NAMELIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(FortranParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(FortranParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTILCOUNT() { return GetToken(FortranParser.UNTILCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POST() { return GetToken(FortranParser.POST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRMSG() { return GetToken(FortranParser.ERRMSG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(FortranParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(FortranParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUIET() { return GetToken(FortranParser.QUIET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDFILE() { return GetToken(FortranParser.ENDFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(FortranParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(FortranParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(FortranParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(FortranParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(FortranParser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOSTAT() { return GetToken(FortranParser.IOSTAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOMSG() { return GetToken(FortranParser.IOMSG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERR() { return GetToken(FortranParser.ERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(FortranParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(FortranParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKSPACE() { return GetToken(FortranParser.BACKSPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOCATE() { return GetToken(FortranParser.ALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOLD() { return GetToken(FortranParser.MOLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(FortranParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(FortranParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(FortranParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(FortranParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANK() { return GetToken(FortranParser.BLANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(FortranParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIM() { return GetToken(FortranParser.DELIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(FortranParser.ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(FortranParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORM() { return GetToken(FortranParser.FORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWUNIT() { return GetToken(FortranParser.NEWUNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAD() { return GetToken(FortranParser.PAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(FortranParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECL() { return GetToken(FortranParser.RECL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(FortranParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(FortranParser.SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIFY() { return GetToken(FortranParser.NULLIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(FortranParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACQUIREDLOCK() { return GetToken(FortranParser.ACQUIREDLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INQUIRE() { return GetToken(FortranParser.INQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOLENGTH() { return GetToken(FortranParser.IOLENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIST() { return GetToken(FortranParser.EXIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FortranParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMED() { return GetToken(FortranParser.NAMED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXTREC() { return GetToken(FortranParser.NEXTREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(FortranParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENED() { return GetToken(FortranParser.OPENED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PENDING() { return GetToken(FortranParser.PENDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POS() { return GetToken(FortranParser.POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READWRITE() { return GetToken(FortranParser.READWRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENTIAL() { return GetToken(FortranParser.SEQUENTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(FortranParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(FortranParser.STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(FortranParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(FortranParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(FortranParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWINDEX() { return GetToken(FortranParser.NEWINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH() { return GetToken(FortranParser.FLUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL() { return GetToken(FortranParser.FAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGE() { return GetToken(FortranParser.IMAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(FortranParser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORALL() { return GetToken(FortranParser.FORALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(FortranParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR() { return GetToken(FortranParser.EOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK() { return GetToken(FortranParser.UNLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(FortranParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(FortranParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGES() { return GetToken(FortranParser.IMAGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REWIND() { return GetToken(FortranParser.REWIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(FortranParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FMT() { return GetToken(FortranParser.FMT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NML() { return GetToken(FortranParser.NML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADVANCE() { return GetToken(FortranParser.ADVANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REC() { return GetToken(FortranParser.REC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(FortranParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRITICAL() { return GetToken(FortranParser.CRITICAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(FortranParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(FortranParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(FortranParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(FortranParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSOCIATE() { return GetToken(FortranParser.ASSOCIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEWHERE() { return GetToken(FortranParser.ELSEWHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(FortranParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(FortranParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(FortranParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(FortranParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(FortranParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(FortranParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(FortranParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED() { return GetToken(FortranParser.SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(FortranParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALINIT() { return GetToken(FortranParser.LOCALINIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(FortranParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURE() { return GetToken(FortranParser.PURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONRECURSIVE() { return GetToken(FortranParser.NONRECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPURE() { return GetToken(FortranParser.IMPURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENTAL() { return GetToken(FortranParser.ELEMENTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFY() { return GetToken(FortranParser.NOTIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(FortranParser.TYPEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASSOF() { return GetToken(FortranParser.CLASSOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUMERATION() { return GetToken(FortranParser.ENUMERATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECT() { return GetToken(FortranParser.DIRECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADINGZERO() { return GetToken(FortranParser.LEADINGZERO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUCE() { return GetToken(FortranParser.REDUCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(FortranParser.SIMPLE, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 0, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1302;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -5664683900280128L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1019726465L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 18084526735491071L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Program_unitContext[] program_unit() {
			return GetRuleContexts<Program_unitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Program_unitContext program_unit(int i) {
			return GetRuleContext<Program_unitContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1304;
			program_unit();
			State = 1308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5664683900279104L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1019611777L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98867845051449343L) != 0)) {
				{
				{
				State = 1305;
				program_unit();
				}
				}
				State = 1310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Program_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Main_programContext main_program() {
			return GetRuleContext<Main_programContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public External_subprogramContext external_subprogram() {
			return GetRuleContext<External_subprogramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubmoduleContext submodule() {
			return GetRuleContext<SubmoduleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_dataContext block_data() {
			return GetRuleContext<Block_dataContext>(0);
		}
		public Program_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProgram_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProgram_unit(this);
		}
	}

	[RuleVersion(0)]
	public Program_unitContext program_unit() {
		Program_unitContext _localctx = new Program_unitContext(Context, State);
		EnterRule(_localctx, 4, RULE_program_unit);
		try {
			State = 1316;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1311;
				main_program();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1312;
				external_subprogram();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1313;
				module();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1314;
				submodule();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1315;
				block_data();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Main_programContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public End_program_stmtContext end_program_stmt() {
			return GetRuleContext<End_program_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Program_stmtContext program_stmt() {
			return GetRuleContext<Program_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Specification_partContext specification_part() {
			return GetRuleContext<Specification_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execution_partContext execution_part() {
			return GetRuleContext<Execution_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Internal_subprogram_partContext internal_subprogram_part() {
			return GetRuleContext<Internal_subprogram_partContext>(0);
		}
		public Main_programContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterMain_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitMain_program(this);
		}
	}

	[RuleVersion(0)]
	public Main_programContext main_program() {
		Main_programContext _localctx = new Main_programContext(Context, State);
		EnterRule(_localctx, 6, RULE_main_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 1318;
				program_stmt();
				}
				break;
			}
			State = 1322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 1321;
				specification_part();
				}
				break;
			}
			State = 1325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 1324;
				execution_part();
				}
				break;
			}
			State = 1328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTAINS) {
				{
				State = 1327;
				internal_subprogram_part();
				}
			}

			State = 1330;
			end_program_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_subprogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_subprogramContext function_subprogram() {
			return GetRuleContext<Function_subprogramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subroutine_subprogramContext subroutine_subprogram() {
			return GetRuleContext<Subroutine_subprogramContext>(0);
		}
		public External_subprogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_subprogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExternal_subprogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExternal_subprogram(this);
		}
	}

	[RuleVersion(0)]
	public External_subprogramContext external_subprogram() {
		External_subprogramContext _localctx = new External_subprogramContext(Context, State);
		EnterRule(_localctx, 8, RULE_external_subprogram);
		try {
			State = 1334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1332;
				function_subprogram();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1333;
				subroutine_subprogram();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_subprogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_stmtContext function_stmt() {
			return GetRuleContext<Function_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_function_stmtContext end_function_stmt() {
			return GetRuleContext<End_function_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Specification_partContext specification_part() {
			return GetRuleContext<Specification_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execution_partContext execution_part() {
			return GetRuleContext<Execution_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Internal_subprogram_partContext internal_subprogram_part() {
			return GetRuleContext<Internal_subprogram_partContext>(0);
		}
		public Function_subprogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_subprogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFunction_subprogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFunction_subprogram(this);
		}
	}

	[RuleVersion(0)]
	public Function_subprogramContext function_subprogram() {
		Function_subprogramContext _localctx = new Function_subprogramContext(Context, State);
		EnterRule(_localctx, 10, RULE_function_subprogram);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1336;
			function_stmt();
			State = 1338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 1337;
				specification_part();
				}
				break;
			}
			State = 1341;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 1340;
				execution_part();
				}
				break;
			}
			State = 1344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTAINS) {
				{
				State = 1343;
				internal_subprogram_part();
				}
			}

			State = 1346;
			end_function_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subroutine_subprogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subroutine_stmtContext subroutine_stmt() {
			return GetRuleContext<Subroutine_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_subroutine_stmtContext end_subroutine_stmt() {
			return GetRuleContext<End_subroutine_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Specification_partContext specification_part() {
			return GetRuleContext<Specification_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execution_partContext execution_part() {
			return GetRuleContext<Execution_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Internal_subprogram_partContext internal_subprogram_part() {
			return GetRuleContext<Internal_subprogram_partContext>(0);
		}
		public Subroutine_subprogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutine_subprogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSubroutine_subprogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSubroutine_subprogram(this);
		}
	}

	[RuleVersion(0)]
	public Subroutine_subprogramContext subroutine_subprogram() {
		Subroutine_subprogramContext _localctx = new Subroutine_subprogramContext(Context, State);
		EnterRule(_localctx, 12, RULE_subroutine_subprogram);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1348;
			subroutine_stmt();
			State = 1350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 1349;
				specification_part();
				}
				break;
			}
			State = 1353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 1352;
				execution_part();
				}
				break;
			}
			State = 1356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTAINS) {
				{
				State = 1355;
				internal_subprogram_part();
				}
			}

			State = 1358;
			end_subroutine_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Module_stmtContext module_stmt() {
			return GetRuleContext<Module_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_module_stmtContext end_module_stmt() {
			return GetRuleContext<End_module_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Specification_partContext specification_part() {
			return GetRuleContext<Specification_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_subprogram_partContext module_subprogram_part() {
			return GetRuleContext<Module_subprogram_partContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 14, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1360;
			module_stmt();
			State = 1362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 1361;
				specification_part();
				}
				break;
			}
			State = 1365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTAINS) {
				{
				State = 1364;
				module_subprogram_part();
				}
			}

			State = 1367;
			end_module_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubmoduleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Submodule_stmtContext submodule_stmt() {
			return GetRuleContext<Submodule_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_submodule_stmtContext end_submodule_stmt() {
			return GetRuleContext<End_submodule_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Specification_partContext specification_part() {
			return GetRuleContext<Specification_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_subprogram_partContext module_subprogram_part() {
			return GetRuleContext<Module_subprogram_partContext>(0);
		}
		public SubmoduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_submodule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSubmodule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSubmodule(this);
		}
	}

	[RuleVersion(0)]
	public SubmoduleContext submodule() {
		SubmoduleContext _localctx = new SubmoduleContext(Context, State);
		EnterRule(_localctx, 16, RULE_submodule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1369;
			submodule_stmt();
			State = 1371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 1370;
				specification_part();
				}
				break;
			}
			State = 1374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTAINS) {
				{
				State = 1373;
				module_subprogram_part();
				}
			}

			State = 1376;
			end_submodule_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_dataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Block_data_stmtContext block_data_stmt() {
			return GetRuleContext<Block_data_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_block_data_stmtContext end_block_data_stmt() {
			return GetRuleContext<End_block_data_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Specification_partContext specification_part() {
			return GetRuleContext<Specification_partContext>(0);
		}
		public Block_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_data; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBlock_data(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBlock_data(this);
		}
	}

	[RuleVersion(0)]
	public Block_dataContext block_data() {
		Block_dataContext _localctx = new Block_dataContext(Context, State);
		EnterRule(_localctx, 18, RULE_block_data);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1378;
			block_data_stmt();
			State = 1380;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 1379;
				specification_part();
				}
				break;
			}
			State = 1382;
			end_block_data_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specification_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Use_stmtContext[] use_stmt() {
			return GetRuleContexts<Use_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_stmtContext use_stmt(int i) {
			return GetRuleContext<Use_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext[] import_stmt() {
			return GetRuleContexts<Import_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext import_stmt(int i) {
			return GetRuleContext<Import_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_partContext implicit_part() {
			return GetRuleContext<Implicit_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_constructContext[] declaration_construct() {
			return GetRuleContexts<Declaration_constructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_constructContext declaration_construct(int i) {
			return GetRuleContext<Declaration_constructContext>(i);
		}
		public Specification_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specification_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSpecification_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSpecification_part(this);
		}
	}

	[RuleVersion(0)]
	public Specification_partContext specification_part() {
		Specification_partContext _localctx = new Specification_partContext(Context, State);
		EnterRule(_localctx, 20, RULE_specification_part);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1387;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1384;
					use_stmt();
					}
					} 
				}
				State = 1389;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 1393;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1390;
					import_stmt();
					}
					} 
				}
				State = 1395;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 1397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 1396;
				implicit_part();
				}
				break;
			}
			State = 1402;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1399;
					declaration_construct();
					}
					} 
				}
				State = 1404;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_stmtContext implicit_stmt() {
			return GetRuleContext<Implicit_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_part_stmtContext[] implicit_part_stmt() {
			return GetRuleContexts<Implicit_part_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_part_stmtContext implicit_part_stmt(int i) {
			return GetRuleContext<Implicit_part_stmtContext>(i);
		}
		public Implicit_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImplicit_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImplicit_part(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_partContext implicit_part() {
		Implicit_partContext _localctx = new Implicit_partContext(Context, State);
		EnterRule(_localctx, 22, RULE_implicit_part);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1408;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1405;
					implicit_part_stmt();
					}
					} 
				}
				State = 1410;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 1411;
			implicit_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_part_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_stmtContext implicit_stmt() {
			return GetRuleContext<Implicit_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_stmtContext parameter_stmt() {
			return GetRuleContext<Parameter_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Format_stmtContext format_stmt() {
			return GetRuleContext<Format_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entry_stmtContext entry_stmt() {
			return GetRuleContext<Entry_stmtContext>(0);
		}
		public Implicit_part_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_part_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImplicit_part_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImplicit_part_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_part_stmtContext implicit_part_stmt() {
		Implicit_part_stmtContext _localctx = new Implicit_part_stmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_implicit_part_stmt);
		try {
			State = 1417;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IMPLICIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1413;
				implicit_stmt();
				}
				break;
			case PARAMETER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1414;
				parameter_stmt();
				}
				break;
			case FORMAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1415;
				format_stmt();
				}
				break;
			case ENTRY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1416;
				entry_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Specification_constructContext specification_construct() {
			return GetRuleContext<Specification_constructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_stmtContext data_stmt() {
			return GetRuleContext<Data_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Format_stmtContext format_stmt() {
			return GetRuleContext<Format_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entry_stmtContext entry_stmt() {
			return GetRuleContext<Entry_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_function_stmtContext stmt_function_stmt() {
			return GetRuleContext<Stmt_function_stmtContext>(0);
		}
		public Declaration_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDeclaration_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDeclaration_construct(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_constructContext declaration_construct() {
		Declaration_constructContext _localctx = new Declaration_constructContext(Context, State);
		EnterRule(_localctx, 26, RULE_declaration_construct);
		try {
			State = 1424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1419;
				specification_construct();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1420;
				data_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1421;
				format_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1422;
				entry_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1423;
				stmt_function_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specification_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Derived_type_defContext derived_type_def() {
			return GetRuleContext<Derived_type_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_defContext enum_def() {
			return GetRuleContext<Enum_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_type_defContext enumeration_type_def() {
			return GetRuleContext<Enumeration_type_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_stmtContext generic_stmt() {
			return GetRuleContext<Generic_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_blockContext interface_block() {
			return GetRuleContext<Interface_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_stmtContext parameter_stmt() {
			return GetRuleContext<Parameter_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_declaration_stmtContext procedure_declaration_stmt() {
			return GetRuleContext<Procedure_declaration_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Other_specification_stmtContext other_specification_stmt() {
			return GetRuleContext<Other_specification_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declaration_stmtContext type_declaration_stmt() {
			return GetRuleContext<Type_declaration_stmtContext>(0);
		}
		public Specification_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specification_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSpecification_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSpecification_construct(this);
		}
	}

	[RuleVersion(0)]
	public Specification_constructContext specification_construct() {
		Specification_constructContext _localctx = new Specification_constructContext(Context, State);
		EnterRule(_localctx, 28, RULE_specification_construct);
		try {
			State = 1435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1426;
				derived_type_def();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1427;
				enum_def();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1428;
				enumeration_type_def();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1429;
				generic_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1430;
				interface_block();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1431;
				parameter_stmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1432;
				procedure_declaration_stmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1433;
				other_specification_stmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1434;
				type_declaration_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execution_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Executable_constructContext executable_construct() {
			return GetRuleContext<Executable_constructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execution_part_constructContext[] execution_part_construct() {
			return GetRuleContexts<Execution_part_constructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execution_part_constructContext execution_part_construct(int i) {
			return GetRuleContext<Execution_part_constructContext>(i);
		}
		public Execution_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execution_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExecution_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExecution_part(this);
		}
	}

	[RuleVersion(0)]
	public Execution_partContext execution_part() {
		Execution_partContext _localctx = new Execution_partContext(Context, State);
		EnterRule(_localctx, 30, RULE_execution_part);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1437;
			executable_construct();
			State = 1441;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1438;
					execution_part_construct();
					}
					} 
				}
				State = 1443;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execution_part_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Executable_constructContext executable_construct() {
			return GetRuleContext<Executable_constructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Format_stmtContext format_stmt() {
			return GetRuleContext<Format_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entry_stmtContext entry_stmt() {
			return GetRuleContext<Entry_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_stmtContext data_stmt() {
			return GetRuleContext<Data_stmtContext>(0);
		}
		public Execution_part_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execution_part_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExecution_part_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExecution_part_construct(this);
		}
	}

	[RuleVersion(0)]
	public Execution_part_constructContext execution_part_construct() {
		Execution_part_constructContext _localctx = new Execution_part_constructContext(Context, State);
		EnterRule(_localctx, 32, RULE_execution_part_construct);
		try {
			State = 1448;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1444;
				executable_construct();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1445;
				format_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1446;
				entry_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1447;
				data_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Internal_subprogram_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Contains_stmtContext contains_stmt() {
			return GetRuleContext<Contains_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Internal_subprogramContext[] internal_subprogram() {
			return GetRuleContexts<Internal_subprogramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Internal_subprogramContext internal_subprogram(int i) {
			return GetRuleContext<Internal_subprogramContext>(i);
		}
		public Internal_subprogram_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internal_subprogram_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInternal_subprogram_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInternal_subprogram_part(this);
		}
	}

	[RuleVersion(0)]
	public Internal_subprogram_partContext internal_subprogram_part() {
		Internal_subprogram_partContext _localctx = new Internal_subprogram_partContext(Context, State);
		EnterRule(_localctx, 34, RULE_internal_subprogram_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1450;
			contains_stmt();
			State = 1454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & 565764703188418609L) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & 34335L) != 0)) {
				{
				{
				State = 1451;
				internal_subprogram();
				}
				}
				State = 1456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Internal_subprogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_subprogramContext function_subprogram() {
			return GetRuleContext<Function_subprogramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subroutine_subprogramContext subroutine_subprogram() {
			return GetRuleContext<Subroutine_subprogramContext>(0);
		}
		public Internal_subprogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internal_subprogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInternal_subprogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInternal_subprogram(this);
		}
	}

	[RuleVersion(0)]
	public Internal_subprogramContext internal_subprogram() {
		Internal_subprogramContext _localctx = new Internal_subprogramContext(Context, State);
		EnterRule(_localctx, 36, RULE_internal_subprogram);
		try {
			State = 1459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1457;
				function_subprogram();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1458;
				subroutine_subprogram();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_subprogram_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Contains_stmtContext contains_stmt() {
			return GetRuleContext<Contains_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_subprogramContext[] module_subprogram() {
			return GetRuleContexts<Module_subprogramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_subprogramContext module_subprogram(int i) {
			return GetRuleContext<Module_subprogramContext>(i);
		}
		public Module_subprogram_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_subprogram_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterModule_subprogram_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitModule_subprogram_part(this);
		}
	}

	[RuleVersion(0)]
	public Module_subprogram_partContext module_subprogram_part() {
		Module_subprogram_partContext _localctx = new Module_subprogram_partContext(Context, State);
		EnterRule(_localctx, 38, RULE_module_subprogram_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1461;
			contains_stmt();
			State = 1465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & 565764703188418609L) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & 34335L) != 0)) {
				{
				{
				State = 1462;
				module_subprogram();
				}
				}
				State = 1467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_subprogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_subprogramContext function_subprogram() {
			return GetRuleContext<Function_subprogramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subroutine_subprogramContext subroutine_subprogram() {
			return GetRuleContext<Subroutine_subprogramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Separate_module_subprogramContext separate_module_subprogram() {
			return GetRuleContext<Separate_module_subprogramContext>(0);
		}
		public Module_subprogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_subprogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterModule_subprogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitModule_subprogram(this);
		}
	}

	[RuleVersion(0)]
	public Module_subprogramContext module_subprogram() {
		Module_subprogramContext _localctx = new Module_subprogramContext(Context, State);
		EnterRule(_localctx, 40, RULE_module_subprogram);
		try {
			State = 1471;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1468;
				function_subprogram();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1469;
				subroutine_subprogram();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1470;
				separate_module_subprogram();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Separate_module_subprogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mp_subprogram_stmtContext mp_subprogram_stmt() {
			return GetRuleContext<Mp_subprogram_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_mp_subprogram_stmtContext end_mp_subprogram_stmt() {
			return GetRuleContext<End_mp_subprogram_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Specification_partContext specification_part() {
			return GetRuleContext<Specification_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execution_partContext execution_part() {
			return GetRuleContext<Execution_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Internal_subprogram_partContext internal_subprogram_part() {
			return GetRuleContext<Internal_subprogram_partContext>(0);
		}
		public Separate_module_subprogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separate_module_subprogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSeparate_module_subprogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSeparate_module_subprogram(this);
		}
	}

	[RuleVersion(0)]
	public Separate_module_subprogramContext separate_module_subprogram() {
		Separate_module_subprogramContext _localctx = new Separate_module_subprogramContext(Context, State);
		EnterRule(_localctx, 42, RULE_separate_module_subprogram);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1473;
			mp_subprogram_stmt();
			State = 1475;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 1474;
				specification_part();
				}
				break;
			}
			State = 1478;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 1477;
				execution_part();
				}
				break;
			}
			State = 1481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTAINS) {
				{
				State = 1480;
				internal_subprogram_part();
				}
			}

			State = 1483;
			end_mp_subprogram_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_specification_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Access_stmtContext access_stmt() {
			return GetRuleContext<Access_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Allocatable_stmtContext allocatable_stmt() {
			return GetRuleContext<Allocatable_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Asynchronous_stmtContext asynchronous_stmt() {
			return GetRuleContext<Asynchronous_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_stmtContext bind_stmt() {
			return GetRuleContext<Bind_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Codimension_stmtContext codimension_stmt() {
			return GetRuleContext<Codimension_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Contiguous_stmtContext contiguous_stmt() {
			return GetRuleContext<Contiguous_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dimension_stmtContext dimension_stmt() {
			return GetRuleContext<Dimension_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public External_stmtContext external_stmt() {
			return GetRuleContext<External_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Intent_stmtContext intent_stmt() {
			return GetRuleContext<Intent_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Intrinsic_stmtContext intrinsic_stmt() {
			return GetRuleContext<Intrinsic_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namelist_stmtContext namelist_stmt() {
			return GetRuleContext<Namelist_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Optional_stmtContext optional_stmt() {
			return GetRuleContext<Optional_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pointer_stmtContext pointer_stmt() {
			return GetRuleContext<Pointer_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Protected_stmtContext protected_stmt() {
			return GetRuleContext<Protected_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Save_stmtContext save_stmt() {
			return GetRuleContext<Save_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_stmtContext target_stmt() {
			return GetRuleContext<Target_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Volatile_stmtContext volatile_stmt() {
			return GetRuleContext<Volatile_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_stmtContext value_stmt() {
			return GetRuleContext<Value_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_stmtContext common_stmt() {
			return GetRuleContext<Common_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equivalence_stmtContext equivalence_stmt() {
			return GetRuleContext<Equivalence_stmtContext>(0);
		}
		public Other_specification_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_specification_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterOther_specification_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitOther_specification_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Other_specification_stmtContext other_specification_stmt() {
		Other_specification_stmtContext _localctx = new Other_specification_stmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_other_specification_stmt);
		try {
			State = 1505;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIVATE:
			case PUBLIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1485;
				access_stmt();
				}
				break;
			case ALLOCATABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1486;
				allocatable_stmt();
				}
				break;
			case ASYNCHRONOUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1487;
				asynchronous_stmt();
				}
				break;
			case BIND:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1488;
				bind_stmt();
				}
				break;
			case CODIMENSION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1489;
				codimension_stmt();
				}
				break;
			case CONTIGUOUS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1490;
				contiguous_stmt();
				}
				break;
			case DIMENSION:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1491;
				dimension_stmt();
				}
				break;
			case EXTERNAL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1492;
				external_stmt();
				}
				break;
			case INTENT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1493;
				intent_stmt();
				}
				break;
			case INTRINSIC:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1494;
				intrinsic_stmt();
				}
				break;
			case NAMELIST:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1495;
				namelist_stmt();
				}
				break;
			case OPTIONAL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1496;
				optional_stmt();
				}
				break;
			case POINTER:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1497;
				pointer_stmt();
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1498;
				protected_stmt();
				}
				break;
			case SAVE:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1499;
				save_stmt();
				}
				break;
			case TARGET:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1500;
				target_stmt();
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1501;
				volatile_stmt();
				}
				break;
			case VALUE:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1502;
				value_stmt();
				}
				break;
			case COMMON:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1503;
				common_stmt();
				}
				break;
			case EQUIVALENCE:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1504;
				equivalence_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Executable_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Action_stmtContext action_stmt() {
			return GetRuleContext<Action_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Associate_constructContext associate_construct() {
			return GetRuleContext<Associate_constructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_constructContext block_construct() {
			return GetRuleContext<Block_constructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_constructContext case_construct() {
			return GetRuleContext<Case_constructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Change_team_constructContext change_team_construct() {
			return GetRuleContext<Change_team_constructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Critical_constructContext critical_construct() {
			return GetRuleContext<Critical_constructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_constructContext do_construct() {
			return GetRuleContext<Do_constructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_constructContext if_construct() {
			return GetRuleContext<If_constructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_rank_constructContext select_rank_construct() {
			return GetRuleContext<Select_rank_constructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_type_constructContext select_type_construct() {
			return GetRuleContext<Select_type_constructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_constructContext where_construct() {
			return GetRuleContext<Where_constructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Forall_constructContext forall_construct() {
			return GetRuleContext<Forall_constructContext>(0);
		}
		public Executable_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executable_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExecutable_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExecutable_construct(this);
		}
	}

	[RuleVersion(0)]
	public Executable_constructContext executable_construct() {
		Executable_constructContext _localctx = new Executable_constructContext(Context, State);
		EnterRule(_localctx, 46, RULE_executable_construct);
		try {
			State = 1519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1507;
				action_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1508;
				associate_construct();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1509;
				block_construct();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1510;
				case_construct();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1511;
				change_team_construct();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1512;
				critical_construct();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1513;
				do_construct();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1514;
				if_construct();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1515;
				select_rank_construct();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1516;
				select_type_construct();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1517;
				where_construct();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1518;
				forall_construct();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Allocate_stmtContext allocate_stmt() {
			return GetRuleContext<Allocate_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_stmtContext assignment_stmt() {
			return GetRuleContext<Assignment_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Backspace_stmtContext backspace_stmt() {
			return GetRuleContext<Backspace_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_stmtContext call_stmt() {
			return GetRuleContext<Call_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Close_stmtContext close_stmt() {
			return GetRuleContext<Close_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Continue_stmtContext continue_stmt() {
			return GetRuleContext<Continue_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cycle_stmtContext cycle_stmt() {
			return GetRuleContext<Cycle_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Deallocate_stmtContext deallocate_stmt() {
			return GetRuleContext<Deallocate_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Endfile_stmtContext endfile_stmt() {
			return GetRuleContext<Endfile_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Error_stop_stmtContext error_stop_stmt() {
			return GetRuleContext<Error_stop_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_post_stmtContext event_post_stmt() {
			return GetRuleContext<Event_post_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_wait_stmtContext event_wait_stmt() {
			return GetRuleContext<Event_wait_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exit_stmtContext exit_stmt() {
			return GetRuleContext<Exit_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fail_image_stmtContext fail_image_stmt() {
			return GetRuleContext<Fail_image_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Flush_stmtContext flush_stmt() {
			return GetRuleContext<Flush_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Form_team_stmtContext form_team_stmt() {
			return GetRuleContext<Form_team_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Goto_stmtContext goto_stmt() {
			return GetRuleContext<Goto_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inquire_stmtContext inquire_stmt() {
			return GetRuleContext<Inquire_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lock_stmtContext lock_stmt() {
			return GetRuleContext<Lock_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Notify_wait_stmtContext notify_wait_stmt() {
			return GetRuleContext<Notify_wait_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nullify_stmtContext nullify_stmt() {
			return GetRuleContext<Nullify_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Open_stmtContext open_stmt() {
			return GetRuleContext<Open_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pointer_assignment_stmtContext pointer_assignment_stmt() {
			return GetRuleContext<Pointer_assignment_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Print_stmtContext print_stmt() {
			return GetRuleContext<Print_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Read_stmtContext read_stmt() {
			return GetRuleContext<Read_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_stmtContext return_stmt() {
			return GetRuleContext<Return_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rewind_stmtContext rewind_stmt() {
			return GetRuleContext<Rewind_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stop_stmtContext stop_stmt() {
			return GetRuleContext<Stop_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sync_all_stmtContext sync_all_stmt() {
			return GetRuleContext<Sync_all_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sync_images_stmtContext sync_images_stmt() {
			return GetRuleContext<Sync_images_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sync_memory_stmtContext sync_memory_stmt() {
			return GetRuleContext<Sync_memory_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sync_team_stmtContext sync_team_stmt() {
			return GetRuleContext<Sync_team_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unlock_stmtContext unlock_stmt() {
			return GetRuleContext<Unlock_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wait_stmtContext wait_stmt() {
			return GetRuleContext<Wait_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_stmtContext where_stmt() {
			return GetRuleContext<Where_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Write_stmtContext write_stmt() {
			return GetRuleContext<Write_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Computed_goto_stmtContext computed_goto_stmt() {
			return GetRuleContext<Computed_goto_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Forall_stmtContext forall_stmt() {
			return GetRuleContext<Forall_stmtContext>(0);
		}
		public Action_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAction_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAction_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Action_stmtContext action_stmt() {
		Action_stmtContext _localctx = new Action_stmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_action_stmt);
		try {
			State = 1560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1521;
				allocate_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1522;
				assignment_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1523;
				backspace_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1524;
				call_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1525;
				close_stmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1526;
				continue_stmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1527;
				cycle_stmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1528;
				deallocate_stmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1529;
				endfile_stmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1530;
				error_stop_stmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1531;
				event_post_stmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1532;
				event_wait_stmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1533;
				exit_stmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1534;
				fail_image_stmt();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1535;
				flush_stmt();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1536;
				form_team_stmt();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1537;
				goto_stmt();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1538;
				if_stmt();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1539;
				inquire_stmt();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1540;
				lock_stmt();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1541;
				notify_wait_stmt();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1542;
				nullify_stmt();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1543;
				open_stmt();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1544;
				pointer_assignment_stmt();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1545;
				print_stmt();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1546;
				read_stmt();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1547;
				return_stmt();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1548;
				rewind_stmt();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1549;
				stop_stmt();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1550;
				sync_all_stmt();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1551;
				sync_images_stmt();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1552;
				sync_memory_stmt();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1553;
				sync_team_stmt();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1554;
				unlock_stmt();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1555;
				wait_stmt();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1556;
				where_stmt();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1557;
				write_stmt();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1558;
				computed_goto_stmt();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1559;
				forall_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 50, RULE_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1562;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnderscoreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(FortranParser.UNDERSCORE, 0); }
		public UnderscoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_underscore; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterUnderscore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitUnderscore(this);
		}
	}

	[RuleVersion(0)]
	public UnderscoreContext underscore() {
		UnderscoreContext _localctx = new UnderscoreContext(Context, State);
		EnterRule(_localctx, 52, RULE_underscore);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1564;
			Match(UNDERSCORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Literal_constantContext literal_constant() {
			return GetRuleContext<Literal_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_constantContext named_constant() {
			return GetRuleContext<Named_constantContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 54, RULE_constant);
		try {
			State = 1568;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1566;
				literal_constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1567;
				named_constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_literal_constantContext int_literal_constant() {
			return GetRuleContext<Int_literal_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Real_literal_constantContext real_literal_constant() {
			return GetRuleContext<Real_literal_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Complex_literal_constantContext complex_literal_constant() {
			return GetRuleContext<Complex_literal_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_literal_constantContext logical_literal_constant() {
			return GetRuleContext<Logical_literal_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_literal_constantContext char_literal_constant() {
			return GetRuleContext<Char_literal_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boz_literal_constantContext boz_literal_constant() {
			return GetRuleContext<Boz_literal_constantContext>(0);
		}
		public Literal_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLiteral_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLiteral_constant(this);
		}
	}

	[RuleVersion(0)]
	public Literal_constantContext literal_constant() {
		Literal_constantContext _localctx = new Literal_constantContext(Context, State);
		EnterRule(_localctx, 56, RULE_literal_constant);
		try {
			State = 1576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1570;
				int_literal_constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1571;
				real_literal_constant();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1572;
				complex_literal_constant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1573;
				logical_literal_constant();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1574;
				char_literal_constant();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1575;
				boz_literal_constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Named_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterNamed_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitNamed_constant(this);
		}
	}

	[RuleVersion(0)]
	public Named_constantContext named_constant() {
		Named_constantContext _localctx = new Named_constantContext(Context, State);
		EnterRule(_localctx, 58, RULE_named_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1578;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Int_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInt_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInt_constant(this);
		}
	}

	[RuleVersion(0)]
	public Int_constantContext int_constant() {
		Int_constantContext _localctx = new Int_constantContext(Context, State);
		EnterRule(_localctx, 60, RULE_int_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1580;
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Intrinsic_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Power_opContext power_op() {
			return GetRuleContext<Power_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mult_opContext mult_op() {
			return GetRuleContext<Mult_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_opContext add_op() {
			return GetRuleContext<Add_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concat_opContext concat_op() {
			return GetRuleContext<Concat_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rel_opContext rel_op() {
			return GetRuleContext<Rel_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Not_opContext not_op() {
			return GetRuleContext<Not_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_opContext and_op() {
			return GetRuleContext<And_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_opContext or_op() {
			return GetRuleContext<Or_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equiv_opContext equiv_op() {
			return GetRuleContext<Equiv_opContext>(0);
		}
		public Intrinsic_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intrinsic_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIntrinsic_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIntrinsic_operator(this);
		}
	}

	[RuleVersion(0)]
	public Intrinsic_operatorContext intrinsic_operator() {
		Intrinsic_operatorContext _localctx = new Intrinsic_operatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_intrinsic_operator);
		try {
			State = 1591;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case POWER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1582;
				power_op();
				}
				break;
			case ASTERIK:
			case SLASH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1583;
				mult_op();
				}
				break;
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1584;
				add_op();
				}
				break;
			case RPAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1585;
				concat_op();
				}
				break;
			case EQ:
			case NE:
			case LT:
			case LE:
			case GT:
			case GE:
			case EQUAL:
			case NOTEQUAL:
			case LESSTHAN:
			case LESSEQUAL:
			case GREATERTHAN:
			case GREATEREQUAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1586;
				rel_op();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1587;
				not_op();
				}
				break;
			case AND:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1588;
				and_op();
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1589;
				or_op();
				}
				break;
			case EQV:
			case NEQV:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1590;
				equiv_op();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Power_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(FortranParser.POWER, 0); }
		public Power_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPower_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPower_op(this);
		}
	}

	[RuleVersion(0)]
	public Power_opContext power_op() {
		Power_opContext _localctx = new Power_opContext(Context, State);
		EnterRule(_localctx, 64, RULE_power_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1593;
			Match(POWER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mult_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(FortranParser.SLASH, 0); }
		public Mult_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterMult_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitMult_op(this);
		}
	}

	[RuleVersion(0)]
	public Mult_opContext mult_op() {
		Mult_opContext _localctx = new Mult_opContext(Context, State);
		EnterRule(_localctx, 66, RULE_mult_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1595;
			_la = TokenStream.LA(1);
			if ( !(_la==ASTERIK || _la==SLASH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(FortranParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(FortranParser.MINUS, 0); }
		public Add_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAdd_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAdd_op(this);
		}
	}

	[RuleVersion(0)]
	public Add_opContext add_op() {
		Add_opContext _localctx = new Add_opContext(Context, State);
		EnterRule(_localctx, 68, RULE_add_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1597;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concat_opContext : ParserRuleContext {
		public Concat_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concat_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConcat_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConcat_op(this);
		}
	}

	[RuleVersion(0)]
	public Concat_opContext concat_op() {
		Concat_opContext _localctx = new Concat_opContext(Context, State);
		EnterRule(_localctx, 70, RULE_concat_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rel_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(FortranParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(FortranParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(FortranParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(FortranParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(FortranParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(FortranParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(FortranParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(FortranParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(FortranParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUAL() { return GetToken(FortranParser.LESSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(FortranParser.GREATERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(FortranParser.GREATEREQUAL, 0); }
		public Rel_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rel_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterRel_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitRel_op(this);
		}
	}

	[RuleVersion(0)]
	public Rel_opContext rel_op() {
		Rel_opContext _localctx = new Rel_opContext(Context, State);
		EnterRule(_localctx, 72, RULE_rel_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1601;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1099243192320L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Not_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(FortranParser.NOT, 0); }
		public Not_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterNot_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitNot_op(this);
		}
	}

	[RuleVersion(0)]
	public Not_opContext not_op() {
		Not_opContext _localctx = new Not_opContext(Context, State);
		EnterRule(_localctx, 74, RULE_not_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1603;
			Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(FortranParser.AND, 0); }
		public And_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAnd_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAnd_op(this);
		}
	}

	[RuleVersion(0)]
	public And_opContext and_op() {
		And_opContext _localctx = new And_opContext(Context, State);
		EnterRule(_localctx, 76, RULE_and_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1605;
			Match(AND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(FortranParser.OR, 0); }
		public Or_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterOr_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitOr_op(this);
		}
	}

	[RuleVersion(0)]
	public Or_opContext or_op() {
		Or_opContext _localctx = new Or_opContext(Context, State);
		EnterRule(_localctx, 78, RULE_or_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1607;
			Match(OR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equiv_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQV() { return GetToken(FortranParser.EQV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQV() { return GetToken(FortranParser.NEQV, 0); }
		public Equiv_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equiv_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEquiv_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEquiv_op(this);
		}
	}

	[RuleVersion(0)]
	public Equiv_opContext equiv_op() {
		Equiv_opContext _localctx = new Equiv_opContext(Context, State);
		EnterRule(_localctx, 80, RULE_equiv_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1609;
			_la = TokenStream.LA(1);
			if ( !(_la==EQV || _la==NEQV) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defined_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Defined_unary_opContext defined_unary_op() {
			return GetRuleContext<Defined_unary_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Defined_binary_opContext defined_binary_op() {
			return GetRuleContext<Defined_binary_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Extended_intrinsic_opContext extended_intrinsic_op() {
			return GetRuleContext<Extended_intrinsic_opContext>(0);
		}
		public Defined_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defined_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDefined_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDefined_operator(this);
		}
	}

	[RuleVersion(0)]
	public Defined_operatorContext defined_operator() {
		Defined_operatorContext _localctx = new Defined_operatorContext(Context, State);
		EnterRule(_localctx, 82, RULE_defined_operator);
		try {
			State = 1614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1611;
				defined_unary_op();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1612;
				defined_binary_op();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1613;
				extended_intrinsic_op();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defined_unary_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINEDUNARYBINARYOP() { return GetToken(FortranParser.DEFINEDUNARYBINARYOP, 0); }
		public Defined_unary_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defined_unary_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDefined_unary_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDefined_unary_op(this);
		}
	}

	[RuleVersion(0)]
	public Defined_unary_opContext defined_unary_op() {
		Defined_unary_opContext _localctx = new Defined_unary_opContext(Context, State);
		EnterRule(_localctx, 84, RULE_defined_unary_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1616;
			Match(DEFINEDUNARYBINARYOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defined_binary_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINEDUNARYBINARYOP() { return GetToken(FortranParser.DEFINEDUNARYBINARYOP, 0); }
		public Defined_binary_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defined_binary_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDefined_binary_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDefined_binary_op(this);
		}
	}

	[RuleVersion(0)]
	public Defined_binary_opContext defined_binary_op() {
		Defined_binary_opContext _localctx = new Defined_binary_opContext(Context, State);
		EnterRule(_localctx, 86, RULE_defined_binary_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1618;
			Match(DEFINEDUNARYBINARYOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extended_intrinsic_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Intrinsic_operatorContext intrinsic_operator() {
			return GetRuleContext<Intrinsic_operatorContext>(0);
		}
		public Extended_intrinsic_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extended_intrinsic_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExtended_intrinsic_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExtended_intrinsic_op(this);
		}
	}

	[RuleVersion(0)]
	public Extended_intrinsic_opContext extended_intrinsic_op() {
		Extended_intrinsic_opContext _localctx = new Extended_intrinsic_opContext(Context, State);
		EnterRule(_localctx, 88, RULE_extended_intrinsic_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1620;
			intrinsic_operator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGITSTRING() { return GetToken(FortranParser.DIGITSTRING, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 90, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1622;
			Match(DIGITSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_param_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public Type_param_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_param_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_param_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_param_value(this);
		}
	}

	[RuleVersion(0)]
	public Type_param_valueContext type_param_value() {
		Type_param_valueContext _localctx = new Type_param_valueContext(Context, State);
		EnterRule(_localctx, 92, RULE_type_param_value);
		try {
			State = 1627;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROGRAM:
			case END:
			case FUNCTION:
			case LPAREN:
			case SUBROUTINE:
			case MODULE:
			case SUBMODULE:
			case BLOCK:
			case DATA:
			case INTRINSIC:
			case NONINTRINSIC:
			case OPERATOR:
			case PLUS:
			case MINUS:
			case NOT:
			case READ:
			case FORMATTED:
			case UNFORMATTED:
			case WRITE:
			case ASSIGNMENT:
			case USE:
			case ONLY:
			case IMPORT:
			case NONE:
			case ALL:
			case KIND:
			case INTEGER:
			case LEN:
			case REAL:
			case DOUBLE:
			case PRECISION:
			case COMPLEX:
			case CHARACTER:
			case LOGICAL:
			case TYPE:
			case CLASS:
			case EXTERNAL:
			case IMPLICIT:
			case PARAMETER:
			case FORMAT:
			case BIND:
			case RESULT:
			case ENTRY:
			case DOT:
			case TRUE:
			case FALSE:
			case STAT:
			case TEAM:
			case TEAMNUMBER:
			case LBRACKET:
			case RE:
			case IM:
			case LPARENSLASH:
			case SEQUENCE:
			case PRIVATE:
			case PROCEDURE:
			case NOPASS:
			case PASS:
			case POINTER:
			case ALLOCATABLE:
			case CODIMENSION:
			case CONTIGUOUS:
			case DIMENSION:
			case PUBLIC:
			case CONTAINS:
			case FINAL:
			case GENERIC:
			case DEFERRED:
			case NONOVERRIDABLE:
			case INTENT:
			case OPTIONAL:
			case PROTECTED:
			case SAVE:
			case IN:
			case OUT:
			case INOUT:
			case INTERFACE:
			case ABSTRACT:
			case ENUM:
			case ENUMERATOR:
			case ASYNCHRONOUS:
			case TARGET:
			case VALUE:
			case VOLATILE:
			case EQUIVALENCE:
			case COMMON:
			case NAMELIST:
			case EVENT:
			case WAIT:
			case UNTILCOUNT:
			case POST:
			case ERRMSG:
			case ERROR:
			case STOP:
			case QUIET:
			case ENDFILE:
			case DEALLOCATE:
			case CYCLE:
			case CONTINUE:
			case CLOSE:
			case UNIT:
			case IOSTAT:
			case IOMSG:
			case ERR:
			case STATUS:
			case CALL:
			case BACKSPACE:
			case ALLOCATE:
			case MOLD:
			case SOURCE:
			case OPEN:
			case ACCESS:
			case ACTION:
			case BLANK:
			case DECIMAL:
			case DELIM:
			case ENCODING:
			case FILE:
			case FORM:
			case NEWUNIT:
			case PAD:
			case POSITION:
			case RECL:
			case ROUND:
			case SIGN:
			case NULLIFY:
			case LOCK:
			case ACQUIREDLOCK:
			case INQUIRE:
			case IOLENGTH:
			case EXIST:
			case ID:
			case NAMED:
			case NEXTREC:
			case NUMBER:
			case OPENED:
			case PENDING:
			case POS:
			case READWRITE:
			case SEQUENTIAL:
			case SIZE:
			case STREAM:
			case IF:
			case GO:
			case TO:
			case NEWINDEX:
			case FLUSH:
			case FAIL:
			case IMAGE:
			case EXIT:
			case FORALL:
			case WHERE:
			case EOR:
			case UNLOCK:
			case SYNC:
			case MEMORY:
			case IMAGES:
			case REWIND:
			case RETURN:
			case FMT:
			case NML:
			case ADVANCE:
			case REC:
			case PRINT:
			case CRITICAL:
			case CHANGE:
			case SELECT:
			case CASE:
			case DEFAULT:
			case ASSOCIATE:
			case ELSEWHERE:
			case IS:
			case RANK:
			case ELSE:
			case THEN:
			case DO:
			case CONCURRENT:
			case WHILE:
			case SHARED:
			case LOCAL:
			case LOCALINIT:
			case RECURSIVE:
			case PURE:
			case NONRECURSIVE:
			case IMPURE:
			case ELEMENTAL:
			case NOTIFY:
			case TYPEOF:
			case CLASSOF:
			case ENUMERATION:
			case DIRECT:
			case LEADINGZERO:
			case REDUCE:
			case SIMPLE:
			case DEFINEDUNARYBINARYOP:
			case BINARY_CONSTANT:
			case OCTAL_CONSTANT:
			case HEX_CONSTANT:
			case SQUOTE_REP_CHAR:
			case DQUOTE_REP_CHAR:
			case NAME:
			case DIGITSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1624;
				scalar_int_expr();
				}
				break;
			case ASTERIK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1625;
				Match(ASTERIK);
				}
				break;
			case COLON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1626;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Intrinsic_type_specContext intrinsic_type_spec() {
			return GetRuleContext<Intrinsic_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Derived_type_specContext derived_type_spec() {
			return GetRuleContext<Derived_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_type_specContext enum_type_spec() {
			return GetRuleContext<Enum_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_type_specContext enumeration_type_spec() {
			return GetRuleContext<Enumeration_type_specContext>(0);
		}
		public Type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_spec(this);
		}
	}

	[RuleVersion(0)]
	public Type_specContext type_spec() {
		Type_specContext _localctx = new Type_specContext(Context, State);
		EnterRule(_localctx, 94, RULE_type_spec);
		try {
			State = 1633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1629;
				intrinsic_type_spec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1630;
				derived_type_spec();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1631;
				enum_type_spec();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1632;
				enumeration_type_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Intrinsic_type_specContext intrinsic_type_spec() {
			return GetRuleContext<Intrinsic_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(FortranParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Derived_type_specContext derived_type_spec() {
			return GetRuleContext<Derived_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_type_specContext enum_type_spec() {
			return GetRuleContext<Enum_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_type_specContext enumeration_type_spec() {
			return GetRuleContext<Enumeration_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(FortranParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPEOF() { return GetToken(FortranParser.TYPEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_refContext data_ref() {
			return GetRuleContext<Data_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASSOF() { return GetToken(FortranParser.CLASSOF, 0); }
		public Declaration_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDeclaration_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDeclaration_type_spec(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_type_specContext declaration_type_spec() {
		Declaration_type_specContext _localctx = new Declaration_type_specContext(Context, State);
		EnterRule(_localctx, 96, RULE_declaration_type_spec);
		try {
			State = 1679;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1635;
				intrinsic_type_spec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1636;
				Match(TYPE);
				State = 1637;
				Match(LPAREN);
				State = 1638;
				intrinsic_type_spec();
				State = 1639;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1641;
				Match(TYPE);
				State = 1642;
				Match(LPAREN);
				State = 1643;
				derived_type_spec();
				State = 1644;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1646;
				Match(TYPE);
				State = 1647;
				Match(LPAREN);
				State = 1648;
				enum_type_spec();
				State = 1649;
				Match(RPAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1651;
				Match(TYPE);
				State = 1652;
				Match(LPAREN);
				State = 1653;
				enumeration_type_spec();
				State = 1654;
				Match(RPAREN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1656;
				Match(CLASS);
				State = 1657;
				Match(LPAREN);
				State = 1658;
				derived_type_spec();
				State = 1659;
				Match(RPAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1661;
				Match(CLASS);
				State = 1662;
				Match(LPAREN);
				State = 1663;
				Match(ASTERIK);
				State = 1664;
				Match(RPAREN);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1665;
				Match(TYPE);
				State = 1666;
				Match(LPAREN);
				State = 1667;
				Match(ASTERIK);
				State = 1668;
				Match(RPAREN);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1669;
				Match(TYPEOF);
				State = 1670;
				Match(LPAREN);
				State = 1671;
				data_ref();
				State = 1672;
				Match(RPAREN);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1674;
				Match(CLASSOF);
				State = 1675;
				Match(LPAREN);
				State = 1676;
				data_ref();
				State = 1677;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Intrinsic_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Integer_type_specContext integer_type_spec() {
			return GetRuleContext<Integer_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(FortranParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Kind_selectorContext kind_selector() {
			return GetRuleContext<Kind_selectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(FortranParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(FortranParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLEX() { return GetToken(FortranParser.COMPLEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(FortranParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Char_selectorContext char_selector() {
			return GetRuleContext<Char_selectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL() { return GetToken(FortranParser.LOGICAL, 0); }
		public Intrinsic_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intrinsic_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIntrinsic_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIntrinsic_type_spec(this);
		}
	}

	[RuleVersion(0)]
	public Intrinsic_type_specContext intrinsic_type_spec() {
		Intrinsic_type_specContext _localctx = new Intrinsic_type_specContext(Context, State);
		EnterRule(_localctx, 98, RULE_intrinsic_type_spec);
		try {
			State = 1700;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1681;
				integer_type_spec();
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1682;
				Match(REAL);
				State = 1684;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 1683;
					kind_selector();
					}
					break;
				}
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1686;
				Match(DOUBLE);
				State = 1687;
				Match(PRECISION);
				}
				break;
			case COMPLEX:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1688;
				Match(COMPLEX);
				State = 1690;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 1689;
					kind_selector();
					}
					break;
				}
				}
				break;
			case CHARACTER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1692;
				Match(CHARACTER);
				State = 1694;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 1693;
					char_selector();
					}
					break;
				}
				}
				break;
			case LOGICAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1696;
				Match(LOGICAL);
				State = 1698;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 1697;
					kind_selector();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(FortranParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Kind_selectorContext kind_selector() {
			return GetRuleContext<Kind_selectorContext>(0);
		}
		public Integer_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInteger_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInteger_type_spec(this);
		}
	}

	[RuleVersion(0)]
	public Integer_type_specContext integer_type_spec() {
		Integer_type_specContext _localctx = new Integer_type_specContext(Context, State);
		EnterRule(_localctx, 100, RULE_integer_type_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1702;
			Match(INTEGER);
			State = 1704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 1703;
				kind_selector();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kind_selectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_constant_exprContext scalar_int_constant_expr() {
			return GetRuleContext<Scalar_int_constant_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KIND() { return GetToken(FortranParser.KIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		public Kind_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kind_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterKind_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitKind_selector(this);
		}
	}

	[RuleVersion(0)]
	public Kind_selectorContext kind_selector() {
		Kind_selectorContext _localctx = new Kind_selectorContext(Context, State);
		EnterRule(_localctx, 102, RULE_kind_selector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1706;
			Match(LPAREN);
			State = 1709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 1707;
				Match(KIND);
				State = 1708;
				Match(ASSIGN);
				}
				break;
			}
			State = 1711;
			scalar_int_constant_expr();
			State = 1712;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_int_literal_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_literal_constantContext int_literal_constant() {
			return GetRuleContext<Int_literal_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public Signed_int_literal_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_int_literal_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSigned_int_literal_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSigned_int_literal_constant(this);
		}
	}

	[RuleVersion(0)]
	public Signed_int_literal_constantContext signed_int_literal_constant() {
		Signed_int_literal_constantContext _localctx = new Signed_int_literal_constantContext(Context, State);
		EnterRule(_localctx, 104, RULE_signed_int_literal_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1715;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 1714;
				sign();
				}
			}

			State = 1717;
			int_literal_constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_literal_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Digit_stringContext digit_string() {
			return GetRuleContext<Digit_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(FortranParser.UNDERSCORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Kind_paramContext kind_param() {
			return GetRuleContext<Kind_paramContext>(0);
		}
		public Int_literal_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_literal_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInt_literal_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInt_literal_constant(this);
		}
	}

	[RuleVersion(0)]
	public Int_literal_constantContext int_literal_constant() {
		Int_literal_constantContext _localctx = new Int_literal_constantContext(Context, State);
		EnterRule(_localctx, 106, RULE_int_literal_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1719;
			digit_string();
			State = 1722;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNDERSCORE) {
				{
				State = 1720;
				Match(UNDERSCORE);
				State = 1721;
				kind_param();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kind_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Digit_stringContext digit_string() {
			return GetRuleContext<Digit_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_constant_nameContext scalar_int_constant_name() {
			return GetRuleContext<Scalar_int_constant_nameContext>(0);
		}
		public Kind_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kind_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterKind_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitKind_param(this);
		}
	}

	[RuleVersion(0)]
	public Kind_paramContext kind_param() {
		Kind_paramContext _localctx = new Kind_paramContext(Context, State);
		EnterRule(_localctx, 108, RULE_kind_param);
		try {
			State = 1726;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIGITSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1724;
				digit_string();
				}
				break;
			case PROGRAM:
			case END:
			case FUNCTION:
			case SUBROUTINE:
			case MODULE:
			case SUBMODULE:
			case BLOCK:
			case DATA:
			case INTRINSIC:
			case NONINTRINSIC:
			case OPERATOR:
			case READ:
			case FORMATTED:
			case UNFORMATTED:
			case WRITE:
			case ASSIGNMENT:
			case USE:
			case ONLY:
			case IMPORT:
			case NONE:
			case ALL:
			case KIND:
			case INTEGER:
			case LEN:
			case REAL:
			case DOUBLE:
			case PRECISION:
			case COMPLEX:
			case CHARACTER:
			case LOGICAL:
			case TYPE:
			case CLASS:
			case EXTERNAL:
			case IMPLICIT:
			case PARAMETER:
			case FORMAT:
			case BIND:
			case RESULT:
			case ENTRY:
			case STAT:
			case TEAM:
			case TEAMNUMBER:
			case RE:
			case IM:
			case SEQUENCE:
			case PRIVATE:
			case PROCEDURE:
			case NOPASS:
			case PASS:
			case POINTER:
			case ALLOCATABLE:
			case CODIMENSION:
			case CONTIGUOUS:
			case DIMENSION:
			case PUBLIC:
			case CONTAINS:
			case FINAL:
			case GENERIC:
			case DEFERRED:
			case NONOVERRIDABLE:
			case INTENT:
			case OPTIONAL:
			case PROTECTED:
			case SAVE:
			case IN:
			case OUT:
			case INOUT:
			case INTERFACE:
			case ABSTRACT:
			case ENUM:
			case ENUMERATOR:
			case ASYNCHRONOUS:
			case TARGET:
			case VALUE:
			case VOLATILE:
			case EQUIVALENCE:
			case COMMON:
			case NAMELIST:
			case EVENT:
			case WAIT:
			case UNTILCOUNT:
			case POST:
			case ERRMSG:
			case ERROR:
			case STOP:
			case QUIET:
			case ENDFILE:
			case DEALLOCATE:
			case CYCLE:
			case CONTINUE:
			case CLOSE:
			case UNIT:
			case IOSTAT:
			case IOMSG:
			case ERR:
			case STATUS:
			case CALL:
			case BACKSPACE:
			case ALLOCATE:
			case MOLD:
			case SOURCE:
			case OPEN:
			case ACCESS:
			case ACTION:
			case BLANK:
			case DECIMAL:
			case DELIM:
			case ENCODING:
			case FILE:
			case FORM:
			case NEWUNIT:
			case PAD:
			case POSITION:
			case RECL:
			case ROUND:
			case SIGN:
			case NULLIFY:
			case LOCK:
			case ACQUIREDLOCK:
			case INQUIRE:
			case IOLENGTH:
			case EXIST:
			case ID:
			case NAMED:
			case NEXTREC:
			case NUMBER:
			case OPENED:
			case PENDING:
			case POS:
			case READWRITE:
			case SEQUENTIAL:
			case SIZE:
			case STREAM:
			case IF:
			case GO:
			case TO:
			case NEWINDEX:
			case FLUSH:
			case FAIL:
			case IMAGE:
			case EXIT:
			case FORALL:
			case WHERE:
			case EOR:
			case UNLOCK:
			case SYNC:
			case MEMORY:
			case IMAGES:
			case REWIND:
			case RETURN:
			case FMT:
			case NML:
			case ADVANCE:
			case REC:
			case PRINT:
			case CRITICAL:
			case CHANGE:
			case SELECT:
			case CASE:
			case DEFAULT:
			case ASSOCIATE:
			case ELSEWHERE:
			case IS:
			case RANK:
			case ELSE:
			case THEN:
			case DO:
			case CONCURRENT:
			case WHILE:
			case SHARED:
			case LOCAL:
			case LOCALINIT:
			case RECURSIVE:
			case PURE:
			case NONRECURSIVE:
			case IMPURE:
			case ELEMENTAL:
			case NOTIFY:
			case TYPEOF:
			case CLASSOF:
			case ENUMERATION:
			case DIRECT:
			case LEADINGZERO:
			case REDUCE:
			case SIMPLE:
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1725;
				scalar_int_constant_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_digit_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Digit_stringContext digit_string() {
			return GetRuleContext<Digit_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public Signed_digit_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_digit_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSigned_digit_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSigned_digit_string(this);
		}
	}

	[RuleVersion(0)]
	public Signed_digit_stringContext signed_digit_string() {
		Signed_digit_stringContext _localctx = new Signed_digit_stringContext(Context, State);
		EnterRule(_localctx, 110, RULE_signed_digit_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1729;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 1728;
				sign();
				}
			}

			State = 1731;
			digit_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Digit_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGITSTRING() { return GetToken(FortranParser.DIGITSTRING, 0); }
		public Digit_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_digit_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDigit_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDigit_string(this);
		}
	}

	[RuleVersion(0)]
	public Digit_stringContext digit_string() {
		Digit_stringContext _localctx = new Digit_stringContext(Context, State);
		EnterRule(_localctx, 112, RULE_digit_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1733;
			Match(DIGITSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(FortranParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(FortranParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 114, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1735;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_real_literal_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Real_literal_constantContext real_literal_constant() {
			return GetRuleContext<Real_literal_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public Signed_real_literal_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_real_literal_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSigned_real_literal_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSigned_real_literal_constant(this);
		}
	}

	[RuleVersion(0)]
	public Signed_real_literal_constantContext signed_real_literal_constant() {
		Signed_real_literal_constantContext _localctx = new Signed_real_literal_constantContext(Context, State);
		EnterRule(_localctx, 116, RULE_signed_real_literal_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1738;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 1737;
				sign();
				}
			}

			State = 1740;
			real_literal_constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_literal_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SignificandContext significand() {
			return GetRuleContext<SignificandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exponent_letterContext exponent_letter() {
			return GetRuleContext<Exponent_letterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExponentContext exponent() {
			return GetRuleContext<ExponentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(FortranParser.UNDERSCORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Kind_paramContext kind_param() {
			return GetRuleContext<Kind_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Digit_stringContext digit_string() {
			return GetRuleContext<Digit_stringContext>(0);
		}
		public Real_literal_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_literal_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterReal_literal_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitReal_literal_constant(this);
		}
	}

	[RuleVersion(0)]
	public Real_literal_constantContext real_literal_constant() {
		Real_literal_constantContext _localctx = new Real_literal_constantContext(Context, State);
		EnterRule(_localctx, 118, RULE_real_literal_constant);
		int _la;
		try {
			State = 1759;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1742;
				significand();
				State = 1746;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==E || _la==D) {
					{
					State = 1743;
					exponent_letter();
					State = 1744;
					exponent();
					}
				}

				State = 1750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNDERSCORE) {
					{
					State = 1748;
					Match(UNDERSCORE);
					State = 1749;
					kind_param();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1752;
				digit_string();
				State = 1753;
				exponent_letter();
				State = 1754;
				exponent();
				State = 1757;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNDERSCORE) {
					{
					State = 1755;
					Match(UNDERSCORE);
					State = 1756;
					kind_param();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignificandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Digit_stringContext[] digit_string() {
			return GetRuleContexts<Digit_stringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Digit_stringContext digit_string(int i) {
			return GetRuleContext<Digit_stringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(FortranParser.DOT, 0); }
		public SignificandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_significand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSignificand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSignificand(this);
		}
	}

	[RuleVersion(0)]
	public SignificandContext significand() {
		SignificandContext _localctx = new SignificandContext(Context, State);
		EnterRule(_localctx, 120, RULE_significand);
		try {
			State = 1768;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIGITSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1761;
				digit_string();
				State = 1762;
				Match(DOT);
				State = 1764;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					State = 1763;
					digit_string();
					}
					break;
				}
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1766;
				Match(DOT);
				State = 1767;
				digit_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exponent_letterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode E() { return GetToken(FortranParser.E, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode D() { return GetToken(FortranParser.D, 0); }
		public Exponent_letterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponent_letter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExponent_letter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExponent_letter(this);
		}
	}

	[RuleVersion(0)]
	public Exponent_letterContext exponent_letter() {
		Exponent_letterContext _localctx = new Exponent_letterContext(Context, State);
		EnterRule(_localctx, 122, RULE_exponent_letter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1770;
			_la = TokenStream.LA(1);
			if ( !(_la==E || _la==D) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_digit_stringContext signed_digit_string() {
			return GetRuleContext<Signed_digit_stringContext>(0);
		}
		public ExponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExponent(this);
		}
	}

	[RuleVersion(0)]
	public ExponentContext exponent() {
		ExponentContext _localctx = new ExponentContext(Context, State);
		EnterRule(_localctx, 124, RULE_exponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1772;
			signed_digit_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Complex_literal_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_partContext real_part() {
			return GetRuleContext<Real_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Imag_partContext imag_part() {
			return GetRuleContext<Imag_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Complex_literal_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complex_literal_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterComplex_literal_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitComplex_literal_constant(this);
		}
	}

	[RuleVersion(0)]
	public Complex_literal_constantContext complex_literal_constant() {
		Complex_literal_constantContext _localctx = new Complex_literal_constantContext(Context, State);
		EnterRule(_localctx, 126, RULE_complex_literal_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1774;
			Match(LPAREN);
			State = 1775;
			real_part();
			State = 1776;
			Match(COMMA);
			State = 1777;
			imag_part();
			State = 1778;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_int_literal_constantContext signed_int_literal_constant() {
			return GetRuleContext<Signed_int_literal_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signed_real_literal_constantContext signed_real_literal_constant() {
			return GetRuleContext<Signed_real_literal_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_constantContext named_constant() {
			return GetRuleContext<Named_constantContext>(0);
		}
		public Real_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterReal_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitReal_part(this);
		}
	}

	[RuleVersion(0)]
	public Real_partContext real_part() {
		Real_partContext _localctx = new Real_partContext(Context, State);
		EnterRule(_localctx, 128, RULE_real_part);
		try {
			State = 1783;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1780;
				signed_int_literal_constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1781;
				signed_real_literal_constant();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1782;
				named_constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Imag_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_int_literal_constantContext signed_int_literal_constant() {
			return GetRuleContext<Signed_int_literal_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signed_real_literal_constantContext signed_real_literal_constant() {
			return GetRuleContext<Signed_real_literal_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_constantContext named_constant() {
			return GetRuleContext<Named_constantContext>(0);
		}
		public Imag_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imag_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImag_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImag_part(this);
		}
	}

	[RuleVersion(0)]
	public Imag_partContext imag_part() {
		Imag_partContext _localctx = new Imag_partContext(Context, State);
		EnterRule(_localctx, 130, RULE_imag_part);
		try {
			State = 1788;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1785;
				signed_int_literal_constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1786;
				signed_real_literal_constant();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1787;
				named_constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_selectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Length_selectorContext length_selector() {
			return GetRuleContext<Length_selectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEN() { return GetToken(FortranParser.LEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(FortranParser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(FortranParser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_valueContext type_param_value() {
			return GetRuleContext<Type_param_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KIND() { return GetToken(FortranParser.KIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_constant_exprContext scalar_int_constant_expr() {
			return GetRuleContext<Scalar_int_constant_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Char_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterChar_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitChar_selector(this);
		}
	}

	[RuleVersion(0)]
	public Char_selectorContext char_selector() {
		Char_selectorContext _localctx = new Char_selectorContext(Context, State);
		EnterRule(_localctx, 132, RULE_char_selector);
		int _la;
		try {
			State = 1823;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1790;
				length_selector();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1791;
				Match(LPAREN);
				State = 1792;
				Match(LEN);
				State = 1793;
				Match(ASSIGN);
				State = 1794;
				type_param_value();
				State = 1795;
				Match(COMMA);
				State = 1796;
				Match(KIND);
				State = 1797;
				Match(ASSIGN);
				State = 1798;
				scalar_int_constant_expr();
				State = 1799;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1801;
				Match(LPAREN);
				State = 1802;
				type_param_value();
				State = 1803;
				Match(COMMA);
				State = 1806;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 1804;
					Match(KIND);
					State = 1805;
					Match(ASSIGN);
					}
					break;
				}
				State = 1808;
				scalar_int_constant_expr();
				State = 1809;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1811;
				Match(LPAREN);
				State = 1812;
				Match(KIND);
				State = 1813;
				Match(ASSIGN);
				State = 1814;
				scalar_int_constant_expr();
				State = 1819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1815;
					Match(COMMA);
					State = 1816;
					Match(LEN);
					State = 1817;
					Match(ASSIGN);
					State = 1818;
					type_param_value();
					}
				}

				State = 1821;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Length_selectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_valueContext type_param_value() {
			return GetRuleContext<Type_param_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEN() { return GetToken(FortranParser.LEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Char_lengthContext char_length() {
			return GetRuleContext<Char_lengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		public Length_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_length_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLength_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLength_selector(this);
		}
	}

	[RuleVersion(0)]
	public Length_selectorContext length_selector() {
		Length_selectorContext _localctx = new Length_selectorContext(Context, State);
		EnterRule(_localctx, 134, RULE_length_selector);
		try {
			State = 1838;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1825;
				Match(LPAREN);
				State = 1828;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 1826;
					Match(LEN);
					State = 1827;
					Match(ASSIGN);
					}
					break;
				}
				State = 1830;
				type_param_value();
				State = 1831;
				Match(RPAREN);
				}
				break;
			case ASTERIK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1833;
				Match(ASTERIK);
				State = 1834;
				char_length();
				State = 1836;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 1835;
					Match(COMMA);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_lengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_valueContext type_param_value() {
			return GetRuleContext<Type_param_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Int_literal_constantContext int_literal_constant() {
			return GetRuleContext<Int_literal_constantContext>(0);
		}
		public Char_lengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_length; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterChar_length(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitChar_length(this);
		}
	}

	[RuleVersion(0)]
	public Char_lengthContext char_length() {
		Char_lengthContext _localctx = new Char_lengthContext(Context, State);
		EnterRule(_localctx, 136, RULE_char_length);
		try {
			State = 1845;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1840;
				Match(LPAREN);
				State = 1841;
				type_param_value();
				State = 1842;
				Match(RPAREN);
				}
				break;
			case DIGITSTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1844;
				int_literal_constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_literal_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUOTE_REP_CHAR() { return GetToken(FortranParser.SQUOTE_REP_CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Kind_paramContext kind_param() {
			return GetRuleContext<Kind_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(FortranParser.UNDERSCORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQUOTE_REP_CHAR() { return GetToken(FortranParser.DQUOTE_REP_CHAR, 0); }
		public Char_literal_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_literal_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterChar_literal_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitChar_literal_constant(this);
		}
	}

	[RuleVersion(0)]
	public Char_literal_constantContext char_literal_constant() {
		Char_literal_constantContext _localctx = new Char_literal_constantContext(Context, State);
		EnterRule(_localctx, 138, RULE_char_literal_constant);
		int _la;
		try {
			State = 1859;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1850;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5664683900280128L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1019726465L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 90142120773419007L) != 0)) {
					{
					State = 1847;
					kind_param();
					State = 1848;
					Match(UNDERSCORE);
					}
				}

				State = 1852;
				Match(SQUOTE_REP_CHAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1856;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5664683900280128L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1019726465L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 90142120773419007L) != 0)) {
					{
					State = 1853;
					kind_param();
					State = 1854;
					Match(UNDERSCORE);
					}
				}

				State = 1858;
				Match(DQUOTE_REP_CHAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_literal_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(FortranParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(FortranParser.UNDERSCORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Kind_paramContext kind_param() {
			return GetRuleContext<Kind_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(FortranParser.FALSE, 0); }
		public Logical_literal_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_literal_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLogical_literal_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLogical_literal_constant(this);
		}
	}

	[RuleVersion(0)]
	public Logical_literal_constantContext logical_literal_constant() {
		Logical_literal_constantContext _localctx = new Logical_literal_constantContext(Context, State);
		EnterRule(_localctx, 140, RULE_logical_literal_constant);
		int _la;
		try {
			State = 1871;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1861;
				Match(TRUE);
				State = 1864;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNDERSCORE) {
					{
					State = 1862;
					Match(UNDERSCORE);
					State = 1863;
					kind_param();
					}
				}

				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1866;
				Match(FALSE);
				State = 1869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNDERSCORE) {
					{
					State = 1867;
					Match(UNDERSCORE);
					State = 1868;
					kind_param();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_type_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Derived_type_stmtContext derived_type_stmt() {
			return GetRuleContext<Derived_type_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_type_stmtContext end_type_stmt() {
			return GetRuleContext<End_type_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_def_stmtContext[] type_param_def_stmt() {
			return GetRuleContexts<Type_param_def_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_def_stmtContext type_param_def_stmt(int i) {
			return GetRuleContext<Type_param_def_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Private_or_sequenceContext[] private_or_sequence() {
			return GetRuleContexts<Private_or_sequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Private_or_sequenceContext private_or_sequence(int i) {
			return GetRuleContext<Private_or_sequenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_partContext component_part() {
			return GetRuleContext<Component_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_bound_procedure_partContext type_bound_procedure_part() {
			return GetRuleContext<Type_bound_procedure_partContext>(0);
		}
		public Derived_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_type_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDerived_type_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDerived_type_def(this);
		}
	}

	[RuleVersion(0)]
	public Derived_type_defContext derived_type_def() {
		Derived_type_defContext _localctx = new Derived_type_defContext(Context, State);
		EnterRule(_localctx, 142, RULE_derived_type_def);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1873;
			derived_type_stmt();
			State = 1877;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1874;
					type_param_def_stmt();
					}
					} 
				}
				State = 1879;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			}
			State = 1883;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEQUENCE || _la==PRIVATE) {
				{
				{
				State = 1880;
				private_or_sequence();
				}
				}
				State = 1885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1887;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				State = 1886;
				component_part();
				}
				break;
			}
			State = 1890;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTAINS) {
				{
				State = 1889;
				type_bound_procedure_part();
				}
			}

			State = 1892;
			end_type_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_type_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(FortranParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_name_listContext type_param_name_list() {
			return GetRuleContext<Type_param_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_attr_spec_listContext type_attr_spec_list() {
			return GetRuleContext<Type_attr_spec_listContext>(0);
		}
		public Derived_type_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_type_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDerived_type_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDerived_type_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Derived_type_stmtContext derived_type_stmt() {
		Derived_type_stmtContext _localctx = new Derived_type_stmtContext(Context, State);
		EnterRule(_localctx, 144, RULE_derived_type_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1894;
			Match(TYPE);
			State = 1900;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA || _la==DOUBLECOLON) {
				{
				State = 1897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1895;
					Match(COMMA);
					State = 1896;
					type_attr_spec_list();
					}
				}

				State = 1899;
				Match(DOUBLECOLON);
				}
			}

			State = 1902;
			type_name();
			State = 1907;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 1903;
				Match(LPAREN);
				State = 1904;
				type_param_name_list();
				State = 1905;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_attr_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(FortranParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Access_specContext access_spec() {
			return GetRuleContext<Access_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIND() { return GetToken(FortranParser.BIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode C() { return GetToken(FortranParser.C, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(FortranParser.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parent_type_nameContext parent_type_name() {
			return GetRuleContext<Parent_type_nameContext>(0);
		}
		public Type_attr_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_attr_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_attr_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_attr_spec(this);
		}
	}

	[RuleVersion(0)]
	public Type_attr_specContext type_attr_spec() {
		Type_attr_specContext _localctx = new Type_attr_specContext(Context, State);
		EnterRule(_localctx, 146, RULE_type_attr_spec);
		try {
			State = 1920;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1909;
				Match(ABSTRACT);
				}
				break;
			case PRIVATE:
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1910;
				access_spec();
				}
				break;
			case BIND:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1911;
				Match(BIND);
				State = 1912;
				Match(LPAREN);
				State = 1913;
				Match(C);
				State = 1914;
				Match(RPAREN);
				}
				break;
			case EXTENDS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1915;
				Match(EXTENDS);
				State = 1916;
				Match(LPAREN);
				State = 1917;
				parent_type_name();
				State = 1918;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Private_or_sequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Private_components_stmtContext private_components_stmt() {
			return GetRuleContext<Private_components_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_stmtContext sequence_stmt() {
			return GetRuleContext<Sequence_stmtContext>(0);
		}
		public Private_or_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_private_or_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPrivate_or_sequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPrivate_or_sequence(this);
		}
	}

	[RuleVersion(0)]
	public Private_or_sequenceContext private_or_sequence() {
		Private_or_sequenceContext _localctx = new Private_or_sequenceContext(Context, State);
		EnterRule(_localctx, 148, RULE_private_or_sequence);
		try {
			State = 1924;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIVATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1922;
				private_components_stmt();
				}
				break;
			case SEQUENCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1923;
				sequence_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_type_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(FortranParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public End_type_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_type_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_type_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_type_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_type_stmtContext end_type_stmt() {
		End_type_stmtContext _localctx = new End_type_stmtContext(Context, State);
		EnterRule(_localctx, 150, RULE_end_type_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1926;
			Match(END);
			State = 1927;
			Match(TYPE);
			State = 1929;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 1928;
				type_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(FortranParser.SEQUENCE, 0); }
		public Sequence_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSequence_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSequence_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_stmtContext sequence_stmt() {
		Sequence_stmtContext _localctx = new Sequence_stmtContext(Context, State);
		EnterRule(_localctx, 152, RULE_sequence_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1931;
			Match(SEQUENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_param_def_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Integer_type_specContext integer_type_spec() {
			return GetRuleContext<Integer_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_attr_specContext type_param_attr_spec() {
			return GetRuleContext<Type_param_attr_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_decl_listContext type_param_decl_list() {
			return GetRuleContext<Type_param_decl_listContext>(0);
		}
		public Type_param_def_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_param_def_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_param_def_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_param_def_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Type_param_def_stmtContext type_param_def_stmt() {
		Type_param_def_stmtContext _localctx = new Type_param_def_stmtContext(Context, State);
		EnterRule(_localctx, 154, RULE_type_param_def_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1933;
			integer_type_spec();
			State = 1934;
			Match(COMMA);
			State = 1935;
			type_param_attr_spec();
			State = 1936;
			Match(DOUBLECOLON);
			State = 1937;
			type_param_decl_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_param_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_nameContext type_param_name() {
			return GetRuleContext<Type_param_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_constant_exprContext scalar_int_constant_expr() {
			return GetRuleContext<Scalar_int_constant_exprContext>(0);
		}
		public Type_param_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_param_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_param_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_param_decl(this);
		}
	}

	[RuleVersion(0)]
	public Type_param_declContext type_param_decl() {
		Type_param_declContext _localctx = new Type_param_declContext(Context, State);
		EnterRule(_localctx, 156, RULE_type_param_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1939;
			type_param_name();
			State = 1942;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 1940;
				Match(ASSIGN);
				State = 1941;
				scalar_int_constant_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_param_attr_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KIND() { return GetToken(FortranParser.KIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEN() { return GetToken(FortranParser.LEN, 0); }
		public Type_param_attr_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_param_attr_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_param_attr_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_param_attr_spec(this);
		}
	}

	[RuleVersion(0)]
	public Type_param_attr_specContext type_param_attr_spec() {
		Type_param_attr_specContext _localctx = new Type_param_attr_specContext(Context, State);
		EnterRule(_localctx, 158, RULE_type_param_attr_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1944;
			_la = TokenStream.LA(1);
			if ( !(_la==KIND || _la==LEN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Component_def_stmtContext[] component_def_stmt() {
			return GetRuleContexts<Component_def_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_def_stmtContext component_def_stmt(int i) {
			return GetRuleContext<Component_def_stmtContext>(i);
		}
		public Component_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterComponent_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitComponent_part(this);
		}
	}

	[RuleVersion(0)]
	public Component_partContext component_part() {
		Component_partContext _localctx = new Component_partContext(Context, State);
		EnterRule(_localctx, 160, RULE_component_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1949;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & 274877907949L) != 0) || _la==TYPEOF || _la==CLASSOF) {
				{
				{
				State = 1946;
				component_def_stmt();
				}
				}
				State = 1951;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_def_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_component_def_stmtContext data_component_def_stmt() {
			return GetRuleContext<Data_component_def_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_component_def_stmtContext proc_component_def_stmt() {
			return GetRuleContext<Proc_component_def_stmtContext>(0);
		}
		public Component_def_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_def_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterComponent_def_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitComponent_def_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Component_def_stmtContext component_def_stmt() {
		Component_def_stmtContext _localctx = new Component_def_stmtContext(Context, State);
		EnterRule(_localctx, 162, RULE_component_def_stmt);
		try {
			State = 1954;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case REAL:
			case DOUBLE:
			case COMPLEX:
			case CHARACTER:
			case LOGICAL:
			case TYPE:
			case CLASS:
			case TYPEOF:
			case CLASSOF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1952;
				data_component_def_stmt();
				}
				break;
			case PROCEDURE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1953;
				proc_component_def_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_component_def_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_type_specContext declaration_type_spec() {
			return GetRuleContext<Declaration_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_decl_listContext component_decl_list() {
			return GetRuleContext<Component_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Component_attr_spec_listContext component_attr_spec_list() {
			return GetRuleContext<Component_attr_spec_listContext>(0);
		}
		public Data_component_def_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_component_def_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_component_def_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_component_def_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Data_component_def_stmtContext data_component_def_stmt() {
		Data_component_def_stmtContext _localctx = new Data_component_def_stmtContext(Context, State);
		EnterRule(_localctx, 164, RULE_data_component_def_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1956;
			declaration_type_spec();
			State = 1962;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA || _la==DOUBLECOLON) {
				{
				State = 1959;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1957;
					Match(COMMA);
					State = 1958;
					component_attr_spec_list();
					}
				}

				State = 1961;
				Match(DOUBLECOLON);
				}
			}

			State = 1964;
			component_decl_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_attr_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Access_specContext access_spec() {
			return GetRuleContext<Access_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOCATABLE() { return GetToken(FortranParser.ALLOCATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODIMENSION() { return GetToken(FortranParser.CODIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LbracketContext lbracket() {
			return GetRuleContext<LbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Coarray_specContext coarray_spec() {
			return GetRuleContext<Coarray_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RbracketContext rbracket() {
			return GetRuleContext<RbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTIGUOUS() { return GetToken(FortranParser.CONTIGUOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIMENSION() { return GetToken(FortranParser.DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Component_array_specContext component_array_spec() {
			return GetRuleContext<Component_array_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(FortranParser.POINTER, 0); }
		public Component_attr_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_attr_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterComponent_attr_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitComponent_attr_spec(this);
		}
	}

	[RuleVersion(0)]
	public Component_attr_specContext component_attr_spec() {
		Component_attr_specContext _localctx = new Component_attr_specContext(Context, State);
		EnterRule(_localctx, 166, RULE_component_attr_spec);
		try {
			State = 1980;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIVATE:
			case PUBLIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1966;
				access_spec();
				}
				break;
			case ALLOCATABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1967;
				Match(ALLOCATABLE);
				}
				break;
			case CODIMENSION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1968;
				Match(CODIMENSION);
				State = 1969;
				lbracket();
				State = 1970;
				coarray_spec();
				State = 1971;
				rbracket();
				}
				break;
			case CONTIGUOUS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1973;
				Match(CONTIGUOUS);
				}
				break;
			case DIMENSION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1974;
				Match(DIMENSION);
				State = 1975;
				Match(LPAREN);
				State = 1976;
				component_array_spec();
				State = 1977;
				Match(RPAREN);
				}
				break;
			case POINTER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1979;
				Match(POINTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Component_nameContext component_name() {
			return GetRuleContext<Component_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Component_array_specContext component_array_spec() {
			return GetRuleContext<Component_array_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LbracketContext lbracket() {
			return GetRuleContext<LbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Coarray_specContext coarray_spec() {
			return GetRuleContext<Coarray_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RbracketContext rbracket() {
			return GetRuleContext<RbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Char_lengthContext char_length() {
			return GetRuleContext<Char_lengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_initializationContext component_initialization() {
			return GetRuleContext<Component_initializationContext>(0);
		}
		public Component_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterComponent_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitComponent_decl(this);
		}
	}

	[RuleVersion(0)]
	public Component_declContext component_decl() {
		Component_declContext _localctx = new Component_declContext(Context, State);
		EnterRule(_localctx, 168, RULE_component_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1982;
			component_name();
			State = 1987;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 1983;
				Match(LPAREN);
				State = 1984;
				component_array_spec();
				State = 1985;
				Match(RPAREN);
				}
			}

			State = 1993;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACKET) {
				{
				State = 1989;
				lbracket();
				State = 1990;
				coarray_spec();
				State = 1991;
				rbracket();
				}
			}

			State = 1997;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASTERIK) {
				{
				State = 1995;
				Match(ASTERIK);
				State = 1996;
				char_length();
				}
			}

			State = 2000;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLIES || _la==ASSIGN) {
				{
				State = 1999;
				component_initialization();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_array_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_shape_spec_listContext explicit_shape_spec_list() {
			return GetRuleContext<Explicit_shape_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Deferred_shape_spec_listContext deferred_shape_spec_list() {
			return GetRuleContext<Deferred_shape_spec_listContext>(0);
		}
		public Component_array_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_array_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterComponent_array_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitComponent_array_spec(this);
		}
	}

	[RuleVersion(0)]
	public Component_array_specContext component_array_spec() {
		Component_array_specContext _localctx = new Component_array_specContext(Context, State);
		EnterRule(_localctx, 170, RULE_component_array_spec);
		try {
			State = 2004;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROGRAM:
			case END:
			case FUNCTION:
			case LPAREN:
			case SUBROUTINE:
			case MODULE:
			case SUBMODULE:
			case BLOCK:
			case DATA:
			case INTRINSIC:
			case NONINTRINSIC:
			case OPERATOR:
			case PLUS:
			case MINUS:
			case NOT:
			case READ:
			case FORMATTED:
			case UNFORMATTED:
			case WRITE:
			case ASSIGNMENT:
			case USE:
			case ONLY:
			case IMPORT:
			case NONE:
			case ALL:
			case KIND:
			case INTEGER:
			case LEN:
			case REAL:
			case DOUBLE:
			case PRECISION:
			case COMPLEX:
			case CHARACTER:
			case LOGICAL:
			case TYPE:
			case CLASS:
			case EXTERNAL:
			case IMPLICIT:
			case PARAMETER:
			case FORMAT:
			case BIND:
			case RESULT:
			case ENTRY:
			case DOT:
			case TRUE:
			case FALSE:
			case STAT:
			case TEAM:
			case TEAMNUMBER:
			case LBRACKET:
			case RE:
			case IM:
			case LPARENSLASH:
			case SEQUENCE:
			case PRIVATE:
			case PROCEDURE:
			case NOPASS:
			case PASS:
			case POINTER:
			case ALLOCATABLE:
			case CODIMENSION:
			case CONTIGUOUS:
			case DIMENSION:
			case PUBLIC:
			case CONTAINS:
			case FINAL:
			case GENERIC:
			case DEFERRED:
			case NONOVERRIDABLE:
			case INTENT:
			case OPTIONAL:
			case PROTECTED:
			case SAVE:
			case IN:
			case OUT:
			case INOUT:
			case INTERFACE:
			case ABSTRACT:
			case ENUM:
			case ENUMERATOR:
			case ASYNCHRONOUS:
			case TARGET:
			case VALUE:
			case VOLATILE:
			case EQUIVALENCE:
			case COMMON:
			case NAMELIST:
			case EVENT:
			case WAIT:
			case UNTILCOUNT:
			case POST:
			case ERRMSG:
			case ERROR:
			case STOP:
			case QUIET:
			case ENDFILE:
			case DEALLOCATE:
			case CYCLE:
			case CONTINUE:
			case CLOSE:
			case UNIT:
			case IOSTAT:
			case IOMSG:
			case ERR:
			case STATUS:
			case CALL:
			case BACKSPACE:
			case ALLOCATE:
			case MOLD:
			case SOURCE:
			case OPEN:
			case ACCESS:
			case ACTION:
			case BLANK:
			case DECIMAL:
			case DELIM:
			case ENCODING:
			case FILE:
			case FORM:
			case NEWUNIT:
			case PAD:
			case POSITION:
			case RECL:
			case ROUND:
			case SIGN:
			case NULLIFY:
			case LOCK:
			case ACQUIREDLOCK:
			case INQUIRE:
			case IOLENGTH:
			case EXIST:
			case ID:
			case NAMED:
			case NEXTREC:
			case NUMBER:
			case OPENED:
			case PENDING:
			case POS:
			case READWRITE:
			case SEQUENTIAL:
			case SIZE:
			case STREAM:
			case IF:
			case GO:
			case TO:
			case NEWINDEX:
			case FLUSH:
			case FAIL:
			case IMAGE:
			case EXIT:
			case FORALL:
			case WHERE:
			case EOR:
			case UNLOCK:
			case SYNC:
			case MEMORY:
			case IMAGES:
			case REWIND:
			case RETURN:
			case FMT:
			case NML:
			case ADVANCE:
			case REC:
			case PRINT:
			case CRITICAL:
			case CHANGE:
			case SELECT:
			case CASE:
			case DEFAULT:
			case ASSOCIATE:
			case ELSEWHERE:
			case IS:
			case RANK:
			case ELSE:
			case THEN:
			case DO:
			case CONCURRENT:
			case WHILE:
			case SHARED:
			case LOCAL:
			case LOCALINIT:
			case RECURSIVE:
			case PURE:
			case NONRECURSIVE:
			case IMPURE:
			case ELEMENTAL:
			case NOTIFY:
			case TYPEOF:
			case CLASSOF:
			case ENUMERATION:
			case DIRECT:
			case LEADINGZERO:
			case REDUCE:
			case SIMPLE:
			case DEFINEDUNARYBINARYOP:
			case BINARY_CONSTANT:
			case OCTAL_CONSTANT:
			case HEX_CONSTANT:
			case SQUOTE_REP_CHAR:
			case DQUOTE_REP_CHAR:
			case NAME:
			case DIGITSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2002;
				explicit_shape_spec_list();
				}
				break;
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2003;
				deferred_shape_spec_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_component_def_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(FortranParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_component_attr_spec_listContext proc_component_attr_spec_list() {
			return GetRuleContext<Proc_component_attr_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_decl_listContext proc_decl_list() {
			return GetRuleContext<Proc_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_interfaceContext proc_interface() {
			return GetRuleContext<Proc_interfaceContext>(0);
		}
		public Proc_component_def_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_component_def_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProc_component_def_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProc_component_def_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Proc_component_def_stmtContext proc_component_def_stmt() {
		Proc_component_def_stmtContext _localctx = new Proc_component_def_stmtContext(Context, State);
		EnterRule(_localctx, 172, RULE_proc_component_def_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2006;
			Match(PROCEDURE);
			State = 2007;
			Match(LPAREN);
			State = 2009;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5664683900280128L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1019726465L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 18084526735491071L) != 0)) {
				{
				State = 2008;
				proc_interface();
				}
			}

			State = 2011;
			Match(RPAREN);
			State = 2012;
			Match(COMMA);
			State = 2013;
			proc_component_attr_spec_list();
			State = 2014;
			Match(DOUBLECOLON);
			State = 2015;
			proc_decl_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_component_attr_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Access_specContext access_spec() {
			return GetRuleContext<Access_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOPASS() { return GetToken(FortranParser.NOPASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASS() { return GetToken(FortranParser.PASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_nameContext arg_name() {
			return GetRuleContext<Arg_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(FortranParser.POINTER, 0); }
		public Proc_component_attr_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_component_attr_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProc_component_attr_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProc_component_attr_spec(this);
		}
	}

	[RuleVersion(0)]
	public Proc_component_attr_specContext proc_component_attr_spec() {
		Proc_component_attr_specContext _localctx = new Proc_component_attr_specContext(Context, State);
		EnterRule(_localctx, 174, RULE_proc_component_attr_spec);
		int _la;
		try {
			State = 2027;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIVATE:
			case PUBLIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2017;
				access_spec();
				}
				break;
			case NOPASS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2018;
				Match(NOPASS);
				}
				break;
			case PASS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2019;
				Match(PASS);
				State = 2024;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 2020;
					Match(LPAREN);
					State = 2021;
					arg_name();
					State = 2022;
					Match(RPAREN);
					}
				}

				}
				break;
			case POINTER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2026;
				Match(POINTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_initializationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_exprContext constant_expr() {
			return GetRuleContext<Constant_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLIES() { return GetToken(FortranParser.IMPLIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Null_initContext null_init() {
			return GetRuleContext<Null_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Initial_data_targetContext initial_data_target() {
			return GetRuleContext<Initial_data_targetContext>(0);
		}
		public Component_initializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_initialization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterComponent_initialization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitComponent_initialization(this);
		}
	}

	[RuleVersion(0)]
	public Component_initializationContext component_initialization() {
		Component_initializationContext _localctx = new Component_initializationContext(Context, State);
		EnterRule(_localctx, 176, RULE_component_initialization);
		try {
			State = 2035;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2029;
				Match(ASSIGN);
				State = 2030;
				constant_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2031;
				Match(IMPLIES);
				State = 2032;
				null_init();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2033;
				Match(IMPLIES);
				State = 2034;
				initial_data_target();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initial_data_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public Initial_data_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initial_data_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInitial_data_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInitial_data_target(this);
		}
	}

	[RuleVersion(0)]
	public Initial_data_targetContext initial_data_target() {
		Initial_data_targetContext _localctx = new Initial_data_targetContext(Context, State);
		EnterRule(_localctx, 178, RULE_initial_data_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2037;
			designator(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Private_components_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(FortranParser.PRIVATE, 0); }
		public Private_components_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_private_components_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPrivate_components_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPrivate_components_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Private_components_stmtContext private_components_stmt() {
		Private_components_stmtContext _localctx = new Private_components_stmtContext(Context, State);
		EnterRule(_localctx, 180, RULE_private_components_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2039;
			Match(PRIVATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_bound_procedure_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Contains_stmtContext contains_stmt() {
			return GetRuleContext<Contains_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binding_private_stmtContext binding_private_stmt() {
			return GetRuleContext<Binding_private_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_bound_proc_bindingContext[] type_bound_proc_binding() {
			return GetRuleContexts<Type_bound_proc_bindingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_bound_proc_bindingContext type_bound_proc_binding(int i) {
			return GetRuleContext<Type_bound_proc_bindingContext>(i);
		}
		public Type_bound_procedure_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_bound_procedure_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_bound_procedure_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_bound_procedure_part(this);
		}
	}

	[RuleVersion(0)]
	public Type_bound_procedure_partContext type_bound_procedure_part() {
		Type_bound_procedure_partContext _localctx = new Type_bound_procedure_partContext(Context, State);
		EnterRule(_localctx, 182, RULE_type_bound_procedure_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2041;
			contains_stmt();
			State = 2043;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIVATE) {
				{
				State = 2042;
				binding_private_stmt();
				}
			}

			State = 2048;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & 3073L) != 0)) {
				{
				{
				State = 2045;
				type_bound_proc_binding();
				}
				}
				State = 2050;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binding_private_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(FortranParser.PRIVATE, 0); }
		public Binding_private_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding_private_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBinding_private_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBinding_private_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Binding_private_stmtContext binding_private_stmt() {
		Binding_private_stmtContext _localctx = new Binding_private_stmtContext(Context, State);
		EnterRule(_localctx, 184, RULE_binding_private_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2051;
			Match(PRIVATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_bound_proc_bindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_bound_procedure_stmtContext type_bound_procedure_stmt() {
			return GetRuleContext<Type_bound_procedure_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_bound_generic_stmtContext type_bound_generic_stmt() {
			return GetRuleContext<Type_bound_generic_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Final_procedure_stmtContext final_procedure_stmt() {
			return GetRuleContext<Final_procedure_stmtContext>(0);
		}
		public Type_bound_proc_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_bound_proc_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_bound_proc_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_bound_proc_binding(this);
		}
	}

	[RuleVersion(0)]
	public Type_bound_proc_bindingContext type_bound_proc_binding() {
		Type_bound_proc_bindingContext _localctx = new Type_bound_proc_bindingContext(Context, State);
		EnterRule(_localctx, 186, RULE_type_bound_proc_binding);
		try {
			State = 2056;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCEDURE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2053;
				type_bound_procedure_stmt();
				}
				break;
			case GENERIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2054;
				type_bound_generic_stmt();
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2055;
				final_procedure_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_bound_procedure_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(FortranParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_bound_proc_decl_listContext type_bound_proc_decl_list() {
			return GetRuleContext<Type_bound_proc_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Binding_attr_listContext binding_attr_list() {
			return GetRuleContext<Binding_attr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_nameContext interface_name() {
			return GetRuleContext<Interface_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Binding_name_listContext binding_name_list() {
			return GetRuleContext<Binding_name_listContext>(0);
		}
		public Type_bound_procedure_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_bound_procedure_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_bound_procedure_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_bound_procedure_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Type_bound_procedure_stmtContext type_bound_procedure_stmt() {
		Type_bound_procedure_stmtContext _localctx = new Type_bound_procedure_stmtContext(Context, State);
		EnterRule(_localctx, 188, RULE_type_bound_procedure_stmt);
		int _la;
		try {
			State = 2076;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2058;
				Match(PROCEDURE);
				State = 2064;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA || _la==DOUBLECOLON) {
					{
					State = 2061;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2059;
						Match(COMMA);
						State = 2060;
						binding_attr_list();
						}
					}

					State = 2063;
					Match(DOUBLECOLON);
					}
				}

				State = 2066;
				type_bound_proc_decl_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2067;
				Match(PROCEDURE);
				State = 2068;
				Match(LPAREN);
				State = 2069;
				interface_name();
				State = 2070;
				Match(RPAREN);
				State = 2071;
				Match(COMMA);
				State = 2072;
				binding_attr_list();
				State = 2073;
				Match(DOUBLECOLON);
				State = 2074;
				binding_name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_bound_proc_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Binding_nameContext binding_name() {
			return GetRuleContext<Binding_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLIES() { return GetToken(FortranParser.IMPLIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public Type_bound_proc_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_bound_proc_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_bound_proc_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_bound_proc_decl(this);
		}
	}

	[RuleVersion(0)]
	public Type_bound_proc_declContext type_bound_proc_decl() {
		Type_bound_proc_declContext _localctx = new Type_bound_proc_declContext(Context, State);
		EnterRule(_localctx, 190, RULE_type_bound_proc_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2078;
			binding_name();
			State = 2081;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLIES) {
				{
				State = 2079;
				Match(IMPLIES);
				State = 2080;
				procedure_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_bound_generic_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERIC() { return GetToken(FortranParser.GENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_specContext generic_spec() {
			return GetRuleContext<Generic_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLIES() { return GetToken(FortranParser.IMPLIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Binding_name_listContext binding_name_list() {
			return GetRuleContext<Binding_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Access_specContext access_spec() {
			return GetRuleContext<Access_specContext>(0);
		}
		public Type_bound_generic_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_bound_generic_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_bound_generic_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_bound_generic_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Type_bound_generic_stmtContext type_bound_generic_stmt() {
		Type_bound_generic_stmtContext _localctx = new Type_bound_generic_stmtContext(Context, State);
		EnterRule(_localctx, 192, RULE_type_bound_generic_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2083;
			Match(GENERIC);
			State = 2086;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2084;
				Match(COMMA);
				State = 2085;
				access_spec();
				}
			}

			State = 2088;
			Match(DOUBLECOLON);
			State = 2089;
			generic_spec();
			State = 2090;
			Match(IMPLIES);
			State = 2091;
			binding_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binding_attrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Access_specContext access_spec() {
			return GetRuleContext<Access_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(FortranParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONOVERRIDABLE() { return GetToken(FortranParser.NONOVERRIDABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOPASS() { return GetToken(FortranParser.NOPASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASS() { return GetToken(FortranParser.PASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_nameContext arg_name() {
			return GetRuleContext<Arg_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Binding_attrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding_attr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBinding_attr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBinding_attr(this);
		}
	}

	[RuleVersion(0)]
	public Binding_attrContext binding_attr() {
		Binding_attrContext _localctx = new Binding_attrContext(Context, State);
		EnterRule(_localctx, 194, RULE_binding_attr);
		int _la;
		try {
			State = 2104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIVATE:
			case PUBLIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2093;
				access_spec();
				}
				break;
			case DEFERRED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2094;
				Match(DEFERRED);
				}
				break;
			case NONOVERRIDABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2095;
				Match(NONOVERRIDABLE);
				}
				break;
			case NOPASS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2096;
				Match(NOPASS);
				}
				break;
			case PASS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2097;
				Match(PASS);
				State = 2102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 2098;
					Match(LPAREN);
					State = 2099;
					arg_name();
					State = 2100;
					Match(RPAREN);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Final_procedure_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(FortranParser.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Final_subroutine_name_listContext final_subroutine_name_list() {
			return GetRuleContext<Final_subroutine_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Final_procedure_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_final_procedure_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFinal_procedure_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFinal_procedure_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Final_procedure_stmtContext final_procedure_stmt() {
		Final_procedure_stmtContext _localctx = new Final_procedure_stmtContext(Context, State);
		EnterRule(_localctx, 196, RULE_final_procedure_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2106;
			Match(FINAL);
			State = 2108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2107;
				Match(DOUBLECOLON);
				}
			}

			State = 2110;
			final_subroutine_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Derived_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_spec_listContext type_param_spec_list() {
			return GetRuleContext<Type_param_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Derived_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derived_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDerived_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDerived_type_spec(this);
		}
	}

	[RuleVersion(0)]
	public Derived_type_specContext derived_type_spec() {
		Derived_type_specContext _localctx = new Derived_type_specContext(Context, State);
		EnterRule(_localctx, 198, RULE_derived_type_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2112;
			type_name();
			State = 2117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 2113;
				Match(LPAREN);
				State = 2114;
				type_param_spec_list();
				State = 2115;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_param_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_valueContext type_param_value() {
			return GetRuleContext<Type_param_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		public Type_param_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_param_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_param_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_param_spec(this);
		}
	}

	[RuleVersion(0)]
	public Type_param_specContext type_param_spec() {
		Type_param_specContext _localctx = new Type_param_specContext(Context, State);
		EnterRule(_localctx, 200, RULE_type_param_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 2119;
				keyword();
				State = 2120;
				Match(ASSIGN);
				}
				break;
			}
			State = 2124;
			type_param_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Structure_constructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Derived_type_specContext derived_type_spec() {
			return GetRuleContext<Derived_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Component_spec_listContext component_spec_list() {
			return GetRuleContext<Component_spec_listContext>(0);
		}
		public Structure_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structure_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterStructure_constructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitStructure_constructor(this);
		}
	}

	[RuleVersion(0)]
	public Structure_constructorContext structure_constructor() {
		Structure_constructorContext _localctx = new Structure_constructorContext(Context, State);
		EnterRule(_localctx, 202, RULE_structure_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2126;
			derived_type_spec();
			State = 2127;
			Match(LPAREN);
			State = 2129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5663584287988032L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -881199745L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98938213795627007L) != 0)) {
				{
				State = 2128;
				component_spec_list();
				}
			}

			State = 2131;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Component_data_sourceContext component_data_source() {
			return GetRuleContext<Component_data_sourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		public Component_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterComponent_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitComponent_spec(this);
		}
	}

	[RuleVersion(0)]
	public Component_specContext component_spec() {
		Component_specContext _localctx = new Component_specContext(Context, State);
		EnterRule(_localctx, 204, RULE_component_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 2133;
				keyword();
				State = 2134;
				Match(ASSIGN);
				}
				break;
			}
			State = 2138;
			component_data_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_data_sourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_targetContext data_target() {
			return GetRuleContext<Data_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_targetContext proc_target() {
			return GetRuleContext<Proc_targetContext>(0);
		}
		public Component_data_sourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_data_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterComponent_data_source(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitComponent_data_source(this);
		}
	}

	[RuleVersion(0)]
	public Component_data_sourceContext component_data_source() {
		Component_data_sourceContext _localctx = new Component_data_sourceContext(Context, State);
		EnterRule(_localctx, 206, RULE_component_data_source);
		try {
			State = 2143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2140;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2141;
				data_target();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2142;
				proc_target();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_def_stmtContext enum_def_stmt() {
			return GetRuleContext<Enum_def_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumerator_def_stmtContext[] enumerator_def_stmt() {
			return GetRuleContexts<Enumerator_def_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumerator_def_stmtContext enumerator_def_stmt(int i) {
			return GetRuleContext<Enumerator_def_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_enum_stmtContext end_enum_stmt() {
			return GetRuleContext<End_enum_stmtContext>(0);
		}
		public Enum_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnum_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnum_def(this);
		}
	}

	[RuleVersion(0)]
	public Enum_defContext enum_def() {
		Enum_defContext _localctx = new Enum_defContext(Context, State);
		EnterRule(_localctx, 208, RULE_enum_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2145;
			enum_def_stmt();
			State = 2146;
			enumerator_def_stmt();
			State = 2150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ENUMERATOR) {
				{
				{
				State = 2147;
				enumerator_def_stmt();
				}
				}
				State = 2152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2153;
			end_enum_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_def_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(FortranParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIND() { return GetToken(FortranParser.BIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode C() { return GetToken(FortranParser.C, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_type_nameContext enum_type_name() {
			return GetRuleContext<Enum_type_nameContext>(0);
		}
		public Enum_def_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_def_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnum_def_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnum_def_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Enum_def_stmtContext enum_def_stmt() {
		Enum_def_stmtContext _localctx = new Enum_def_stmtContext(Context, State);
		EnterRule(_localctx, 210, RULE_enum_def_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2155;
			Match(ENUM);
			State = 2156;
			Match(COMMA);
			State = 2157;
			Match(BIND);
			State = 2158;
			Match(LPAREN);
			State = 2159;
			Match(C);
			State = 2160;
			Match(RPAREN);
			State = 2163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2161;
				Match(DOUBLECOLON);
				State = 2162;
				enum_type_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumerator_def_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUMERATOR() { return GetToken(FortranParser.ENUMERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enumerator_listContext enumerator_list() {
			return GetRuleContext<Enumerator_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Enumerator_def_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator_def_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnumerator_def_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnumerator_def_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Enumerator_def_stmtContext enumerator_def_stmt() {
		Enumerator_def_stmtContext _localctx = new Enumerator_def_stmtContext(Context, State);
		EnterRule(_localctx, 212, RULE_enumerator_def_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2165;
			Match(ENUMERATOR);
			State = 2167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2166;
				Match(DOUBLECOLON);
				}
			}

			State = 2169;
			enumerator_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_constantContext named_constant() {
			return GetRuleContext<Named_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_constant_exprContext scalar_int_constant_expr() {
			return GetRuleContext<Scalar_int_constant_exprContext>(0);
		}
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnumerator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnumerator(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 214, RULE_enumerator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2171;
			named_constant();
			State = 2174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 2172;
				Match(ASSIGN);
				State = 2173;
				scalar_int_constant_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_enum_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(FortranParser.ENUM, 0); }
		public End_enum_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_enum_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_enum_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_enum_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_enum_stmtContext end_enum_stmt() {
		End_enum_stmtContext _localctx = new End_enum_stmtContext(Context, State);
		EnterRule(_localctx, 216, RULE_end_enum_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2176;
			Match(END);
			State = 2177;
			Match(ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_type_nameContext enum_type_name() {
			return GetRuleContext<Enum_type_nameContext>(0);
		}
		public Enum_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnum_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnum_type_spec(this);
		}
	}

	[RuleVersion(0)]
	public Enum_type_specContext enum_type_spec() {
		Enum_type_specContext _localctx = new Enum_type_specContext(Context, State);
		EnterRule(_localctx, 218, RULE_enum_type_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2179;
			enum_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_constructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_type_specContext enum_type_spec() {
			return GetRuleContext<Enum_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_exprContext scalar_expr() {
			return GetRuleContext<Scalar_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Enum_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnum_constructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnum_constructor(this);
		}
	}

	[RuleVersion(0)]
	public Enum_constructorContext enum_constructor() {
		Enum_constructorContext _localctx = new Enum_constructorContext(Context, State);
		EnterRule(_localctx, 220, RULE_enum_constructor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2181;
			enum_type_spec();
			State = 2182;
			Match(LPAREN);
			State = 2183;
			scalar_expr();
			State = 2184;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumeration_type_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_type_stmtContext enumeration_type_stmt() {
			return GetRuleContext<Enumeration_type_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_enumerator_stmtContext[] enumeration_enumerator_stmt() {
			return GetRuleContexts<Enumeration_enumerator_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_enumerator_stmtContext enumeration_enumerator_stmt(int i) {
			return GetRuleContext<Enumeration_enumerator_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_enumeration_type_stmtContext end_enumeration_type_stmt() {
			return GetRuleContext<End_enumeration_type_stmtContext>(0);
		}
		public Enumeration_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration_type_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnumeration_type_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnumeration_type_def(this);
		}
	}

	[RuleVersion(0)]
	public Enumeration_type_defContext enumeration_type_def() {
		Enumeration_type_defContext _localctx = new Enumeration_type_defContext(Context, State);
		EnterRule(_localctx, 222, RULE_enumeration_type_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2186;
			enumeration_type_stmt();
			State = 2187;
			enumeration_enumerator_stmt();
			State = 2191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ENUMERATOR) {
				{
				{
				State = 2188;
				enumeration_enumerator_stmt();
				}
				}
				State = 2193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2194;
			end_enumeration_type_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumeration_type_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUMERATION() { return GetToken(FortranParser.ENUMERATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(FortranParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_type_nameContext enumeration_type_name() {
			return GetRuleContext<Enumeration_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Access_specContext access_spec() {
			return GetRuleContext<Access_specContext>(0);
		}
		public Enumeration_type_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration_type_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnumeration_type_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnumeration_type_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Enumeration_type_stmtContext enumeration_type_stmt() {
		Enumeration_type_stmtContext _localctx = new Enumeration_type_stmtContext(Context, State);
		EnterRule(_localctx, 224, RULE_enumeration_type_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2196;
			Match(ENUMERATION);
			State = 2197;
			Match(TYPE);
			State = 2203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA || _la==DOUBLECOLON) {
				{
				State = 2200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2198;
					Match(COMMA);
					State = 2199;
					access_spec();
					}
				}

				State = 2202;
				Match(DOUBLECOLON);
				}
			}

			State = 2205;
			enumeration_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumeration_enumerator_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUMERATOR() { return GetToken(FortranParser.ENUMERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enumerator_name_listContext enumerator_name_list() {
			return GetRuleContext<Enumerator_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Enumeration_enumerator_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration_enumerator_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnumeration_enumerator_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnumeration_enumerator_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Enumeration_enumerator_stmtContext enumeration_enumerator_stmt() {
		Enumeration_enumerator_stmtContext _localctx = new Enumeration_enumerator_stmtContext(Context, State);
		EnterRule(_localctx, 226, RULE_enumeration_enumerator_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2207;
			Match(ENUMERATOR);
			State = 2209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2208;
				Match(DOUBLECOLON);
				}
			}

			State = 2211;
			enumerator_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_enumeration_type_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUMERATION() { return GetToken(FortranParser.ENUMERATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(FortranParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_type_nameContext enumeration_type_name() {
			return GetRuleContext<Enumeration_type_nameContext>(0);
		}
		public End_enumeration_type_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_enumeration_type_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_enumeration_type_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_enumeration_type_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_enumeration_type_stmtContext end_enumeration_type_stmt() {
		End_enumeration_type_stmtContext _localctx = new End_enumeration_type_stmtContext(Context, State);
		EnterRule(_localctx, 228, RULE_end_enumeration_type_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2213;
			Match(END);
			State = 2214;
			Match(ENUMERATION);
			State = 2215;
			Match(TYPE);
			State = 2217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				{
				State = 2216;
				enumeration_type_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumeration_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_type_nameContext enumeration_type_name() {
			return GetRuleContext<Enumeration_type_nameContext>(0);
		}
		public Enumeration_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnumeration_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnumeration_type_spec(this);
		}
	}

	[RuleVersion(0)]
	public Enumeration_type_specContext enumeration_type_spec() {
		Enumeration_type_specContext _localctx = new Enumeration_type_specContext(Context, State);
		EnterRule(_localctx, 230, RULE_enumeration_type_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2219;
			enumeration_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumeration_constructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_type_specContext enumeration_type_spec() {
			return GetRuleContext<Enumeration_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Enumeration_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnumeration_constructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnumeration_constructor(this);
		}
	}

	[RuleVersion(0)]
	public Enumeration_constructorContext enumeration_constructor() {
		Enumeration_constructorContext _localctx = new Enumeration_constructorContext(Context, State);
		EnterRule(_localctx, 232, RULE_enumeration_constructor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2221;
			enumeration_type_spec();
			State = 2222;
			Match(LPAREN);
			State = 2223;
			scalar_int_expr();
			State = 2224;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boz_literal_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_CONSTANT() { return GetToken(FortranParser.BINARY_CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_CONSTANT() { return GetToken(FortranParser.OCTAL_CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_CONSTANT() { return GetToken(FortranParser.HEX_CONSTANT, 0); }
		public Boz_literal_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boz_literal_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBoz_literal_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBoz_literal_constant(this);
		}
	}

	[RuleVersion(0)]
	public Boz_literal_constantContext boz_literal_constant() {
		Boz_literal_constantContext _localctx = new Boz_literal_constantContext(Context, State);
		EnterRule(_localctx, 234, RULE_boz_literal_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2226;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_constructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPARENSLASH() { return GetToken(FortranParser.LPARENSLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ac_specContext ac_spec() {
			return GetRuleContext<Ac_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPARENSLASH() { return GetToken(FortranParser.RPARENSLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LbracketContext lbracket() {
			return GetRuleContext<LbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RbracketContext rbracket() {
			return GetRuleContext<RbracketContext>(0);
		}
		public Array_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterArray_constructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitArray_constructor(this);
		}
	}

	[RuleVersion(0)]
	public Array_constructorContext array_constructor() {
		Array_constructorContext _localctx = new Array_constructorContext(Context, State);
		EnterRule(_localctx, 236, RULE_array_constructor);
		try {
			State = 2236;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPARENSLASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2228;
				Match(LPARENSLASH);
				State = 2229;
				ac_spec();
				State = 2230;
				Match(RPARENSLASH);
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2232;
				lbracket();
				State = 2233;
				ac_spec();
				State = 2234;
				rbracket();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ac_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ac_value_listContext ac_value_list() {
			return GetRuleContext<Ac_value_listContext>(0);
		}
		public Ac_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ac_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAc_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAc_spec(this);
		}
	}

	[RuleVersion(0)]
	public Ac_specContext ac_spec() {
		Ac_specContext _localctx = new Ac_specContext(Context, State);
		EnterRule(_localctx, 238, RULE_ac_spec);
		try {
			State = 2247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2238;
				type_spec();
				State = 2239;
				Match(DOUBLECOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2244;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
				case 1:
					{
					State = 2241;
					type_spec();
					State = 2242;
					Match(DOUBLECOLON);
					}
					break;
				}
				State = 2246;
				ac_value_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LbracketContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(FortranParser.LBRACKET, 0); }
		public LbracketContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lbracket; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLbracket(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLbracket(this);
		}
	}

	[RuleVersion(0)]
	public LbracketContext lbracket() {
		LbracketContext _localctx = new LbracketContext(Context, State);
		EnterRule(_localctx, 240, RULE_lbracket);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2249;
			Match(LBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RbracketContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(FortranParser.RBRACKET, 0); }
		public RbracketContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rbracket; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterRbracket(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitRbracket(this);
		}
	}

	[RuleVersion(0)]
	public RbracketContext rbracket() {
		RbracketContext _localctx = new RbracketContext(Context, State);
		EnterRule(_localctx, 242, RULE_rbracket);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2251;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ac_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ac_implied_doContext ac_implied_do() {
			return GetRuleContext<Ac_implied_doContext>(0);
		}
		public Ac_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ac_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAc_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAc_value(this);
		}
	}

	[RuleVersion(0)]
	public Ac_valueContext ac_value() {
		Ac_valueContext _localctx = new Ac_valueContext(Context, State);
		EnterRule(_localctx, 244, RULE_ac_value);
		try {
			State = 2255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2253;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2254;
				ac_implied_do();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ac_implied_doContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ac_value_listContext ac_value_list() {
			return GetRuleContext<Ac_value_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ac_implied_do_controlContext ac_implied_do_control() {
			return GetRuleContext<Ac_implied_do_controlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Ac_implied_doContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ac_implied_do; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAc_implied_do(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAc_implied_do(this);
		}
	}

	[RuleVersion(0)]
	public Ac_implied_doContext ac_implied_do() {
		Ac_implied_doContext _localctx = new Ac_implied_doContext(Context, State);
		EnterRule(_localctx, 246, RULE_ac_implied_do);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2257;
			Match(LPAREN);
			State = 2258;
			ac_value_list();
			State = 2259;
			Match(COMMA);
			State = 2260;
			ac_implied_do_control();
			State = 2261;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ac_implied_do_controlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ac_do_variableContext ac_do_variable() {
			return GetRuleContext<Ac_do_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext[] scalar_int_expr() {
			return GetRuleContexts<Scalar_int_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr(int i) {
			return GetRuleContext<Scalar_int_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Integer_type_specContext integer_type_spec() {
			return GetRuleContext<Integer_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Ac_implied_do_controlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ac_implied_do_control; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAc_implied_do_control(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAc_implied_do_control(this);
		}
	}

	[RuleVersion(0)]
	public Ac_implied_do_controlContext ac_implied_do_control() {
		Ac_implied_do_controlContext _localctx = new Ac_implied_do_controlContext(Context, State);
		EnterRule(_localctx, 248, RULE_ac_implied_do_control);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				{
				State = 2263;
				integer_type_spec();
				State = 2264;
				Match(DOUBLECOLON);
				}
				break;
			}
			State = 2268;
			ac_do_variable();
			State = 2269;
			Match(ASSIGN);
			State = 2270;
			scalar_int_expr();
			State = 2271;
			Match(COMMA);
			State = 2272;
			scalar_int_expr();
			State = 2275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2273;
				Match(COMMA);
				State = 2274;
				scalar_int_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ac_do_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Do_variableContext do_variable() {
			return GetRuleContext<Do_variableContext>(0);
		}
		public Ac_do_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ac_do_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAc_do_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAc_do_variable(this);
		}
	}

	[RuleVersion(0)]
	public Ac_do_variableContext ac_do_variable() {
		Ac_do_variableContext _localctx = new Ac_do_variableContext(Context, State);
		EnterRule(_localctx, 250, RULE_ac_do_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2277;
			do_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declaration_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_type_specContext declaration_type_spec() {
			return GetRuleContext<Declaration_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_decl_listContext entity_decl_list() {
			return GetRuleContext<Entity_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attr_specContext[] attr_spec() {
			return GetRuleContexts<Attr_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attr_specContext attr_spec(int i) {
			return GetRuleContext<Attr_specContext>(i);
		}
		public Type_declaration_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_declaration_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_declaration_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Type_declaration_stmtContext type_declaration_stmt() {
		Type_declaration_stmtContext _localctx = new Type_declaration_stmtContext(Context, State);
		EnterRule(_localctx, 252, RULE_type_declaration_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2279;
			declaration_type_spec();
			State = 2288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA || _la==DOUBLECOLON) {
				{
				State = 2284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2280;
					Match(COMMA);
					State = 2281;
					attr_spec();
					}
					}
					State = 2286;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2287;
				Match(DOUBLECOLON);
				}
			}

			State = 2290;
			entity_decl_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attr_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Access_specContext access_spec() {
			return GetRuleContext<Access_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOCATABLE() { return GetToken(FortranParser.ALLOCATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNCHRONOUS() { return GetToken(FortranParser.ASYNCHRONOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODIMENSION() { return GetToken(FortranParser.CODIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LbracketContext lbracket() {
			return GetRuleContext<LbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Coarray_specContext coarray_spec() {
			return GetRuleContext<Coarray_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RbracketContext rbracket() {
			return GetRuleContext<RbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTIGUOUS() { return GetToken(FortranParser.CONTIGUOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIMENSION() { return GetToken(FortranParser.DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_specContext array_spec() {
			return GetRuleContext<Array_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(FortranParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTENT() { return GetToken(FortranParser.INTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Intent_specContext intent_spec() {
			return GetRuleContext<Intent_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRINSIC() { return GetToken(FortranParser.INTRINSIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Language_binding_specContext language_binding_spec() {
			return GetRuleContext<Language_binding_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(FortranParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETER() { return GetToken(FortranParser.PARAMETER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(FortranParser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(FortranParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rank_clauseContext rank_clause() {
			return GetRuleContext<Rank_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVE() { return GetToken(FortranParser.SAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET() { return GetToken(FortranParser.TARGET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(FortranParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(FortranParser.VOLATILE, 0); }
		public Attr_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAttr_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAttr_spec(this);
		}
	}

	[RuleVersion(0)]
	public Attr_specContext attr_spec() {
		Attr_specContext _localctx = new Attr_specContext(Context, State);
		EnterRule(_localctx, 254, RULE_attr_spec);
		try {
			State = 2323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIVATE:
			case PUBLIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2292;
				access_spec();
				}
				break;
			case ALLOCATABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2293;
				Match(ALLOCATABLE);
				}
				break;
			case ASYNCHRONOUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2294;
				Match(ASYNCHRONOUS);
				}
				break;
			case CODIMENSION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2295;
				Match(CODIMENSION);
				State = 2296;
				lbracket();
				State = 2297;
				coarray_spec();
				State = 2298;
				rbracket();
				}
				break;
			case CONTIGUOUS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2300;
				Match(CONTIGUOUS);
				}
				break;
			case DIMENSION:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2301;
				Match(DIMENSION);
				State = 2302;
				Match(LPAREN);
				State = 2303;
				array_spec();
				State = 2304;
				Match(RPAREN);
				}
				break;
			case EXTERNAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2306;
				Match(EXTERNAL);
				}
				break;
			case INTENT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2307;
				Match(INTENT);
				State = 2308;
				Match(LPAREN);
				State = 2309;
				intent_spec();
				State = 2310;
				Match(RPAREN);
				}
				break;
			case INTRINSIC:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2312;
				Match(INTRINSIC);
				}
				break;
			case BIND:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2313;
				language_binding_spec();
				}
				break;
			case OPTIONAL:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2314;
				Match(OPTIONAL);
				}
				break;
			case PARAMETER:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2315;
				Match(PARAMETER);
				}
				break;
			case POINTER:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2316;
				Match(POINTER);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2317;
				Match(PROTECTED);
				}
				break;
			case RANK:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2318;
				rank_clause();
				}
				break;
			case SAVE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2319;
				Match(SAVE);
				}
				break;
			case TARGET:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2320;
				Match(TARGET);
				}
				break;
			case VALUE:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2321;
				Match(VALUE);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2322;
				Match(VOLATILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_nameContext object_name() {
			return GetRuleContext<Object_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_specContext array_spec() {
			return GetRuleContext<Array_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LbracketContext lbracket() {
			return GetRuleContext<LbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Coarray_specContext coarray_spec() {
			return GetRuleContext<Coarray_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RbracketContext rbracket() {
			return GetRuleContext<RbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Char_lengthContext char_length() {
			return GetRuleContext<Char_lengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializationContext initialization() {
			return GetRuleContext<InitializationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Entity_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEntity_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEntity_decl(this);
		}
	}

	[RuleVersion(0)]
	public Entity_declContext entity_decl() {
		Entity_declContext _localctx = new Entity_declContext(Context, State);
		EnterRule(_localctx, 256, RULE_entity_decl);
		int _la;
		try {
			State = 2350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2325;
				object_name();
				State = 2330;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
				case 1:
					{
					State = 2326;
					Match(LPAREN);
					State = 2327;
					array_spec();
					State = 2328;
					Match(RPAREN);
					}
					break;
				}
				State = 2336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACKET) {
					{
					State = 2332;
					lbracket();
					State = 2333;
					coarray_spec();
					State = 2334;
					rbracket();
					}
				}

				State = 2340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASTERIK) {
					{
					State = 2338;
					Match(ASTERIK);
					State = 2339;
					char_length();
					}
				}

				State = 2343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IMPLIES || _la==ASSIGN) {
					{
					State = 2342;
					initialization();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2345;
				function_name();
				State = 2348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASTERIK) {
					{
					State = 2346;
					Match(ASTERIK);
					State = 2347;
					char_length();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Object_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterObject_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitObject_name(this);
		}
	}

	[RuleVersion(0)]
	public Object_nameContext object_name() {
		Object_nameContext _localctx = new Object_nameContext(Context, State);
		EnterRule(_localctx, 258, RULE_object_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2352;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_exprContext constant_expr() {
			return GetRuleContext<Constant_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLIES() { return GetToken(FortranParser.IMPLIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Null_initContext null_init() {
			return GetRuleContext<Null_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Initial_data_targetContext initial_data_target() {
			return GetRuleContext<Initial_data_targetContext>(0);
		}
		public InitializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInitialization(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInitialization(this);
		}
	}

	[RuleVersion(0)]
	public InitializationContext initialization() {
		InitializationContext _localctx = new InitializationContext(Context, State);
		EnterRule(_localctx, 260, RULE_initialization);
		try {
			State = 2360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2354;
				Match(ASSIGN);
				State = 2355;
				constant_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2356;
				Match(IMPLIES);
				State = 2357;
				null_init();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2358;
				Match(IMPLIES);
				State = 2359;
				initial_data_target();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_referenceContext function_reference() {
			return GetRuleContext<Function_referenceContext>(0);
		}
		public Null_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterNull_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitNull_init(this);
		}
	}

	[RuleVersion(0)]
	public Null_initContext null_init() {
		Null_initContext _localctx = new Null_initContext(Context, State);
		EnterRule(_localctx, 262, RULE_null_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2362;
			function_reference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(FortranParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(FortranParser.PRIVATE, 0); }
		public Access_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAccess_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAccess_spec(this);
		}
	}

	[RuleVersion(0)]
	public Access_specContext access_spec() {
		Access_specContext _localctx = new Access_specContext(Context, State);
		EnterRule(_localctx, 264, RULE_access_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2364;
			_la = TokenStream.LA(1);
			if ( !(_la==PRIVATE || _la==PUBLIC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Language_binding_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIND() { return GetToken(FortranParser.BIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode C() { return GetToken(FortranParser.C, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAAM() { return GetToken(FortranParser.NAAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_default_char_constant_exprContext scalar_default_char_constant_expr() {
			return GetRuleContext<Scalar_default_char_constant_exprContext>(0);
		}
		public Language_binding_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_language_binding_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLanguage_binding_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLanguage_binding_spec(this);
		}
	}

	[RuleVersion(0)]
	public Language_binding_specContext language_binding_spec() {
		Language_binding_specContext _localctx = new Language_binding_specContext(Context, State);
		EnterRule(_localctx, 266, RULE_language_binding_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2366;
			Match(BIND);
			State = 2367;
			Match(LPAREN);
			State = 2368;
			Match(C);
			State = 2373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2369;
				Match(COMMA);
				State = 2370;
				Match(NAAM);
				State = 2371;
				Match(ASSIGN);
				State = 2372;
				scalar_default_char_constant_expr();
				}
			}

			State = 2375;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Coarray_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Deferred_coshape_spec_listContext deferred_coshape_spec_list() {
			return GetRuleContext<Deferred_coshape_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_coshape_specContext explicit_coshape_spec() {
			return GetRuleContext<Explicit_coshape_specContext>(0);
		}
		public Coarray_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coarray_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCoarray_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCoarray_spec(this);
		}
	}

	[RuleVersion(0)]
	public Coarray_specContext coarray_spec() {
		Coarray_specContext _localctx = new Coarray_specContext(Context, State);
		EnterRule(_localctx, 268, RULE_coarray_spec);
		try {
			State = 2379;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2377;
				deferred_coshape_spec_list();
				}
				break;
			case PROGRAM:
			case END:
			case FUNCTION:
			case LPAREN:
			case ASTERIK:
			case SUBROUTINE:
			case MODULE:
			case SUBMODULE:
			case BLOCK:
			case DATA:
			case INTRINSIC:
			case NONINTRINSIC:
			case OPERATOR:
			case PLUS:
			case MINUS:
			case NOT:
			case READ:
			case FORMATTED:
			case UNFORMATTED:
			case WRITE:
			case ASSIGNMENT:
			case USE:
			case ONLY:
			case IMPORT:
			case NONE:
			case ALL:
			case KIND:
			case INTEGER:
			case LEN:
			case REAL:
			case DOUBLE:
			case PRECISION:
			case COMPLEX:
			case CHARACTER:
			case LOGICAL:
			case TYPE:
			case CLASS:
			case EXTERNAL:
			case IMPLICIT:
			case PARAMETER:
			case FORMAT:
			case BIND:
			case RESULT:
			case ENTRY:
			case DOT:
			case TRUE:
			case FALSE:
			case STAT:
			case TEAM:
			case TEAMNUMBER:
			case LBRACKET:
			case RE:
			case IM:
			case LPARENSLASH:
			case SEQUENCE:
			case PRIVATE:
			case PROCEDURE:
			case NOPASS:
			case PASS:
			case POINTER:
			case ALLOCATABLE:
			case CODIMENSION:
			case CONTIGUOUS:
			case DIMENSION:
			case PUBLIC:
			case CONTAINS:
			case FINAL:
			case GENERIC:
			case DEFERRED:
			case NONOVERRIDABLE:
			case INTENT:
			case OPTIONAL:
			case PROTECTED:
			case SAVE:
			case IN:
			case OUT:
			case INOUT:
			case INTERFACE:
			case ABSTRACT:
			case ENUM:
			case ENUMERATOR:
			case ASYNCHRONOUS:
			case TARGET:
			case VALUE:
			case VOLATILE:
			case EQUIVALENCE:
			case COMMON:
			case NAMELIST:
			case EVENT:
			case WAIT:
			case UNTILCOUNT:
			case POST:
			case ERRMSG:
			case ERROR:
			case STOP:
			case QUIET:
			case ENDFILE:
			case DEALLOCATE:
			case CYCLE:
			case CONTINUE:
			case CLOSE:
			case UNIT:
			case IOSTAT:
			case IOMSG:
			case ERR:
			case STATUS:
			case CALL:
			case BACKSPACE:
			case ALLOCATE:
			case MOLD:
			case SOURCE:
			case OPEN:
			case ACCESS:
			case ACTION:
			case BLANK:
			case DECIMAL:
			case DELIM:
			case ENCODING:
			case FILE:
			case FORM:
			case NEWUNIT:
			case PAD:
			case POSITION:
			case RECL:
			case ROUND:
			case SIGN:
			case NULLIFY:
			case LOCK:
			case ACQUIREDLOCK:
			case INQUIRE:
			case IOLENGTH:
			case EXIST:
			case ID:
			case NAMED:
			case NEXTREC:
			case NUMBER:
			case OPENED:
			case PENDING:
			case POS:
			case READWRITE:
			case SEQUENTIAL:
			case SIZE:
			case STREAM:
			case IF:
			case GO:
			case TO:
			case NEWINDEX:
			case FLUSH:
			case FAIL:
			case IMAGE:
			case EXIT:
			case FORALL:
			case WHERE:
			case EOR:
			case UNLOCK:
			case SYNC:
			case MEMORY:
			case IMAGES:
			case REWIND:
			case RETURN:
			case FMT:
			case NML:
			case ADVANCE:
			case REC:
			case PRINT:
			case CRITICAL:
			case CHANGE:
			case SELECT:
			case CASE:
			case DEFAULT:
			case ASSOCIATE:
			case ELSEWHERE:
			case IS:
			case RANK:
			case ELSE:
			case THEN:
			case DO:
			case CONCURRENT:
			case WHILE:
			case SHARED:
			case LOCAL:
			case LOCALINIT:
			case RECURSIVE:
			case PURE:
			case NONRECURSIVE:
			case IMPURE:
			case ELEMENTAL:
			case NOTIFY:
			case TYPEOF:
			case CLASSOF:
			case ENUMERATION:
			case DIRECT:
			case LEADINGZERO:
			case REDUCE:
			case SIMPLE:
			case DEFINEDUNARYBINARYOP:
			case BINARY_CONSTANT:
			case OCTAL_CONSTANT:
			case HEX_CONSTANT:
			case SQUOTE_REP_CHAR:
			case DQUOTE_REP_CHAR:
			case NAME:
			case DIGITSTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2378;
				explicit_coshape_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Deferred_coshape_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public Deferred_coshape_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deferred_coshape_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDeferred_coshape_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDeferred_coshape_spec(this);
		}
	}

	[RuleVersion(0)]
	public Deferred_coshape_specContext deferred_coshape_spec() {
		Deferred_coshape_specContext _localctx = new Deferred_coshape_specContext(Context, State);
		EnterRule(_localctx, 270, RULE_deferred_coshape_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2381;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_coshape_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Upper_coboundContext[] upper_cobound() {
			return GetRuleContexts<Upper_coboundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Upper_coboundContext upper_cobound(int i) {
			return GetRuleContext<Upper_coboundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lower_coboundContext[] lower_cobound() {
			return GetRuleContexts<Lower_coboundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lower_coboundContext lower_cobound(int i) {
			return GetRuleContext<Lower_coboundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(FortranParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(FortranParser.COLON, i);
		}
		public Explicit_coshape_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_coshape_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExplicit_coshape_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExplicit_coshape_spec(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_coshape_specContext explicit_coshape_spec() {
		Explicit_coshape_specContext _localctx = new Explicit_coshape_specContext(Context, State);
		EnterRule(_localctx, 272, RULE_explicit_coshape_spec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2393;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2386;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
					case 1:
						{
						State = 2383;
						lower_cobound();
						State = 2384;
						Match(COLON);
						}
						break;
					}
					State = 2388;
					upper_cobound();
					State = 2389;
					Match(COMMA);
					}
					} 
				}
				State = 2395;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
			}
			State = 2399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5663584287988032L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -881199745L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98938213795627007L) != 0)) {
				{
				State = 2396;
				lower_cobound();
				State = 2397;
				Match(COLON);
				}
			}

			State = 2401;
			Match(ASTERIK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lower_coboundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Specification_exprContext specification_expr() {
			return GetRuleContext<Specification_exprContext>(0);
		}
		public Lower_coboundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lower_cobound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLower_cobound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLower_cobound(this);
		}
	}

	[RuleVersion(0)]
	public Lower_coboundContext lower_cobound() {
		Lower_coboundContext _localctx = new Lower_coboundContext(Context, State);
		EnterRule(_localctx, 274, RULE_lower_cobound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2403;
			specification_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Upper_coboundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Specification_exprContext specification_expr() {
			return GetRuleContext<Specification_exprContext>(0);
		}
		public Upper_coboundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upper_cobound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterUpper_cobound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitUpper_cobound(this);
		}
	}

	[RuleVersion(0)]
	public Upper_coboundContext upper_cobound() {
		Upper_coboundContext _localctx = new Upper_coboundContext(Context, State);
		EnterRule(_localctx, 276, RULE_upper_cobound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2405;
			specification_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_shape_spec_listContext explicit_shape_spec_list() {
			return GetRuleContext<Explicit_shape_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_shape_bounds_specContext explicit_shape_bounds_spec() {
			return GetRuleContext<Explicit_shape_bounds_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assumed_shape_spec_listContext assumed_shape_spec_list() {
			return GetRuleContext<Assumed_shape_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assumed_shape_bounds_specContext assumed_shape_bounds_spec() {
			return GetRuleContext<Assumed_shape_bounds_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Deferred_shape_spec_listContext deferred_shape_spec_list() {
			return GetRuleContext<Deferred_shape_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assumed_size_specContext assumed_size_spec() {
			return GetRuleContext<Assumed_size_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implied_shape_specContext implied_shape_spec() {
			return GetRuleContext<Implied_shape_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implied_shape_or_assumed_size_specContext implied_shape_or_assumed_size_spec() {
			return GetRuleContext<Implied_shape_or_assumed_size_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assumed_rank_specContext assumed_rank_spec() {
			return GetRuleContext<Assumed_rank_specContext>(0);
		}
		public Array_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterArray_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitArray_spec(this);
		}
	}

	[RuleVersion(0)]
	public Array_specContext array_spec() {
		Array_specContext _localctx = new Array_specContext(Context, State);
		EnterRule(_localctx, 278, RULE_array_spec);
		try {
			State = 2416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2407;
				explicit_shape_spec_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2408;
				explicit_shape_bounds_spec();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2409;
				assumed_shape_spec_list();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2410;
				assumed_shape_bounds_spec();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2411;
				deferred_shape_spec_list();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2412;
				assumed_size_spec();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2413;
				implied_shape_spec();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2414;
				implied_shape_or_assumed_size_spec();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2415;
				assumed_rank_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_shape_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Upper_boundContext upper_bound() {
			return GetRuleContext<Upper_boundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lower_boundContext lower_bound() {
			return GetRuleContext<Lower_boundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public Explicit_shape_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_shape_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExplicit_shape_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExplicit_shape_spec(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_shape_specContext explicit_shape_spec() {
		Explicit_shape_specContext _localctx = new Explicit_shape_specContext(Context, State);
		EnterRule(_localctx, 280, RULE_explicit_shape_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				{
				State = 2418;
				lower_bound();
				State = 2419;
				Match(COLON);
				}
				break;
			}
			State = 2423;
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lower_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Specification_exprContext specification_expr() {
			return GetRuleContext<Specification_exprContext>(0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lower_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLower_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLower_bound(this);
		}
	}

	[RuleVersion(0)]
	public Lower_boundContext lower_bound() {
		Lower_boundContext _localctx = new Lower_boundContext(Context, State);
		EnterRule(_localctx, 282, RULE_lower_bound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2425;
			specification_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Upper_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Specification_exprContext specification_expr() {
			return GetRuleContext<Specification_exprContext>(0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upper_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterUpper_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitUpper_bound(this);
		}
	}

	[RuleVersion(0)]
	public Upper_boundContext upper_bound() {
		Upper_boundContext _localctx = new Upper_boundContext(Context, State);
		EnterRule(_localctx, 284, RULE_upper_bound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2427;
			specification_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_shape_bounds_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_bounds_exprContext[] explicit_bounds_expr() {
			return GetRuleContexts<Explicit_bounds_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_bounds_exprContext explicit_bounds_expr(int i) {
			return GetRuleContext<Explicit_bounds_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lower_boundContext lower_bound() {
			return GetRuleContext<Lower_boundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Upper_boundContext upper_bound() {
			return GetRuleContext<Upper_boundContext>(0);
		}
		public Explicit_shape_bounds_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_shape_bounds_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExplicit_shape_bounds_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExplicit_shape_bounds_spec(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_shape_bounds_specContext explicit_shape_bounds_spec() {
		Explicit_shape_bounds_specContext _localctx = new Explicit_shape_bounds_specContext(Context, State);
		EnterRule(_localctx, 286, RULE_explicit_shape_bounds_spec);
		try {
			State = 2443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2432;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
				case 1:
					{
					State = 2429;
					explicit_bounds_expr();
					State = 2430;
					Match(COLON);
					}
					break;
				}
				State = 2434;
				explicit_bounds_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2435;
				lower_bound();
				State = 2436;
				Match(COLON);
				State = 2437;
				explicit_bounds_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2439;
				explicit_bounds_expr();
				State = 2440;
				Match(COLON);
				State = 2441;
				upper_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_bounds_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_exprContext int_expr() {
			return GetRuleContext<Int_exprContext>(0);
		}
		public Explicit_bounds_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_bounds_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExplicit_bounds_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExplicit_bounds_expr(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_bounds_exprContext explicit_bounds_expr() {
		Explicit_bounds_exprContext _localctx = new Explicit_bounds_exprContext(Context, State);
		EnterRule(_localctx, 288, RULE_explicit_bounds_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2445;
			int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assumed_shape_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lower_boundContext lower_bound() {
			return GetRuleContext<Lower_boundContext>(0);
		}
		public Assumed_shape_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assumed_shape_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAssumed_shape_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAssumed_shape_spec(this);
		}
	}

	[RuleVersion(0)]
	public Assumed_shape_specContext assumed_shape_spec() {
		Assumed_shape_specContext _localctx = new Assumed_shape_specContext(Context, State);
		EnterRule(_localctx, 290, RULE_assumed_shape_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5663584287988032L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -881199745L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98938213795627007L) != 0)) {
				{
				State = 2447;
				lower_bound();
				}
			}

			State = 2450;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assumed_shape_bounds_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_bounds_exprContext explicit_bounds_expr() {
			return GetRuleContext<Explicit_bounds_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public Assumed_shape_bounds_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assumed_shape_bounds_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAssumed_shape_bounds_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAssumed_shape_bounds_spec(this);
		}
	}

	[RuleVersion(0)]
	public Assumed_shape_bounds_specContext assumed_shape_bounds_spec() {
		Assumed_shape_bounds_specContext _localctx = new Assumed_shape_bounds_specContext(Context, State);
		EnterRule(_localctx, 292, RULE_assumed_shape_bounds_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2452;
			explicit_bounds_expr();
			State = 2453;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Deferred_shape_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public Deferred_shape_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deferred_shape_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDeferred_shape_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDeferred_shape_spec(this);
		}
	}

	[RuleVersion(0)]
	public Deferred_shape_specContext deferred_shape_spec() {
		Deferred_shape_specContext _localctx = new Deferred_shape_specContext(Context, State);
		EnterRule(_localctx, 294, RULE_deferred_shape_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2455;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assumed_implied_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lower_boundContext lower_bound() {
			return GetRuleContext<Lower_boundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public Assumed_implied_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assumed_implied_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAssumed_implied_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAssumed_implied_spec(this);
		}
	}

	[RuleVersion(0)]
	public Assumed_implied_specContext assumed_implied_spec() {
		Assumed_implied_specContext _localctx = new Assumed_implied_specContext(Context, State);
		EnterRule(_localctx, 296, RULE_assumed_implied_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5663584287988032L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -881199745L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98938213795627007L) != 0)) {
				{
				State = 2457;
				lower_bound();
				State = 2458;
				Match(COLON);
				}
			}

			State = 2462;
			Match(ASTERIK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assumed_size_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_shape_spec_listContext explicit_shape_spec_list() {
			return GetRuleContext<Explicit_shape_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assumed_implied_specContext assumed_implied_spec() {
			return GetRuleContext<Assumed_implied_specContext>(0);
		}
		public Assumed_size_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assumed_size_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAssumed_size_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAssumed_size_spec(this);
		}
	}

	[RuleVersion(0)]
	public Assumed_size_specContext assumed_size_spec() {
		Assumed_size_specContext _localctx = new Assumed_size_specContext(Context, State);
		EnterRule(_localctx, 298, RULE_assumed_size_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2464;
			explicit_shape_spec_list();
			State = 2465;
			Match(COMMA);
			State = 2466;
			assumed_implied_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implied_shape_or_assumed_size_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assumed_implied_specContext assumed_implied_spec() {
			return GetRuleContext<Assumed_implied_specContext>(0);
		}
		public Implied_shape_or_assumed_size_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implied_shape_or_assumed_size_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImplied_shape_or_assumed_size_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImplied_shape_or_assumed_size_spec(this);
		}
	}

	[RuleVersion(0)]
	public Implied_shape_or_assumed_size_specContext implied_shape_or_assumed_size_spec() {
		Implied_shape_or_assumed_size_specContext _localctx = new Implied_shape_or_assumed_size_specContext(Context, State);
		EnterRule(_localctx, 300, RULE_implied_shape_or_assumed_size_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2468;
			assumed_implied_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implied_shape_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assumed_implied_specContext assumed_implied_spec() {
			return GetRuleContext<Assumed_implied_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assumed_implied_spec_listContext assumed_implied_spec_list() {
			return GetRuleContext<Assumed_implied_spec_listContext>(0);
		}
		public Implied_shape_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implied_shape_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImplied_shape_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImplied_shape_spec(this);
		}
	}

	[RuleVersion(0)]
	public Implied_shape_specContext implied_shape_spec() {
		Implied_shape_specContext _localctx = new Implied_shape_specContext(Context, State);
		EnterRule(_localctx, 302, RULE_implied_shape_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2470;
			assumed_implied_spec();
			State = 2471;
			Match(COMMA);
			State = 2472;
			assumed_implied_spec_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assumed_rank_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLEDOT() { return GetToken(FortranParser.DOUBLEDOT, 0); }
		public Assumed_rank_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assumed_rank_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAssumed_rank_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAssumed_rank_spec(this);
		}
	}

	[RuleVersion(0)]
	public Assumed_rank_specContext assumed_rank_spec() {
		Assumed_rank_specContext _localctx = new Assumed_rank_specContext(Context, State);
		EnterRule(_localctx, 304, RULE_assumed_rank_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2474;
			Match(DOUBLEDOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Intent_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(FortranParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(FortranParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(FortranParser.INOUT, 0); }
		public Intent_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intent_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIntent_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIntent_spec(this);
		}
	}

	[RuleVersion(0)]
	public Intent_specContext intent_spec() {
		Intent_specContext _localctx = new Intent_specContext(Context, State);
		EnterRule(_localctx, 306, RULE_intent_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2476;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rank_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(FortranParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_constant_exprContext scalar_int_constant_expr() {
			return GetRuleContext<Scalar_int_constant_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Rank_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rank_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterRank_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitRank_clause(this);
		}
	}

	[RuleVersion(0)]
	public Rank_clauseContext rank_clause() {
		Rank_clauseContext _localctx = new Rank_clauseContext(Context, State);
		EnterRule(_localctx, 308, RULE_rank_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2478;
			Match(RANK);
			State = 2479;
			Match(LPAREN);
			State = 2480;
			scalar_int_constant_expr();
			State = 2481;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Access_specContext access_spec() {
			return GetRuleContext<Access_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_id_listContext access_id_list() {
			return GetRuleContext<Access_id_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Access_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAccess_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAccess_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Access_stmtContext access_stmt() {
		Access_stmtContext _localctx = new Access_stmtContext(Context, State);
		EnterRule(_localctx, 310, RULE_access_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2483;
			access_spec();
			State = 2488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				{
				State = 2485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLECOLON) {
					{
					State = 2484;
					Match(DOUBLECOLON);
					}
				}

				State = 2487;
				access_id_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Access_nameContext access_name() {
			return GetRuleContext<Access_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_specContext generic_spec() {
			return GetRuleContext<Generic_specContext>(0);
		}
		public Access_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAccess_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAccess_id(this);
		}
	}

	[RuleVersion(0)]
	public Access_idContext access_id() {
		Access_idContext _localctx = new Access_idContext(Context, State);
		EnterRule(_localctx, 312, RULE_access_id);
		try {
			State = 2492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2490;
				access_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2491;
				generic_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Allocatable_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOCATABLE() { return GetToken(FortranParser.ALLOCATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Allocatable_decl_listContext allocatable_decl_list() {
			return GetRuleContext<Allocatable_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Allocatable_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocatable_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAllocatable_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAllocatable_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Allocatable_stmtContext allocatable_stmt() {
		Allocatable_stmtContext _localctx = new Allocatable_stmtContext(Context, State);
		EnterRule(_localctx, 314, RULE_allocatable_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2494;
			Match(ALLOCATABLE);
			State = 2496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2495;
				Match(DOUBLECOLON);
				}
			}

			State = 2498;
			allocatable_decl_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Allocatable_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_nameContext object_name() {
			return GetRuleContext<Object_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_specContext array_spec() {
			return GetRuleContext<Array_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LbracketContext lbracket() {
			return GetRuleContext<LbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Coarray_specContext coarray_spec() {
			return GetRuleContext<Coarray_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RbracketContext rbracket() {
			return GetRuleContext<RbracketContext>(0);
		}
		public Allocatable_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocatable_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAllocatable_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAllocatable_decl(this);
		}
	}

	[RuleVersion(0)]
	public Allocatable_declContext allocatable_decl() {
		Allocatable_declContext _localctx = new Allocatable_declContext(Context, State);
		EnterRule(_localctx, 316, RULE_allocatable_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2500;
			object_name();
			State = 2505;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				{
				State = 2501;
				Match(LPAREN);
				State = 2502;
				array_spec();
				State = 2503;
				Match(RPAREN);
				}
				break;
			}
			State = 2511;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACKET) {
				{
				State = 2507;
				lbracket();
				State = 2508;
				coarray_spec();
				State = 2509;
				rbracket();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Asynchronous_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNCHRONOUS() { return GetToken(FortranParser.ASYNCHRONOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_name_listContext object_name_list() {
			return GetRuleContext<Object_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Asynchronous_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asynchronous_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAsynchronous_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAsynchronous_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Asynchronous_stmtContext asynchronous_stmt() {
		Asynchronous_stmtContext _localctx = new Asynchronous_stmtContext(Context, State);
		EnterRule(_localctx, 318, RULE_asynchronous_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2513;
			Match(ASYNCHRONOUS);
			State = 2515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2514;
				Match(DOUBLECOLON);
				}
			}

			State = 2517;
			object_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bind_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Language_binding_specContext language_binding_spec() {
			return GetRuleContext<Language_binding_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_entity_listContext bind_entity_list() {
			return GetRuleContext<Bind_entity_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Bind_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBind_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBind_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Bind_stmtContext bind_stmt() {
		Bind_stmtContext _localctx = new Bind_stmtContext(Context, State);
		EnterRule(_localctx, 320, RULE_bind_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2519;
			language_binding_spec();
			State = 2521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2520;
				Match(DOUBLECOLON);
				}
			}

			State = 2523;
			bind_entity_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bind_entityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(FortranParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(FortranParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_block_nameContext common_block_name() {
			return GetRuleContext<Common_block_nameContext>(0);
		}
		public Bind_entityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind_entity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBind_entity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBind_entity(this);
		}
	}

	[RuleVersion(0)]
	public Bind_entityContext bind_entity() {
		Bind_entityContext _localctx = new Bind_entityContext(Context, State);
		EnterRule(_localctx, 322, RULE_bind_entity);
		try {
			State = 2530;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROGRAM:
			case END:
			case FUNCTION:
			case SUBROUTINE:
			case MODULE:
			case SUBMODULE:
			case BLOCK:
			case DATA:
			case INTRINSIC:
			case NONINTRINSIC:
			case OPERATOR:
			case READ:
			case FORMATTED:
			case UNFORMATTED:
			case WRITE:
			case ASSIGNMENT:
			case USE:
			case ONLY:
			case IMPORT:
			case NONE:
			case ALL:
			case KIND:
			case INTEGER:
			case LEN:
			case REAL:
			case DOUBLE:
			case PRECISION:
			case COMPLEX:
			case CHARACTER:
			case LOGICAL:
			case TYPE:
			case CLASS:
			case EXTERNAL:
			case IMPLICIT:
			case PARAMETER:
			case FORMAT:
			case BIND:
			case RESULT:
			case ENTRY:
			case STAT:
			case TEAM:
			case TEAMNUMBER:
			case RE:
			case IM:
			case SEQUENCE:
			case PRIVATE:
			case PROCEDURE:
			case NOPASS:
			case PASS:
			case POINTER:
			case ALLOCATABLE:
			case CODIMENSION:
			case CONTIGUOUS:
			case DIMENSION:
			case PUBLIC:
			case CONTAINS:
			case FINAL:
			case GENERIC:
			case DEFERRED:
			case NONOVERRIDABLE:
			case INTENT:
			case OPTIONAL:
			case PROTECTED:
			case SAVE:
			case IN:
			case OUT:
			case INOUT:
			case INTERFACE:
			case ABSTRACT:
			case ENUM:
			case ENUMERATOR:
			case ASYNCHRONOUS:
			case TARGET:
			case VALUE:
			case VOLATILE:
			case EQUIVALENCE:
			case COMMON:
			case NAMELIST:
			case EVENT:
			case WAIT:
			case UNTILCOUNT:
			case POST:
			case ERRMSG:
			case ERROR:
			case STOP:
			case QUIET:
			case ENDFILE:
			case DEALLOCATE:
			case CYCLE:
			case CONTINUE:
			case CLOSE:
			case UNIT:
			case IOSTAT:
			case IOMSG:
			case ERR:
			case STATUS:
			case CALL:
			case BACKSPACE:
			case ALLOCATE:
			case MOLD:
			case SOURCE:
			case OPEN:
			case ACCESS:
			case ACTION:
			case BLANK:
			case DECIMAL:
			case DELIM:
			case ENCODING:
			case FILE:
			case FORM:
			case NEWUNIT:
			case PAD:
			case POSITION:
			case RECL:
			case ROUND:
			case SIGN:
			case NULLIFY:
			case LOCK:
			case ACQUIREDLOCK:
			case INQUIRE:
			case IOLENGTH:
			case EXIST:
			case ID:
			case NAMED:
			case NEXTREC:
			case NUMBER:
			case OPENED:
			case PENDING:
			case POS:
			case READWRITE:
			case SEQUENTIAL:
			case SIZE:
			case STREAM:
			case IF:
			case GO:
			case TO:
			case NEWINDEX:
			case FLUSH:
			case FAIL:
			case IMAGE:
			case EXIT:
			case FORALL:
			case WHERE:
			case EOR:
			case UNLOCK:
			case SYNC:
			case MEMORY:
			case IMAGES:
			case REWIND:
			case RETURN:
			case FMT:
			case NML:
			case ADVANCE:
			case REC:
			case PRINT:
			case CRITICAL:
			case CHANGE:
			case SELECT:
			case CASE:
			case DEFAULT:
			case ASSOCIATE:
			case ELSEWHERE:
			case IS:
			case RANK:
			case ELSE:
			case THEN:
			case DO:
			case CONCURRENT:
			case WHILE:
			case SHARED:
			case LOCAL:
			case LOCALINIT:
			case RECURSIVE:
			case PURE:
			case NONRECURSIVE:
			case IMPURE:
			case ELEMENTAL:
			case NOTIFY:
			case TYPEOF:
			case CLASSOF:
			case ENUMERATION:
			case DIRECT:
			case LEADINGZERO:
			case REDUCE:
			case SIMPLE:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2525;
				entity_name();
				}
				break;
			case SLASH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2526;
				Match(SLASH);
				State = 2527;
				common_block_name();
				State = 2528;
				Match(SLASH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Codimension_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODIMENSION() { return GetToken(FortranParser.CODIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Codimension_decl_listContext codimension_decl_list() {
			return GetRuleContext<Codimension_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Codimension_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codimension_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCodimension_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCodimension_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Codimension_stmtContext codimension_stmt() {
		Codimension_stmtContext _localctx = new Codimension_stmtContext(Context, State);
		EnterRule(_localctx, 324, RULE_codimension_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2532;
			Match(CODIMENSION);
			State = 2534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2533;
				Match(DOUBLECOLON);
				}
			}

			State = 2536;
			codimension_decl_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Codimension_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Coarray_nameContext coarray_name() {
			return GetRuleContext<Coarray_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LbracketContext lbracket() {
			return GetRuleContext<LbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Coarray_specContext coarray_spec() {
			return GetRuleContext<Coarray_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RbracketContext rbracket() {
			return GetRuleContext<RbracketContext>(0);
		}
		public Codimension_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codimension_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCodimension_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCodimension_decl(this);
		}
	}

	[RuleVersion(0)]
	public Codimension_declContext codimension_decl() {
		Codimension_declContext _localctx = new Codimension_declContext(Context, State);
		EnterRule(_localctx, 326, RULE_codimension_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2538;
			coarray_name();
			State = 2539;
			lbracket();
			State = 2540;
			coarray_spec();
			State = 2541;
			rbracket();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Contiguous_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTIGUOUS() { return GetToken(FortranParser.CONTIGUOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_name_listContext object_name_list() {
			return GetRuleContext<Object_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Contiguous_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contiguous_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterContiguous_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitContiguous_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Contiguous_stmtContext contiguous_stmt() {
		Contiguous_stmtContext _localctx = new Contiguous_stmtContext(Context, State);
		EnterRule(_localctx, 328, RULE_contiguous_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2543;
			Match(CONTIGUOUS);
			State = 2545;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2544;
				Match(DOUBLECOLON);
				}
			}

			State = 2547;
			object_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(FortranParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_stmt_setContext[] data_stmt_set() {
			return GetRuleContexts<Data_stmt_setContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_stmt_setContext data_stmt_set(int i) {
			return GetRuleContext<Data_stmt_setContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Data_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Data_stmtContext data_stmt() {
		Data_stmtContext _localctx = new Data_stmtContext(Context, State);
		EnterRule(_localctx, 330, RULE_data_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2549;
			Match(DATA);
			State = 2550;
			data_stmt_set();
			State = 2557;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2552;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2551;
						Match(COMMA);
						}
					}

					State = 2554;
					data_stmt_set();
					}
					} 
				}
				State = 2559;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_stmt_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_stmt_object_listContext data_stmt_object_list() {
			return GetRuleContext<Data_stmt_object_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(FortranParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(FortranParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_stmt_value_listContext data_stmt_value_list() {
			return GetRuleContext<Data_stmt_value_listContext>(0);
		}
		public Data_stmt_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_stmt_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_stmt_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_stmt_set(this);
		}
	}

	[RuleVersion(0)]
	public Data_stmt_setContext data_stmt_set() {
		Data_stmt_setContext _localctx = new Data_stmt_setContext(Context, State);
		EnterRule(_localctx, 332, RULE_data_stmt_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2560;
			data_stmt_object_list();
			State = 2561;
			Match(SLASH);
			State = 2562;
			data_stmt_value_list();
			State = 2563;
			Match(SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_stmt_objectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_implied_doContext data_implied_do() {
			return GetRuleContext<Data_implied_doContext>(0);
		}
		public Data_stmt_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_stmt_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_stmt_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_stmt_object(this);
		}
	}

	[RuleVersion(0)]
	public Data_stmt_objectContext data_stmt_object() {
		Data_stmt_objectContext _localctx = new Data_stmt_objectContext(Context, State);
		EnterRule(_localctx, 334, RULE_data_stmt_object);
		try {
			State = 2567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2565;
				variable(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2566;
				data_implied_do();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_implied_doContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_i_do_object_listContext data_i_do_object_list() {
			return GetRuleContext<Data_i_do_object_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_i_do_variableContext data_i_do_variable() {
			return GetRuleContext<Data_i_do_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_constant_exprContext[] scalar_int_constant_expr() {
			return GetRuleContexts<Scalar_int_constant_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_constant_exprContext scalar_int_constant_expr(int i) {
			return GetRuleContext<Scalar_int_constant_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Integer_type_specContext integer_type_spec() {
			return GetRuleContext<Integer_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Data_implied_doContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_implied_do; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_implied_do(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_implied_do(this);
		}
	}

	[RuleVersion(0)]
	public Data_implied_doContext data_implied_do() {
		Data_implied_doContext _localctx = new Data_implied_doContext(Context, State);
		EnterRule(_localctx, 336, RULE_data_implied_do);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2569;
			Match(LPAREN);
			State = 2570;
			data_i_do_object_list();
			State = 2571;
			Match(COMMA);
			State = 2575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				{
				State = 2572;
				integer_type_spec();
				State = 2573;
				Match(DOUBLECOLON);
				}
				break;
			}
			State = 2577;
			data_i_do_variable();
			State = 2578;
			Match(ASSIGN);
			State = 2579;
			scalar_int_constant_expr();
			State = 2580;
			Match(COMMA);
			State = 2581;
			scalar_int_constant_expr();
			State = 2584;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2582;
				Match(COMMA);
				State = 2583;
				scalar_int_constant_expr();
				}
			}

			State = 2586;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_i_do_objectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_elementContext array_element() {
			return GetRuleContext<Array_elementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_structure_componentContext scalar_structure_component() {
			return GetRuleContext<Scalar_structure_componentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_implied_doContext data_implied_do() {
			return GetRuleContext<Data_implied_doContext>(0);
		}
		public Data_i_do_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_i_do_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_i_do_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_i_do_object(this);
		}
	}

	[RuleVersion(0)]
	public Data_i_do_objectContext data_i_do_object() {
		Data_i_do_objectContext _localctx = new Data_i_do_objectContext(Context, State);
		EnterRule(_localctx, 338, RULE_data_i_do_object);
		try {
			State = 2591;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2588;
				array_element();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2589;
				scalar_structure_component();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2590;
				data_implied_do();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_i_do_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Do_variableContext do_variable() {
			return GetRuleContext<Do_variableContext>(0);
		}
		public Data_i_do_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_i_do_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_i_do_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_i_do_variable(this);
		}
	}

	[RuleVersion(0)]
	public Data_i_do_variableContext data_i_do_variable() {
		Data_i_do_variableContext _localctx = new Data_i_do_variableContext(Context, State);
		EnterRule(_localctx, 340, RULE_data_i_do_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2593;
			do_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_stmt_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_stmt_constantContext data_stmt_constant() {
			return GetRuleContext<Data_stmt_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_stmt_repeatContext data_stmt_repeat() {
			return GetRuleContext<Data_stmt_repeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		public Data_stmt_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_stmt_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_stmt_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_stmt_value(this);
		}
	}

	[RuleVersion(0)]
	public Data_stmt_valueContext data_stmt_value() {
		Data_stmt_valueContext _localctx = new Data_stmt_valueContext(Context, State);
		EnterRule(_localctx, 342, RULE_data_stmt_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				{
				State = 2595;
				data_stmt_repeat();
				State = 2596;
				Match(ASTERIK);
				}
				break;
			}
			State = 2600;
			data_stmt_constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_stmt_repeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_constantContext scalar_int_constant() {
			return GetRuleContext<Scalar_int_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_constant_subobjectContext scalar_int_constant_subobject() {
			return GetRuleContext<Scalar_int_constant_subobjectContext>(0);
		}
		public Data_stmt_repeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_stmt_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_stmt_repeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_stmt_repeat(this);
		}
	}

	[RuleVersion(0)]
	public Data_stmt_repeatContext data_stmt_repeat() {
		Data_stmt_repeatContext _localctx = new Data_stmt_repeatContext(Context, State);
		EnterRule(_localctx, 344, RULE_data_stmt_repeat);
		try {
			State = 2604;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2602;
				scalar_int_constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2603;
				scalar_int_constant_subobject();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_stmt_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_constantContext scalar_constant() {
			return GetRuleContext<Scalar_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_constant_subobjectContext scalar_constant_subobject() {
			return GetRuleContext<Scalar_constant_subobjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signed_int_literal_constantContext signed_int_literal_constant() {
			return GetRuleContext<Signed_int_literal_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signed_real_literal_constantContext signed_real_literal_constant() {
			return GetRuleContext<Signed_real_literal_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Null_initContext null_init() {
			return GetRuleContext<Null_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Initial_data_targetContext initial_data_target() {
			return GetRuleContext<Initial_data_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Structure_constructorContext structure_constructor() {
			return GetRuleContext<Structure_constructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_constructorContext enum_constructor() {
			return GetRuleContext<Enum_constructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_constructorContext enumeration_constructor() {
			return GetRuleContext<Enumeration_constructorContext>(0);
		}
		public Data_stmt_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_stmt_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_stmt_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_stmt_constant(this);
		}
	}

	[RuleVersion(0)]
	public Data_stmt_constantContext data_stmt_constant() {
		Data_stmt_constantContext _localctx = new Data_stmt_constantContext(Context, State);
		EnterRule(_localctx, 346, RULE_data_stmt_constant);
		try {
			State = 2615;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2606;
				scalar_constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2607;
				scalar_constant_subobject();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2608;
				signed_int_literal_constant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2609;
				signed_real_literal_constant();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2610;
				null_init();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2611;
				initial_data_target();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2612;
				structure_constructor();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2613;
				enum_constructor();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2614;
				enumeration_constructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_constant_subobjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constant_subobjectContext constant_subobject() {
			return GetRuleContext<Constant_subobjectContext>(0);
		}
		public Int_constant_subobjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_constant_subobject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInt_constant_subobject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInt_constant_subobject(this);
		}
	}

	[RuleVersion(0)]
	public Int_constant_subobjectContext int_constant_subobject() {
		Int_constant_subobjectContext _localctx = new Int_constant_subobjectContext(Context, State);
		EnterRule(_localctx, 348, RULE_int_constant_subobject);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2617;
			constant_subobject();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_subobjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public Constant_subobjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_subobject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConstant_subobject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConstant_subobject(this);
		}
	}

	[RuleVersion(0)]
	public Constant_subobjectContext constant_subobject() {
		Constant_subobjectContext _localctx = new Constant_subobjectContext(Context, State);
		EnterRule(_localctx, 350, RULE_constant_subobject);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2619;
			designator(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dimension_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIMENSION() { return GetToken(FortranParser.DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_nameContext[] array_name() {
			return GetRuleContexts<Array_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_nameContext array_name(int i) {
			return GetRuleContext<Array_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(FortranParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(FortranParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_specContext[] array_spec() {
			return GetRuleContexts<Array_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_specContext array_spec(int i) {
			return GetRuleContext<Array_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(FortranParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(FortranParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Dimension_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimension_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDimension_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDimension_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Dimension_stmtContext dimension_stmt() {
		Dimension_stmtContext _localctx = new Dimension_stmtContext(Context, State);
		EnterRule(_localctx, 352, RULE_dimension_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2621;
			Match(DIMENSION);
			State = 2623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2622;
				Match(DOUBLECOLON);
				}
			}

			State = 2625;
			array_name();
			State = 2626;
			Match(LPAREN);
			State = 2627;
			array_spec();
			State = 2628;
			Match(RPAREN);
			State = 2637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2629;
				Match(COMMA);
				State = 2630;
				array_name();
				State = 2631;
				Match(LPAREN);
				State = 2632;
				array_spec();
				State = 2633;
				Match(RPAREN);
				}
				}
				State = 2639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Intent_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTENT() { return GetToken(FortranParser.INTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Intent_specContext intent_spec() {
			return GetRuleContext<Intent_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dummy_arg_name_listContext dummy_arg_name_list() {
			return GetRuleContext<Dummy_arg_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Intent_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intent_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIntent_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIntent_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Intent_stmtContext intent_stmt() {
		Intent_stmtContext _localctx = new Intent_stmtContext(Context, State);
		EnterRule(_localctx, 354, RULE_intent_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2640;
			Match(INTENT);
			State = 2641;
			Match(LPAREN);
			State = 2642;
			intent_spec();
			State = 2643;
			Match(RPAREN);
			State = 2645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2644;
				Match(DOUBLECOLON);
				}
			}

			State = 2647;
			dummy_arg_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(FortranParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dummy_arg_name_listContext dummy_arg_name_list() {
			return GetRuleContext<Dummy_arg_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Optional_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterOptional_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitOptional_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Optional_stmtContext optional_stmt() {
		Optional_stmtContext _localctx = new Optional_stmtContext(Context, State);
		EnterRule(_localctx, 356, RULE_optional_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2649;
			Match(OPTIONAL);
			State = 2651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2650;
				Match(DOUBLECOLON);
				}
			}

			State = 2653;
			dummy_arg_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETER() { return GetToken(FortranParser.PARAMETER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_constant_def_listContext named_constant_def_list() {
			return GetRuleContext<Named_constant_def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Parameter_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterParameter_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitParameter_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_stmtContext parameter_stmt() {
		Parameter_stmtContext _localctx = new Parameter_stmtContext(Context, State);
		EnterRule(_localctx, 358, RULE_parameter_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2655;
			Match(PARAMETER);
			State = 2656;
			Match(LPAREN);
			State = 2657;
			named_constant_def_list();
			State = 2658;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_constant_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_constantContext named_constant() {
			return GetRuleContext<Named_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constant_exprContext constant_expr() {
			return GetRuleContext<Constant_exprContext>(0);
		}
		public Named_constant_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_constant_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterNamed_constant_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitNamed_constant_def(this);
		}
	}

	[RuleVersion(0)]
	public Named_constant_defContext named_constant_def() {
		Named_constant_defContext _localctx = new Named_constant_defContext(Context, State);
		EnterRule(_localctx, 360, RULE_named_constant_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2660;
			named_constant();
			State = 2661;
			Match(ASSIGN);
			State = 2662;
			constant_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(FortranParser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pointer_decl_listContext pointer_decl_list() {
			return GetRuleContext<Pointer_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Pointer_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPointer_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPointer_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_stmtContext pointer_stmt() {
		Pointer_stmtContext _localctx = new Pointer_stmtContext(Context, State);
		EnterRule(_localctx, 362, RULE_pointer_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2664;
			Match(POINTER);
			State = 2666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2665;
				Match(DOUBLECOLON);
				}
			}

			State = 2668;
			pointer_decl_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_nameContext object_name() {
			return GetRuleContext<Object_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Deferred_shape_spec_listContext deferred_shape_spec_list() {
			return GetRuleContext<Deferred_shape_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procptr_entity_nameContext procptr_entity_name() {
			return GetRuleContext<Procptr_entity_nameContext>(0);
		}
		public Pointer_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPointer_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPointer_decl(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_declContext pointer_decl() {
		Pointer_declContext _localctx = new Pointer_declContext(Context, State);
		EnterRule(_localctx, 364, RULE_pointer_decl);
		try {
			State = 2678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2670;
				object_name();
				State = 2675;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
				case 1:
					{
					State = 2671;
					Match(LPAREN);
					State = 2672;
					deferred_shape_spec_list();
					State = 2673;
					Match(RPAREN);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2677;
				procptr_entity_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protected_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(FortranParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Entity_name_listContext entity_name_list() {
			return GetRuleContext<Entity_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Protected_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protected_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProtected_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProtected_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Protected_stmtContext protected_stmt() {
		Protected_stmtContext _localctx = new Protected_stmtContext(Context, State);
		EnterRule(_localctx, 366, RULE_protected_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2680;
			Match(PROTECTED);
			State = 2682;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2681;
				Match(DOUBLECOLON);
				}
			}

			State = 2684;
			entity_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Save_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVE() { return GetToken(FortranParser.SAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Saved_entity_listContext saved_entity_list() {
			return GetRuleContext<Saved_entity_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Save_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_save_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSave_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSave_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Save_stmtContext save_stmt() {
		Save_stmtContext _localctx = new Save_stmtContext(Context, State);
		EnterRule(_localctx, 368, RULE_save_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2686;
			Match(SAVE);
			State = 2691;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				{
				State = 2688;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLECOLON) {
					{
					State = 2687;
					Match(DOUBLECOLON);
					}
				}

				State = 2690;
				saved_entity_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Saved_entityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_nameContext object_name() {
			return GetRuleContext<Object_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_pointer_nameContext proc_pointer_name() {
			return GetRuleContext<Proc_pointer_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(FortranParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(FortranParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_block_nameContext common_block_name() {
			return GetRuleContext<Common_block_nameContext>(0);
		}
		public Saved_entityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saved_entity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSaved_entity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSaved_entity(this);
		}
	}

	[RuleVersion(0)]
	public Saved_entityContext saved_entity() {
		Saved_entityContext _localctx = new Saved_entityContext(Context, State);
		EnterRule(_localctx, 370, RULE_saved_entity);
		try {
			State = 2699;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2693;
				object_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2694;
				proc_pointer_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2695;
				Match(SLASH);
				State = 2696;
				common_block_name();
				State = 2697;
				Match(SLASH);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_pointer_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Proc_pointer_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_pointer_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProc_pointer_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProc_pointer_name(this);
		}
	}

	[RuleVersion(0)]
	public Proc_pointer_nameContext proc_pointer_name() {
		Proc_pointer_nameContext _localctx = new Proc_pointer_nameContext(Context, State);
		EnterRule(_localctx, 372, RULE_proc_pointer_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2701;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET() { return GetToken(FortranParser.TARGET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Target_decl_listContext target_decl_list() {
			return GetRuleContext<Target_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Target_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterTarget_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitTarget_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Target_stmtContext target_stmt() {
		Target_stmtContext _localctx = new Target_stmtContext(Context, State);
		EnterRule(_localctx, 374, RULE_target_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2703;
			Match(TARGET);
			State = 2705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2704;
				Match(DOUBLECOLON);
				}
			}

			State = 2707;
			target_decl_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_nameContext object_name() {
			return GetRuleContext<Object_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_specContext array_spec() {
			return GetRuleContext<Array_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LbracketContext lbracket() {
			return GetRuleContext<LbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Coarray_specContext coarray_spec() {
			return GetRuleContext<Coarray_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RbracketContext rbracket() {
			return GetRuleContext<RbracketContext>(0);
		}
		public Target_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterTarget_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitTarget_decl(this);
		}
	}

	[RuleVersion(0)]
	public Target_declContext target_decl() {
		Target_declContext _localctx = new Target_declContext(Context, State);
		EnterRule(_localctx, 376, RULE_target_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2709;
			object_name();
			State = 2714;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				{
				State = 2710;
				Match(LPAREN);
				State = 2711;
				array_spec();
				State = 2712;
				Match(RPAREN);
				}
				break;
			}
			State = 2720;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACKET) {
				{
				State = 2716;
				lbracket();
				State = 2717;
				coarray_spec();
				State = 2718;
				rbracket();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(FortranParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dummy_arg_name_listContext dummy_arg_name_list() {
			return GetRuleContext<Dummy_arg_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Value_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterValue_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitValue_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Value_stmtContext value_stmt() {
		Value_stmtContext _localctx = new Value_stmtContext(Context, State);
		EnterRule(_localctx, 378, RULE_value_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2722;
			Match(VALUE);
			State = 2724;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2723;
				Match(DOUBLECOLON);
				}
			}

			State = 2726;
			dummy_arg_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Volatile_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(FortranParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_name_listContext object_name_list() {
			return GetRuleContext<Object_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Volatile_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_volatile_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterVolatile_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitVolatile_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Volatile_stmtContext volatile_stmt() {
		Volatile_stmtContext _localctx = new Volatile_stmtContext(Context, State);
		EnterRule(_localctx, 380, RULE_volatile_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2728;
			Match(VOLATILE);
			State = 2730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 2729;
				Match(DOUBLECOLON);
				}
			}

			State = 2732;
			object_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT() { return GetToken(FortranParser.IMPLICIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_spec_listContext implicit_spec_list() {
			return GetRuleContext<Implicit_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(FortranParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_none_spec_listContext implicit_none_spec_list() {
			return GetRuleContext<Implicit_none_spec_listContext>(0);
		}
		public Implicit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImplicit_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImplicit_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_stmtContext implicit_stmt() {
		Implicit_stmtContext _localctx = new Implicit_stmtContext(Context, State);
		EnterRule(_localctx, 382, RULE_implicit_stmt);
		int _la;
		try {
			State = 2745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2734;
				Match(IMPLICIT);
				State = 2735;
				implicit_spec_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2736;
				Match(IMPLICIT);
				State = 2737;
				Match(NONE);
				State = 2743;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
				case 1:
					{
					State = 2738;
					Match(LPAREN);
					State = 2740;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==TYPE || _la==EXTERNAL) {
						{
						State = 2739;
						implicit_none_spec_list();
						}
					}

					State = 2742;
					Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_type_specContext declaration_type_spec() {
			return GetRuleContext<Declaration_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Letter_spec_listContext letter_spec_list() {
			return GetRuleContext<Letter_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Implicit_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImplicit_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImplicit_spec(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_specContext implicit_spec() {
		Implicit_specContext _localctx = new Implicit_specContext(Context, State);
		EnterRule(_localctx, 384, RULE_implicit_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2747;
			declaration_type_spec();
			State = 2748;
			Match(LPAREN);
			State = 2749;
			letter_spec_list();
			State = 2750;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Letter_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER_SPEC() { return GetToken(FortranParser.LETTER_SPEC, 0); }
		public Letter_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letter_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLetter_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLetter_spec(this);
		}
	}

	[RuleVersion(0)]
	public Letter_specContext letter_spec() {
		Letter_specContext _localctx = new Letter_specContext(Context, State);
		EnterRule(_localctx, 386, RULE_letter_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2752;
			Match(LETTER_SPEC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_none_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(FortranParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(FortranParser.TYPE, 0); }
		public Implicit_none_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_none_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImplicit_none_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImplicit_none_spec(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_none_specContext implicit_none_spec() {
		Implicit_none_specContext _localctx = new Implicit_none_specContext(Context, State);
		EnterRule(_localctx, 388, RULE_implicit_none_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2754;
			_la = TokenStream.LA(1);
			if ( !(_la==TYPE || _la==EXTERNAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(FortranParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_name_listContext import_name_list() {
			return GetRuleContext<Import_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(FortranParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(FortranParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(FortranParser.ALL, 0); }
		public Import_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImport_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImport_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Import_stmtContext import_stmt() {
		Import_stmtContext _localctx = new Import_stmtContext(Context, State);
		EnterRule(_localctx, 390, RULE_import_stmt);
		int _la;
		try {
			State = 2774;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2756;
				Match(IMPORT);
				State = 2761;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
				case 1:
					{
					State = 2758;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOUBLECOLON) {
						{
						State = 2757;
						Match(DOUBLECOLON);
						}
					}

					State = 2760;
					import_name_list();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2763;
				Match(IMPORT);
				State = 2764;
				Match(COMMA);
				State = 2765;
				Match(ONLY);
				State = 2766;
				Match(COLON);
				State = 2767;
				import_name_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2768;
				Match(IMPORT);
				State = 2769;
				Match(COMMA);
				State = 2770;
				Match(NONE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2771;
				Match(IMPORT);
				State = 2772;
				Match(COMMA);
				State = 2773;
				Match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namelist_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMELIST() { return GetToken(FortranParser.NAMELIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(FortranParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(FortranParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namelist_group_nameContext[] namelist_group_name() {
			return GetRuleContexts<Namelist_group_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namelist_group_nameContext namelist_group_name(int i) {
			return GetRuleContext<Namelist_group_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namelist_group_object_listContext[] namelist_group_object_list() {
			return GetRuleContexts<Namelist_group_object_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namelist_group_object_listContext namelist_group_object_list(int i) {
			return GetRuleContext<Namelist_group_object_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Namelist_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterNamelist_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitNamelist_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Namelist_stmtContext namelist_stmt() {
		Namelist_stmtContext _localctx = new Namelist_stmtContext(Context, State);
		EnterRule(_localctx, 392, RULE_namelist_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2776;
			Match(NAMELIST);
			State = 2777;
			Match(SLASH);
			State = 2778;
			namelist_group_name();
			State = 2779;
			Match(SLASH);
			State = 2780;
			namelist_group_object_list();
			State = 2791;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA || _la==SLASH) {
				{
				{
				State = 2782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2781;
					Match(COMMA);
					}
				}

				State = 2784;
				Match(SLASH);
				State = 2785;
				namelist_group_name();
				State = 2786;
				Match(SLASH);
				State = 2787;
				namelist_group_object_list();
				}
				}
				State = 2793;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namelist_group_objectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		public Namelist_group_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist_group_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterNamelist_group_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitNamelist_group_object(this);
		}
	}

	[RuleVersion(0)]
	public Namelist_group_objectContext namelist_group_object() {
		Namelist_group_objectContext _localctx = new Namelist_group_objectContext(Context, State);
		EnterRule(_localctx, 394, RULE_namelist_group_object);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2794;
			variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equivalence_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUIVALENCE() { return GetToken(FortranParser.EQUIVALENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Equivalence_set_listContext equivalence_set_list() {
			return GetRuleContext<Equivalence_set_listContext>(0);
		}
		public Equivalence_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalence_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEquivalence_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEquivalence_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Equivalence_stmtContext equivalence_stmt() {
		Equivalence_stmtContext _localctx = new Equivalence_stmtContext(Context, State);
		EnterRule(_localctx, 396, RULE_equivalence_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2796;
			Match(EQUIVALENCE);
			State = 2797;
			equivalence_set_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equivalence_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Equivalence_objectContext equivalence_object() {
			return GetRuleContext<Equivalence_objectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Equivalence_object_listContext equivalence_object_list() {
			return GetRuleContext<Equivalence_object_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Equivalence_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalence_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEquivalence_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEquivalence_set(this);
		}
	}

	[RuleVersion(0)]
	public Equivalence_setContext equivalence_set() {
		Equivalence_setContext _localctx = new Equivalence_setContext(Context, State);
		EnterRule(_localctx, 398, RULE_equivalence_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2799;
			Match(LPAREN);
			State = 2800;
			equivalence_object();
			State = 2801;
			Match(COMMA);
			State = 2802;
			equivalence_object_list();
			State = 2803;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equivalence_objectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_elementContext array_element() {
			return GetRuleContext<Array_elementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstringContext substring() {
			return GetRuleContext<SubstringContext>(0);
		}
		public Equivalence_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalence_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEquivalence_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEquivalence_object(this);
		}
	}

	[RuleVersion(0)]
	public Equivalence_objectContext equivalence_object() {
		Equivalence_objectContext _localctx = new Equivalence_objectContext(Context, State);
		EnterRule(_localctx, 400, RULE_equivalence_object);
		try {
			State = 2808;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2805;
				variable_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2806;
				array_element();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2807;
				substring();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMON() { return GetToken(FortranParser.COMMON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Common_block_object_listContext[] common_block_object_list() {
			return GetRuleContexts<Common_block_object_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_block_object_listContext common_block_object_list(int i) {
			return GetRuleContext<Common_block_object_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(FortranParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(FortranParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_block_nameContext[] common_block_name() {
			return GetRuleContexts<Common_block_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_block_nameContext common_block_name(int i) {
			return GetRuleContext<Common_block_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Common_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCommon_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCommon_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Common_stmtContext common_stmt() {
		Common_stmtContext _localctx = new Common_stmtContext(Context, State);
		EnterRule(_localctx, 402, RULE_common_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2810;
			Match(COMMON);
			State = 2816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SLASH) {
				{
				State = 2811;
				Match(SLASH);
				State = 2813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5664683900280128L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1019726465L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 18084526735491071L) != 0)) {
					{
					State = 2812;
					common_block_name();
					}
				}

				State = 2815;
				Match(SLASH);
				}
			}

			State = 2818;
			common_block_object_list();
			State = 2830;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA || _la==SLASH) {
				{
				{
				State = 2820;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2819;
					Match(COMMA);
					}
				}

				State = 2822;
				Match(SLASH);
				State = 2824;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5664683900280128L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1019726465L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 18084526735491071L) != 0)) {
					{
					State = 2823;
					common_block_name();
					}
				}

				State = 2826;
				Match(SLASH);
				State = 2827;
				common_block_object_list();
				}
				}
				State = 2832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_block_objectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Array_specContext array_spec() {
			return GetRuleContext<Array_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Common_block_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_block_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCommon_block_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCommon_block_object(this);
		}
	}

	[RuleVersion(0)]
	public Common_block_objectContext common_block_object() {
		Common_block_objectContext _localctx = new Common_block_objectContext(Context, State);
		EnterRule(_localctx, 404, RULE_common_block_object);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2833;
			variable_name();
			State = 2838;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				{
				State = 2834;
				Match(LPAREN);
				State = 2835;
				array_spec();
				State = 2836;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_nameContext object_name() {
			return GetRuleContext<Object_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_elementContext array_element() {
			return GetRuleContext<Array_elementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_refContext data_ref() {
			return GetRuleContext<Data_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Substring_rangeContext substring_range() {
			return GetRuleContext<Substring_rangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Coindexed_named_objectContext coindexed_named_object() {
			return GetRuleContext<Coindexed_named_objectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Structure_componentContext structure_component() {
			return GetRuleContext<Structure_componentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstringContext substring() {
			return GetRuleContext<SubstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(FortranParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RE() { return GetToken(FortranParser.RE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IM() { return GetToken(FortranParser.IM, 0); }
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		return designator(0);
	}

	private DesignatorContext designator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DesignatorContext _localctx = new DesignatorContext(Context, _parentState);
		DesignatorContext _prevctx = _localctx;
		int _startState = 406;
		EnterRecursionRule(_localctx, 406, RULE_designator, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2853;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
			case 1:
				{
				State = 2841;
				object_name();
				}
				break;
			case 2:
				{
				State = 2842;
				array_element();
				}
				break;
			case 3:
				{
				State = 2843;
				data_ref();
				State = 2848;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
				case 1:
					{
					State = 2844;
					Match(LPAREN);
					State = 2845;
					substring_range();
					State = 2846;
					Match(RPAREN);
					}
					break;
				}
				}
				break;
			case 4:
				{
				State = 2850;
				coindexed_named_object();
				}
				break;
			case 5:
				{
				State = 2851;
				structure_component();
				}
				break;
			case 6:
				{
				State = 2852;
				substring();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2863;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,209,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2861;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
					case 1:
						{
						_localctx = new DesignatorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_designator);
						State = 2855;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 2856;
						Match(PERCENT);
						State = 2857;
						Match(RE);
						}
						break;
					case 2:
						{
						_localctx = new DesignatorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_designator);
						State = 2858;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 2859;
						Match(PERCENT);
						State = 2860;
						Match(IM);
						}
						break;
					}
					} 
				}
				State = 2865;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,209,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Actual_arg_spec_listContext actual_arg_spec_list() {
			return GetRuleContext<Actual_arg_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_refContext data_ref() {
			return GetRuleContext<Data_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(FortranParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Binding_nameContext binding_name() {
			return GetRuleContext<Binding_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_component_nameContext procedure_component_name() {
			return GetRuleContext<Procedure_component_nameContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		return variable(0);
	}

	private VariableContext variable(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		VariableContext _localctx = new VariableContext(Context, _parentState);
		VariableContext _prevctx = _localctx;
		int _startState = 408;
		EnterRecursionRule(_localctx, 408, RULE_variable, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2884;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
			case 1:
				{
				State = 2867;
				designator(0);
				}
				break;
			case 2:
				{
				State = 2868;
				procedure_name();
				State = 2869;
				Match(LPAREN);
				State = 2871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5663584287983936L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -881199745L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98938213795627007L) != 0)) {
					{
					State = 2870;
					actual_arg_spec_list();
					}
				}

				State = 2873;
				Match(RPAREN);
				}
				break;
			case 3:
				{
				State = 2875;
				data_ref();
				State = 2876;
				Match(PERCENT);
				State = 2877;
				binding_name();
				State = 2878;
				Match(LPAREN);
				State = 2880;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5663584287983936L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -881199745L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98938213795627007L) != 0)) {
					{
					State = 2879;
					actual_arg_spec_list();
					}
				}

				State = 2882;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2897;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,214,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new VariableContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_variable);
					State = 2886;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 2887;
					Match(PERCENT);
					State = 2888;
					procedure_component_name();
					State = 2889;
					Match(LPAREN);
					State = 2891;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5663584287983936L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -881199745L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98938213795627007L) != 0)) {
						{
						State = 2890;
						actual_arg_spec_list();
						}
					}

					State = 2893;
					Match(RPAREN);
					}
					} 
				}
				State = 2899;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,214,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterVariable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitVariable_name(this);
		}
	}

	[RuleVersion(0)]
	public Variable_nameContext variable_name() {
		Variable_nameContext _localctx = new Variable_nameContext(Context, State);
		EnterRule(_localctx, 410, RULE_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2900;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Logical_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLogical_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLogical_variable(this);
		}
	}

	[RuleVersion(0)]
	public Logical_variableContext logical_variable() {
		Logical_variableContext _localctx = new Logical_variableContext(Context, State);
		EnterRule(_localctx, 412, RULE_logical_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2902;
			variable(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Char_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterChar_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitChar_variable(this);
		}
	}

	[RuleVersion(0)]
	public Char_variableContext char_variable() {
		Char_variableContext _localctx = new Char_variableContext(Context, State);
		EnterRule(_localctx, 414, RULE_char_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2904;
			variable(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_char_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Default_char_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_char_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDefault_char_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDefault_char_variable(this);
		}
	}

	[RuleVersion(0)]
	public Default_char_variableContext default_char_variable() {
		Default_char_variableContext _localctx = new Default_char_variableContext(Context, State);
		EnterRule(_localctx, 416, RULE_default_char_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2906;
			variable(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Int_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInt_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInt_variable(this);
		}
	}

	[RuleVersion(0)]
	public Int_variableContext int_variable() {
		Int_variableContext _localctx = new Int_variableContext(Context, State);
		EnterRule(_localctx, 418, RULE_int_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2908;
			variable(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Parent_stringContext parent_string() {
			return GetRuleContext<Parent_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Substring_rangeContext substring_range() {
			return GetRuleContext<Substring_rangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public SubstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSubstring(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSubstring(this);
		}
	}

	[RuleVersion(0)]
	public SubstringContext substring() {
		SubstringContext _localctx = new SubstringContext(Context, State);
		EnterRule(_localctx, 420, RULE_substring);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2910;
			parent_string();
			State = 2911;
			Match(LPAREN);
			State = 2912;
			substring_range();
			State = 2913;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parent_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_variable_nameContext scalar_variable_name() {
			return GetRuleContext<Scalar_variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_elementContext array_element() {
			return GetRuleContext<Array_elementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Coindexed_named_objectContext coindexed_named_object() {
			return GetRuleContext<Coindexed_named_objectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_structure_componentContext scalar_structure_component() {
			return GetRuleContext<Scalar_structure_componentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_constantContext scalar_constant() {
			return GetRuleContext<Scalar_constantContext>(0);
		}
		public Parent_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parent_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterParent_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitParent_string(this);
		}
	}

	[RuleVersion(0)]
	public Parent_stringContext parent_string() {
		Parent_stringContext _localctx = new Parent_stringContext(Context, State);
		EnterRule(_localctx, 422, RULE_parent_string);
		try {
			State = 2920;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2915;
				scalar_variable_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2916;
				array_element();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2917;
				coindexed_named_object();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2918;
				scalar_structure_component();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2919;
				scalar_constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Substring_rangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext[] scalar_int_expr() {
			return GetRuleContexts<Scalar_int_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr(int i) {
			return GetRuleContext<Scalar_int_exprContext>(i);
		}
		public Substring_rangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substring_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSubstring_range(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSubstring_range(this);
		}
	}

	[RuleVersion(0)]
	public Substring_rangeContext substring_range() {
		Substring_rangeContext _localctx = new Substring_rangeContext(Context, State);
		EnterRule(_localctx, 424, RULE_substring_range);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5663584287988032L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -881199745L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98938213795627007L) != 0)) {
				{
				State = 2922;
				scalar_int_expr();
				}
			}

			State = 2925;
			Match(COLON);
			State = 2927;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5663584287988032L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -881199745L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98938213795627007L) != 0)) {
				{
				State = 2926;
				scalar_int_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Part_refContext[] part_ref() {
			return GetRuleContexts<Part_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Part_refContext part_ref(int i) {
			return GetRuleContext<Part_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(FortranParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(FortranParser.PERCENT, i);
		}
		public Data_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_ref(this);
		}
	}

	[RuleVersion(0)]
	public Data_refContext data_ref() {
		Data_refContext _localctx = new Data_refContext(Context, State);
		EnterRule(_localctx, 426, RULE_data_ref);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2929;
			part_ref();
			State = 2934;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,218,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2930;
					Match(PERCENT);
					State = 2931;
					part_ref();
					}
					} 
				}
				State = 2936;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,218,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Part_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Part_nameContext part_name() {
			return GetRuleContext<Part_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Section_subscript_listContext section_subscript_list() {
			return GetRuleContext<Section_subscript_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Image_selectorContext image_selector() {
			return GetRuleContext<Image_selectorContext>(0);
		}
		public Part_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_part_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPart_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPart_ref(this);
		}
	}

	[RuleVersion(0)]
	public Part_refContext part_ref() {
		Part_refContext _localctx = new Part_refContext(Context, State);
		EnterRule(_localctx, 428, RULE_part_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2937;
			part_name();
			State = 2942;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				{
				State = 2938;
				Match(LPAREN);
				State = 2939;
				section_subscript_list();
				State = 2940;
				Match(RPAREN);
				}
				break;
			}
			State = 2945;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
			case 1:
				{
				State = 2944;
				image_selector();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Structure_componentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_refContext data_ref() {
			return GetRuleContext<Data_refContext>(0);
		}
		public Structure_componentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structure_component; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterStructure_component(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitStructure_component(this);
		}
	}

	[RuleVersion(0)]
	public Structure_componentContext structure_component() {
		Structure_componentContext _localctx = new Structure_componentContext(Context, State);
		EnterRule(_localctx, 430, RULE_structure_component);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2947;
			data_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Coindexed_named_objectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_refContext data_ref() {
			return GetRuleContext<Data_refContext>(0);
		}
		public Coindexed_named_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coindexed_named_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCoindexed_named_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCoindexed_named_object(this);
		}
	}

	[RuleVersion(0)]
	public Coindexed_named_objectContext coindexed_named_object() {
		Coindexed_named_objectContext _localctx = new Coindexed_named_objectContext(Context, State);
		EnterRule(_localctx, 432, RULE_coindexed_named_object);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2949;
			data_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Complex_part_designatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(FortranParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RE() { return GetToken(FortranParser.RE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IM() { return GetToken(FortranParser.IM, 0); }
		public Complex_part_designatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complex_part_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterComplex_part_designator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitComplex_part_designator(this);
		}
	}

	[RuleVersion(0)]
	public Complex_part_designatorContext complex_part_designator() {
		Complex_part_designatorContext _localctx = new Complex_part_designatorContext(Context, State);
		EnterRule(_localctx, 434, RULE_complex_part_designator);
		try {
			State = 2959;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2951;
				designator(0);
				State = 2952;
				Match(PERCENT);
				State = 2953;
				Match(RE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2955;
				designator(0);
				State = 2956;
				Match(PERCENT);
				State = 2957;
				Match(IM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_param_inquiryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(FortranParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_nameContext type_param_name() {
			return GetRuleContext<Type_param_nameContext>(0);
		}
		public Type_param_inquiryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_param_inquiry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_param_inquiry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_param_inquiry(this);
		}
	}

	[RuleVersion(0)]
	public Type_param_inquiryContext type_param_inquiry() {
		Type_param_inquiryContext _localctx = new Type_param_inquiryContext(Context, State);
		EnterRule(_localctx, 436, RULE_type_param_inquiry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2961;
			designator(0);
			State = 2962;
			Match(PERCENT);
			State = 2963;
			type_param_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_refContext data_ref() {
			return GetRuleContext<Data_refContext>(0);
		}
		public Array_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterArray_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitArray_element(this);
		}
	}

	[RuleVersion(0)]
	public Array_elementContext array_element() {
		Array_elementContext _localctx = new Array_elementContext(Context, State);
		EnterRule(_localctx, 438, RULE_array_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2965;
			data_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_refContext data_ref() {
			return GetRuleContext<Data_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Substring_rangeContext substring_range() {
			return GetRuleContext<Substring_rangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Complex_part_designatorContext complex_part_designator() {
			return GetRuleContext<Complex_part_designatorContext>(0);
		}
		public Array_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterArray_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitArray_section(this);
		}
	}

	[RuleVersion(0)]
	public Array_sectionContext array_section() {
		Array_sectionContext _localctx = new Array_sectionContext(Context, State);
		EnterRule(_localctx, 440, RULE_array_section);
		int _la;
		try {
			State = 2975;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2967;
				data_ref();
				State = 2972;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 2968;
					Match(LPAREN);
					State = 2969;
					substring_range();
					State = 2970;
					Match(RPAREN);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2974;
				complex_part_designator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 442, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2977;
			scalar_int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_subscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATSYMBOL() { return GetToken(FortranParser.ATSYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Int_exprContext int_expr() {
			return GetRuleContext<Int_exprContext>(0);
		}
		public Multiple_subscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterMultiple_subscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitMultiple_subscript(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_subscriptContext multiple_subscript() {
		Multiple_subscriptContext _localctx = new Multiple_subscriptContext(Context, State);
		EnterRule(_localctx, 444, RULE_multiple_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2979;
			Match(ATSYMBOL);
			State = 2980;
			int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Section_subscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript() {
			return GetRuleContext<SubscriptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiple_subscriptContext multiple_subscript() {
			return GetRuleContext<Multiple_subscriptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_tripletContext subscript_triplet() {
			return GetRuleContext<Subscript_tripletContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiple_subscript_tripletContext multiple_subscript_triplet() {
			return GetRuleContext<Multiple_subscript_tripletContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vector_subscriptContext vector_subscript() {
			return GetRuleContext<Vector_subscriptContext>(0);
		}
		public Section_subscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSection_subscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSection_subscript(this);
		}
	}

	[RuleVersion(0)]
	public Section_subscriptContext section_subscript() {
		Section_subscriptContext _localctx = new Section_subscriptContext(Context, State);
		EnterRule(_localctx, 446, RULE_section_subscript);
		try {
			State = 2987;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2982;
				subscript();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2983;
				multiple_subscript();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2984;
				subscript_triplet();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2985;
				multiple_subscript_triplet();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2986;
				vector_subscript();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subscript_tripletContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(FortranParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(FortranParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext[] subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrideContext stride() {
			return GetRuleContext<StrideContext>(0);
		}
		public Subscript_tripletContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript_triplet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSubscript_triplet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSubscript_triplet(this);
		}
	}

	[RuleVersion(0)]
	public Subscript_tripletContext subscript_triplet() {
		Subscript_tripletContext _localctx = new Subscript_tripletContext(Context, State);
		EnterRule(_localctx, 448, RULE_subscript_triplet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2990;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5663584287988032L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -881199745L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98938213795627007L) != 0)) {
				{
				State = 2989;
				subscript();
				}
			}

			State = 2992;
			Match(COLON);
			State = 2994;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5663584287988032L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -881199745L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98938213795627007L) != 0)) {
				{
				State = 2993;
				subscript();
				}
			}

			State = 2998;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2996;
				Match(COLON);
				State = 2997;
				stride();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_subscript_tripletContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATSYMBOL() { return GetToken(FortranParser.ATSYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(FortranParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(FortranParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_exprContext[] int_expr() {
			return GetRuleContexts<Int_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Int_exprContext int_expr(int i) {
			return GetRuleContext<Int_exprContext>(i);
		}
		public Multiple_subscript_tripletContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_subscript_triplet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterMultiple_subscript_triplet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitMultiple_subscript_triplet(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_subscript_tripletContext multiple_subscript_triplet() {
		Multiple_subscript_tripletContext _localctx = new Multiple_subscript_tripletContext(Context, State);
		EnterRule(_localctx, 450, RULE_multiple_subscript_triplet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3000;
			Match(ATSYMBOL);
			State = 3002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5663584287988032L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -881199745L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98938213795627007L) != 0)) {
				{
				State = 3001;
				int_expr();
				}
			}

			State = 3004;
			Match(COLON);
			State = 3006;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5663584287988032L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -881199745L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98938213795627007L) != 0)) {
				{
				State = 3005;
				int_expr();
				}
			}

			State = 3010;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 3008;
				Match(COLON);
				State = 3009;
				int_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		public StrideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stride; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterStride(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitStride(this);
		}
	}

	[RuleVersion(0)]
	public StrideContext stride() {
		StrideContext _localctx = new StrideContext(Context, State);
		EnterRule(_localctx, 452, RULE_stride);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3012;
			scalar_int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vector_subscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_exprContext int_expr() {
			return GetRuleContext<Int_exprContext>(0);
		}
		public Vector_subscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vector_subscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterVector_subscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitVector_subscript(this);
		}
	}

	[RuleVersion(0)]
	public Vector_subscriptContext vector_subscript() {
		Vector_subscriptContext _localctx = new Vector_subscriptContext(Context, State);
		EnterRule(_localctx, 454, RULE_vector_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3014;
			int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Image_selectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LbracketContext lbracket() {
			return GetRuleContext<LbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cosubscript_listContext cosubscript_list() {
			return GetRuleContext<Cosubscript_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RbracketContext rbracket() {
			return GetRuleContext<RbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Image_selector_spec_listContext image_selector_spec_list() {
			return GetRuleContext<Image_selector_spec_listContext>(0);
		}
		public Image_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_image_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImage_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImage_selector(this);
		}
	}

	[RuleVersion(0)]
	public Image_selectorContext image_selector() {
		Image_selectorContext _localctx = new Image_selectorContext(Context, State);
		EnterRule(_localctx, 456, RULE_image_selector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3016;
			lbracket();
			State = 3017;
			cosubscript_list();
			State = 3020;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3018;
				Match(COMMA);
				State = 3019;
				image_selector_spec_list();
				}
			}

			State = 3022;
			rbracket();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CosubscriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		public CosubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cosubscript; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCosubscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCosubscript(this);
		}
	}

	[RuleVersion(0)]
	public CosubscriptContext cosubscript() {
		CosubscriptContext _localctx = new CosubscriptContext(Context, State);
		EnterRule(_localctx, 458, RULE_cosubscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3024;
			scalar_int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Image_selector_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFY() { return GetToken(FortranParser.NOTIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Notify_variableContext notify_variable() {
			return GetRuleContext<Notify_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAT() { return GetToken(FortranParser.STAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stat_variableContext stat_variable() {
			return GetRuleContext<Stat_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEAM() { return GetToken(FortranParser.TEAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Team_valueContext team_value() {
			return GetRuleContext<Team_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEAMNUMBER() { return GetToken(FortranParser.TEAMNUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		public Image_selector_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_image_selector_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImage_selector_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImage_selector_spec(this);
		}
	}

	[RuleVersion(0)]
	public Image_selector_specContext image_selector_spec() {
		Image_selector_specContext _localctx = new Image_selector_specContext(Context, State);
		EnterRule(_localctx, 460, RULE_image_selector_spec);
		try {
			State = 3038;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOTIFY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3026;
				Match(NOTIFY);
				State = 3027;
				Match(ASSIGN);
				State = 3028;
				notify_variable();
				}
				break;
			case STAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3029;
				Match(STAT);
				State = 3030;
				Match(ASSIGN);
				State = 3031;
				stat_variable();
				}
				break;
			case TEAM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3032;
				Match(TEAM);
				State = 3033;
				Match(ASSIGN);
				State = 3034;
				team_value();
				}
				break;
			case TEAMNUMBER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3035;
				Match(TEAMNUMBER);
				State = 3036;
				Match(ASSIGN);
				State = 3037;
				scalar_int_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Allocate_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALLOCATE() { return GetToken(FortranParser.ALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Allocation_listContext allocation_list() {
			return GetRuleContext<Allocation_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alloc_opt_listContext alloc_opt_list() {
			return GetRuleContext<Alloc_opt_listContext>(0);
		}
		public Allocate_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocate_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAllocate_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAllocate_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Allocate_stmtContext allocate_stmt() {
		Allocate_stmtContext _localctx = new Allocate_stmtContext(Context, State);
		EnterRule(_localctx, 462, RULE_allocate_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3040;
			Match(ALLOCATE);
			State = 3041;
			Match(LPAREN);
			State = 3045;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
			case 1:
				{
				State = 3042;
				type_spec();
				State = 3043;
				Match(DOUBLECOLON);
				}
				break;
			}
			State = 3047;
			allocation_list();
			State = 3050;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3048;
				Match(COMMA);
				State = 3049;
				alloc_opt_list();
				}
			}

			State = 3052;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alloc_optContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRMSG() { return GetToken(FortranParser.ERRMSG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Errmsg_variableContext errmsg_variable() {
			return GetRuleContext<Errmsg_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOLD() { return GetToken(FortranParser.MOLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Source_exprContext source_expr() {
			return GetRuleContext<Source_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(FortranParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAT() { return GetToken(FortranParser.STAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stat_variableContext stat_variable() {
			return GetRuleContext<Stat_variableContext>(0);
		}
		public Alloc_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alloc_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAlloc_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAlloc_opt(this);
		}
	}

	[RuleVersion(0)]
	public Alloc_optContext alloc_opt() {
		Alloc_optContext _localctx = new Alloc_optContext(Context, State);
		EnterRule(_localctx, 464, RULE_alloc_opt);
		try {
			State = 3066;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ERRMSG:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3054;
				Match(ERRMSG);
				State = 3055;
				Match(ASSIGN);
				State = 3056;
				errmsg_variable();
				}
				break;
			case MOLD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3057;
				Match(MOLD);
				State = 3058;
				Match(ASSIGN);
				State = 3059;
				source_expr();
				}
				break;
			case SOURCE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3060;
				Match(SOURCE);
				State = 3061;
				Match(ASSIGN);
				State = 3062;
				source_expr();
				}
				break;
			case STAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3063;
				Match(STAT);
				State = 3064;
				Match(ASSIGN);
				State = 3065;
				stat_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Errmsg_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_default_char_variableContext scalar_default_char_variable() {
			return GetRuleContext<Scalar_default_char_variableContext>(0);
		}
		public Errmsg_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errmsg_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterErrmsg_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitErrmsg_variable(this);
		}
	}

	[RuleVersion(0)]
	public Errmsg_variableContext errmsg_variable() {
		Errmsg_variableContext _localctx = new Errmsg_variableContext(Context, State);
		EnterRule(_localctx, 466, RULE_errmsg_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3068;
			scalar_default_char_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Source_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Source_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSource_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSource_expr(this);
		}
	}

	[RuleVersion(0)]
	public Source_exprContext source_expr() {
		Source_exprContext _localctx = new Source_exprContext(Context, State);
		EnterRule(_localctx, 468, RULE_source_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3070;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Allocate_objectContext allocate_object() {
			return GetRuleContext<Allocate_objectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Allocate_shape_spec_listContext allocate_shape_spec_list() {
			return GetRuleContext<Allocate_shape_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LbracketContext lbracket() {
			return GetRuleContext<LbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Allocate_coarray_specContext allocate_coarray_spec() {
			return GetRuleContext<Allocate_coarray_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RbracketContext rbracket() {
			return GetRuleContext<RbracketContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Upper_bounds_exprContext upper_bounds_expr() {
			return GetRuleContext<Upper_bounds_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lower_bounds_exprContext lower_bounds_expr() {
			return GetRuleContext<Lower_bounds_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public AllocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAllocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAllocation(this);
		}
	}

	[RuleVersion(0)]
	public AllocationContext allocation() {
		AllocationContext _localctx = new AllocationContext(Context, State);
		EnterRule(_localctx, 470, RULE_allocation);
		int _la;
		try {
			State = 3099;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROGRAM:
			case END:
			case FUNCTION:
			case SUBROUTINE:
			case MODULE:
			case SUBMODULE:
			case BLOCK:
			case DATA:
			case INTRINSIC:
			case NONINTRINSIC:
			case OPERATOR:
			case READ:
			case FORMATTED:
			case UNFORMATTED:
			case WRITE:
			case ASSIGNMENT:
			case USE:
			case ONLY:
			case IMPORT:
			case NONE:
			case ALL:
			case KIND:
			case INTEGER:
			case LEN:
			case REAL:
			case DOUBLE:
			case PRECISION:
			case COMPLEX:
			case CHARACTER:
			case LOGICAL:
			case TYPE:
			case CLASS:
			case EXTERNAL:
			case IMPLICIT:
			case PARAMETER:
			case FORMAT:
			case BIND:
			case RESULT:
			case ENTRY:
			case STAT:
			case TEAM:
			case TEAMNUMBER:
			case RE:
			case IM:
			case SEQUENCE:
			case PRIVATE:
			case PROCEDURE:
			case NOPASS:
			case PASS:
			case POINTER:
			case ALLOCATABLE:
			case CODIMENSION:
			case CONTIGUOUS:
			case DIMENSION:
			case PUBLIC:
			case CONTAINS:
			case FINAL:
			case GENERIC:
			case DEFERRED:
			case NONOVERRIDABLE:
			case INTENT:
			case OPTIONAL:
			case PROTECTED:
			case SAVE:
			case IN:
			case OUT:
			case INOUT:
			case INTERFACE:
			case ABSTRACT:
			case ENUM:
			case ENUMERATOR:
			case ASYNCHRONOUS:
			case TARGET:
			case VALUE:
			case VOLATILE:
			case EQUIVALENCE:
			case COMMON:
			case NAMELIST:
			case EVENT:
			case WAIT:
			case UNTILCOUNT:
			case POST:
			case ERRMSG:
			case ERROR:
			case STOP:
			case QUIET:
			case ENDFILE:
			case DEALLOCATE:
			case CYCLE:
			case CONTINUE:
			case CLOSE:
			case UNIT:
			case IOSTAT:
			case IOMSG:
			case ERR:
			case STATUS:
			case CALL:
			case BACKSPACE:
			case ALLOCATE:
			case MOLD:
			case SOURCE:
			case OPEN:
			case ACCESS:
			case ACTION:
			case BLANK:
			case DECIMAL:
			case DELIM:
			case ENCODING:
			case FILE:
			case FORM:
			case NEWUNIT:
			case PAD:
			case POSITION:
			case RECL:
			case ROUND:
			case SIGN:
			case NULLIFY:
			case LOCK:
			case ACQUIREDLOCK:
			case INQUIRE:
			case IOLENGTH:
			case EXIST:
			case ID:
			case NAMED:
			case NEXTREC:
			case NUMBER:
			case OPENED:
			case PENDING:
			case POS:
			case READWRITE:
			case SEQUENTIAL:
			case SIZE:
			case STREAM:
			case IF:
			case GO:
			case TO:
			case NEWINDEX:
			case FLUSH:
			case FAIL:
			case IMAGE:
			case EXIT:
			case FORALL:
			case WHERE:
			case EOR:
			case UNLOCK:
			case SYNC:
			case MEMORY:
			case IMAGES:
			case REWIND:
			case RETURN:
			case FMT:
			case NML:
			case ADVANCE:
			case REC:
			case PRINT:
			case CRITICAL:
			case CHANGE:
			case SELECT:
			case CASE:
			case DEFAULT:
			case ASSOCIATE:
			case ELSEWHERE:
			case IS:
			case RANK:
			case ELSE:
			case THEN:
			case DO:
			case CONCURRENT:
			case WHILE:
			case SHARED:
			case LOCAL:
			case LOCALINIT:
			case RECURSIVE:
			case PURE:
			case NONRECURSIVE:
			case IMPURE:
			case ELEMENTAL:
			case NOTIFY:
			case TYPEOF:
			case CLASSOF:
			case ENUMERATION:
			case DIRECT:
			case LEADINGZERO:
			case REDUCE:
			case SIMPLE:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3072;
				allocate_object();
				State = 3077;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 3073;
					Match(LPAREN);
					State = 3074;
					allocate_shape_spec_list();
					State = 3075;
					Match(RPAREN);
					}
				}

				State = 3083;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACKET) {
					{
					State = 3079;
					lbracket();
					State = 3080;
					allocate_coarray_spec();
					State = 3081;
					rbracket();
					}
				}

				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3085;
				Match(LPAREN);
				State = 3089;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
				case 1:
					{
					State = 3086;
					lower_bounds_expr();
					State = 3087;
					Match(COLON);
					}
					break;
				}
				State = 3091;
				upper_bounds_expr();
				State = 3092;
				Match(RPAREN);
				State = 3097;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACKET) {
					{
					State = 3093;
					lbracket();
					State = 3094;
					allocate_coarray_spec();
					State = 3095;
					rbracket();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Allocate_objectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Structure_componentContext structure_component() {
			return GetRuleContext<Structure_componentContext>(0);
		}
		public Allocate_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocate_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAllocate_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAllocate_object(this);
		}
	}

	[RuleVersion(0)]
	public Allocate_objectContext allocate_object() {
		Allocate_objectContext _localctx = new Allocate_objectContext(Context, State);
		EnterRule(_localctx, 472, RULE_allocate_object);
		try {
			State = 3103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3101;
				variable_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3102;
				structure_component();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Allocate_shape_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Upper_bound_exprContext upper_bound_expr() {
			return GetRuleContext<Upper_bound_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lower_bound_exprContext lower_bound_expr() {
			return GetRuleContext<Lower_bound_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public Allocate_shape_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocate_shape_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAllocate_shape_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAllocate_shape_spec(this);
		}
	}

	[RuleVersion(0)]
	public Allocate_shape_specContext allocate_shape_spec() {
		Allocate_shape_specContext _localctx = new Allocate_shape_specContext(Context, State);
		EnterRule(_localctx, 474, RULE_allocate_shape_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				{
				State = 3105;
				lower_bound_expr();
				State = 3106;
				Match(COLON);
				}
				break;
			}
			State = 3110;
			upper_bound_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lower_bound_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		public Lower_bound_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lower_bound_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLower_bound_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLower_bound_expr(this);
		}
	}

	[RuleVersion(0)]
	public Lower_bound_exprContext lower_bound_expr() {
		Lower_bound_exprContext _localctx = new Lower_bound_exprContext(Context, State);
		EnterRule(_localctx, 476, RULE_lower_bound_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3112;
			scalar_int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lower_bounds_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_exprContext int_expr() {
			return GetRuleContext<Int_exprContext>(0);
		}
		public Lower_bounds_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lower_bounds_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLower_bounds_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLower_bounds_expr(this);
		}
	}

	[RuleVersion(0)]
	public Lower_bounds_exprContext lower_bounds_expr() {
		Lower_bounds_exprContext _localctx = new Lower_bounds_exprContext(Context, State);
		EnterRule(_localctx, 478, RULE_lower_bounds_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3114;
			int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Upper_bound_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		public Upper_bound_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upper_bound_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterUpper_bound_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitUpper_bound_expr(this);
		}
	}

	[RuleVersion(0)]
	public Upper_bound_exprContext upper_bound_expr() {
		Upper_bound_exprContext _localctx = new Upper_bound_exprContext(Context, State);
		EnterRule(_localctx, 480, RULE_upper_bound_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3116;
			scalar_int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Upper_bounds_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_exprContext int_expr() {
			return GetRuleContext<Int_exprContext>(0);
		}
		public Upper_bounds_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upper_bounds_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterUpper_bounds_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitUpper_bounds_expr(this);
		}
	}

	[RuleVersion(0)]
	public Upper_bounds_exprContext upper_bounds_expr() {
		Upper_bounds_exprContext _localctx = new Upper_bounds_exprContext(Context, State);
		EnterRule(_localctx, 482, RULE_upper_bounds_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3118;
			int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Allocate_coarray_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Allocate_coshape_spec_listContext allocate_coshape_spec_list() {
			return GetRuleContext<Allocate_coshape_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lower_bound_exprContext lower_bound_expr() {
			return GetRuleContext<Lower_bound_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public Allocate_coarray_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocate_coarray_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAllocate_coarray_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAllocate_coarray_spec(this);
		}
	}

	[RuleVersion(0)]
	public Allocate_coarray_specContext allocate_coarray_spec() {
		Allocate_coarray_specContext _localctx = new Allocate_coarray_specContext(Context, State);
		EnterRule(_localctx, 484, RULE_allocate_coarray_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
			case 1:
				{
				State = 3120;
				allocate_coshape_spec_list();
				State = 3121;
				Match(COMMA);
				}
				break;
			}
			State = 3128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5663584287988032L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -881199745L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98938213795627007L) != 0)) {
				{
				State = 3125;
				lower_bound_expr();
				State = 3126;
				Match(COLON);
				}
			}

			State = 3130;
			Match(ASTERIK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Allocate_coshape_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Upper_bound_exprContext upper_bound_expr() {
			return GetRuleContext<Upper_bound_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lower_bound_exprContext lower_bound_expr() {
			return GetRuleContext<Lower_bound_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public Allocate_coshape_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocate_coshape_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAllocate_coshape_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAllocate_coshape_spec(this);
		}
	}

	[RuleVersion(0)]
	public Allocate_coshape_specContext allocate_coshape_spec() {
		Allocate_coshape_specContext _localctx = new Allocate_coshape_specContext(Context, State);
		EnterRule(_localctx, 486, RULE_allocate_coshape_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
			case 1:
				{
				State = 3132;
				lower_bound_expr();
				State = 3133;
				Match(COLON);
				}
				break;
			}
			State = 3137;
			upper_bound_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nullify_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIFY() { return GetToken(FortranParser.NULLIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pointer_object_listContext pointer_object_list() {
			return GetRuleContext<Pointer_object_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Nullify_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullify_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterNullify_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitNullify_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Nullify_stmtContext nullify_stmt() {
		Nullify_stmtContext _localctx = new Nullify_stmtContext(Context, State);
		EnterRule(_localctx, 488, RULE_nullify_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3139;
			Match(NULLIFY);
			State = 3140;
			Match(LPAREN);
			State = 3141;
			pointer_object_list();
			State = 3142;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_objectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Structure_componentContext structure_component() {
			return GetRuleContext<Structure_componentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_pointer_nameContext proc_pointer_name() {
			return GetRuleContext<Proc_pointer_nameContext>(0);
		}
		public Pointer_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPointer_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPointer_object(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_objectContext pointer_object() {
		Pointer_objectContext _localctx = new Pointer_objectContext(Context, State);
		EnterRule(_localctx, 490, RULE_pointer_object);
		try {
			State = 3147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,246,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3144;
				variable_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3145;
				structure_component();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3146;
				proc_pointer_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Deallocate_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(FortranParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Allocate_object_listContext allocate_object_list() {
			return GetRuleContext<Allocate_object_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dealloc_opt_listContext dealloc_opt_list() {
			return GetRuleContext<Dealloc_opt_listContext>(0);
		}
		public Deallocate_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deallocate_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDeallocate_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDeallocate_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Deallocate_stmtContext deallocate_stmt() {
		Deallocate_stmtContext _localctx = new Deallocate_stmtContext(Context, State);
		EnterRule(_localctx, 492, RULE_deallocate_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3149;
			Match(DEALLOCATE);
			State = 3150;
			Match(LPAREN);
			State = 3151;
			allocate_object_list();
			State = 3154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3152;
				Match(COMMA);
				State = 3153;
				dealloc_opt_list();
				}
			}

			State = 3156;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dealloc_optContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAT() { return GetToken(FortranParser.STAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stat_variableContext stat_variable() {
			return GetRuleContext<Stat_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRMSG() { return GetToken(FortranParser.ERRMSG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Errmsg_variableContext errmsg_variable() {
			return GetRuleContext<Errmsg_variableContext>(0);
		}
		public Dealloc_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dealloc_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDealloc_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDealloc_opt(this);
		}
	}

	[RuleVersion(0)]
	public Dealloc_optContext dealloc_opt() {
		Dealloc_optContext _localctx = new Dealloc_optContext(Context, State);
		EnterRule(_localctx, 494, RULE_dealloc_opt);
		try {
			State = 3164;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3158;
				Match(STAT);
				State = 3159;
				Match(ASSIGN);
				State = 3160;
				stat_variable();
				}
				break;
			case ERRMSG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3161;
				Match(ERRMSG);
				State = 3162;
				Match(ASSIGN);
				State = 3163;
				errmsg_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_variableContext scalar_int_variable() {
			return GetRuleContext<Scalar_int_variableContext>(0);
		}
		public Stat_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterStat_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitStat_variable(this);
		}
	}

	[RuleVersion(0)]
	public Stat_variableContext stat_variable() {
		Stat_variableContext _localctx = new Stat_variableContext(Context, State);
		EnterRule(_localctx, 496, RULE_stat_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3166;
			scalar_int_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Literal_constantContext literal_constant() {
			return GetRuleContext<Literal_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_constructorContext array_constructor() {
			return GetRuleContext<Array_constructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Structure_constructorContext structure_constructor() {
			return GetRuleContext<Structure_constructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_constructorContext enum_constructor() {
			return GetRuleContext<Enum_constructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_constructorContext enumeration_constructor() {
			return GetRuleContext<Enumeration_constructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_referenceContext function_reference() {
			return GetRuleContext<Function_referenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_inquiryContext type_param_inquiry() {
			return GetRuleContext<Type_param_inquiryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_nameContext type_param_name() {
			return GetRuleContext<Type_param_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_exprContext conditional_expr() {
			return GetRuleContext<Conditional_exprContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 498, RULE_primary);
		try {
			State = 3182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3168;
				literal_constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3169;
				designator(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3170;
				array_constructor();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3171;
				structure_constructor();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3172;
				enum_constructor();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3173;
				enumeration_constructor();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3174;
				function_reference();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3175;
				type_param_inquiry();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3176;
				type_param_name();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3177;
				Match(LPAREN);
				State = 3178;
				expr();
				State = 3179;
				Match(RPAREN);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3181;
				conditional_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_logical_exprContext[] scalar_logical_expr() {
			return GetRuleContexts<Scalar_logical_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_logical_exprContext scalar_logical_expr(int i) {
			return GetRuleContext<Scalar_logical_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION() { return GetTokens(FortranParser.QUESTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION(int i) {
			return GetToken(FortranParser.QUESTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(FortranParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(FortranParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Conditional_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConditional_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConditional_expr(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_exprContext conditional_expr() {
		Conditional_exprContext _localctx = new Conditional_exprContext(Context, State);
		EnterRule(_localctx, 500, RULE_conditional_expr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3184;
			Match(LPAREN);
			State = 3185;
			scalar_logical_expr();
			State = 3186;
			Match(QUESTION);
			State = 3187;
			expr();
			State = 3195;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,250,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3188;
					Match(COLON);
					State = 3189;
					scalar_logical_expr();
					State = 3190;
					Match(QUESTION);
					State = 3191;
					expr();
					}
					} 
				}
				State = 3197;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,250,Context);
			}
			State = 3198;
			Match(COLON);
			State = 3199;
			expr();
			State = 3200;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Level_1_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Defined_unary_opContext defined_unary_op() {
			return GetRuleContext<Defined_unary_opContext>(0);
		}
		public Level_1_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level_1_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLevel_1_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLevel_1_expr(this);
		}
	}

	[RuleVersion(0)]
	public Level_1_exprContext level_1_expr() {
		Level_1_exprContext _localctx = new Level_1_exprContext(Context, State);
		EnterRule(_localctx, 502, RULE_level_1_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINEDUNARYBINARYOP) {
				{
				State = 3202;
				defined_unary_op();
				}
			}

			State = 3205;
			primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mult_operandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Level_1_exprContext level_1_expr() {
			return GetRuleContext<Level_1_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Power_opContext power_op() {
			return GetRuleContext<Power_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mult_operandContext mult_operand() {
			return GetRuleContext<Mult_operandContext>(0);
		}
		public Mult_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterMult_operand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitMult_operand(this);
		}
	}

	[RuleVersion(0)]
	public Mult_operandContext mult_operand() {
		Mult_operandContext _localctx = new Mult_operandContext(Context, State);
		EnterRule(_localctx, 504, RULE_mult_operand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3207;
			level_1_expr();
			State = 3211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POWER) {
				{
				State = 3208;
				power_op();
				State = 3209;
				mult_operand();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_operandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mult_operandContext[] mult_operand() {
			return GetRuleContexts<Mult_operandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mult_operandContext mult_operand(int i) {
			return GetRuleContext<Mult_operandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_operandContext[] add_operand() {
			return GetRuleContexts<Add_operandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_operandContext add_operand(int i) {
			return GetRuleContext<Add_operandContext>(i);
		}
		public Add_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAdd_operand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAdd_operand(this);
		}
	}

	[RuleVersion(0)]
	public Add_operandContext add_operand() {
		Add_operandContext _localctx = new Add_operandContext(Context, State);
		EnterRule(_localctx, 506, RULE_add_operand);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3213;
			mult_operand();
			State = 3219;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,253,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3214;
					add_operand();
					State = 3215;
					mult_operand();
					}
					} 
				}
				State = 3221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,253,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Level_2_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_operandContext[] add_operand() {
			return GetRuleContexts<Add_operandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_operandContext add_operand(int i) {
			return GetRuleContext<Add_operandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_opContext[] add_op() {
			return GetRuleContexts<Add_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_opContext add_op(int i) {
			return GetRuleContext<Add_opContext>(i);
		}
		public Level_2_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level_2_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLevel_2_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLevel_2_expr(this);
		}
	}

	[RuleVersion(0)]
	public Level_2_exprContext level_2_expr() {
		Level_2_exprContext _localctx = new Level_2_exprContext(Context, State);
		EnterRule(_localctx, 508, RULE_level_2_expr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3226;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROGRAM:
			case END:
			case FUNCTION:
			case LPAREN:
			case SUBROUTINE:
			case MODULE:
			case SUBMODULE:
			case BLOCK:
			case DATA:
			case INTRINSIC:
			case NONINTRINSIC:
			case OPERATOR:
			case READ:
			case FORMATTED:
			case UNFORMATTED:
			case WRITE:
			case ASSIGNMENT:
			case USE:
			case ONLY:
			case IMPORT:
			case NONE:
			case ALL:
			case KIND:
			case INTEGER:
			case LEN:
			case REAL:
			case DOUBLE:
			case PRECISION:
			case COMPLEX:
			case CHARACTER:
			case LOGICAL:
			case TYPE:
			case CLASS:
			case EXTERNAL:
			case IMPLICIT:
			case PARAMETER:
			case FORMAT:
			case BIND:
			case RESULT:
			case ENTRY:
			case DOT:
			case TRUE:
			case FALSE:
			case STAT:
			case TEAM:
			case TEAMNUMBER:
			case LBRACKET:
			case RE:
			case IM:
			case LPARENSLASH:
			case SEQUENCE:
			case PRIVATE:
			case PROCEDURE:
			case NOPASS:
			case PASS:
			case POINTER:
			case ALLOCATABLE:
			case CODIMENSION:
			case CONTIGUOUS:
			case DIMENSION:
			case PUBLIC:
			case CONTAINS:
			case FINAL:
			case GENERIC:
			case DEFERRED:
			case NONOVERRIDABLE:
			case INTENT:
			case OPTIONAL:
			case PROTECTED:
			case SAVE:
			case IN:
			case OUT:
			case INOUT:
			case INTERFACE:
			case ABSTRACT:
			case ENUM:
			case ENUMERATOR:
			case ASYNCHRONOUS:
			case TARGET:
			case VALUE:
			case VOLATILE:
			case EQUIVALENCE:
			case COMMON:
			case NAMELIST:
			case EVENT:
			case WAIT:
			case UNTILCOUNT:
			case POST:
			case ERRMSG:
			case ERROR:
			case STOP:
			case QUIET:
			case ENDFILE:
			case DEALLOCATE:
			case CYCLE:
			case CONTINUE:
			case CLOSE:
			case UNIT:
			case IOSTAT:
			case IOMSG:
			case ERR:
			case STATUS:
			case CALL:
			case BACKSPACE:
			case ALLOCATE:
			case MOLD:
			case SOURCE:
			case OPEN:
			case ACCESS:
			case ACTION:
			case BLANK:
			case DECIMAL:
			case DELIM:
			case ENCODING:
			case FILE:
			case FORM:
			case NEWUNIT:
			case PAD:
			case POSITION:
			case RECL:
			case ROUND:
			case SIGN:
			case NULLIFY:
			case LOCK:
			case ACQUIREDLOCK:
			case INQUIRE:
			case IOLENGTH:
			case EXIST:
			case ID:
			case NAMED:
			case NEXTREC:
			case NUMBER:
			case OPENED:
			case PENDING:
			case POS:
			case READWRITE:
			case SEQUENTIAL:
			case SIZE:
			case STREAM:
			case IF:
			case GO:
			case TO:
			case NEWINDEX:
			case FLUSH:
			case FAIL:
			case IMAGE:
			case EXIT:
			case FORALL:
			case WHERE:
			case EOR:
			case UNLOCK:
			case SYNC:
			case MEMORY:
			case IMAGES:
			case REWIND:
			case RETURN:
			case FMT:
			case NML:
			case ADVANCE:
			case REC:
			case PRINT:
			case CRITICAL:
			case CHANGE:
			case SELECT:
			case CASE:
			case DEFAULT:
			case ASSOCIATE:
			case ELSEWHERE:
			case IS:
			case RANK:
			case ELSE:
			case THEN:
			case DO:
			case CONCURRENT:
			case WHILE:
			case SHARED:
			case LOCAL:
			case LOCALINIT:
			case RECURSIVE:
			case PURE:
			case NONRECURSIVE:
			case IMPURE:
			case ELEMENTAL:
			case NOTIFY:
			case TYPEOF:
			case CLASSOF:
			case ENUMERATION:
			case DIRECT:
			case LEADINGZERO:
			case REDUCE:
			case SIMPLE:
			case DEFINEDUNARYBINARYOP:
			case BINARY_CONSTANT:
			case OCTAL_CONSTANT:
			case HEX_CONSTANT:
			case SQUOTE_REP_CHAR:
			case DQUOTE_REP_CHAR:
			case NAME:
			case DIGITSTRING:
				{
				State = 3222;
				add_operand();
				}
				break;
			case PLUS:
			case MINUS:
				{
				State = 3223;
				add_op();
				State = 3224;
				add_operand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,255,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3228;
					add_op();
					State = 3229;
					add_operand();
					}
					} 
				}
				State = 3235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,255,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Level_3_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Level_2_exprContext[] level_2_expr() {
			return GetRuleContexts<Level_2_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Level_2_exprContext level_2_expr(int i) {
			return GetRuleContext<Level_2_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concat_opContext[] concat_op() {
			return GetRuleContexts<Concat_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concat_opContext concat_op(int i) {
			return GetRuleContext<Concat_opContext>(i);
		}
		public Level_3_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level_3_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLevel_3_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLevel_3_expr(this);
		}
	}

	[RuleVersion(0)]
	public Level_3_exprContext level_3_expr() {
		Level_3_exprContext _localctx = new Level_3_exprContext(Context, State);
		EnterRule(_localctx, 510, RULE_level_3_expr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3236;
			level_2_expr();
			State = 3242;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3237;
					concat_op();
					State = 3238;
					level_2_expr();
					}
					} 
				}
				State = 3244;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Level_4_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Level_3_exprContext[] level_3_expr() {
			return GetRuleContexts<Level_3_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Level_3_exprContext level_3_expr(int i) {
			return GetRuleContext<Level_3_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rel_opContext rel_op() {
			return GetRuleContext<Rel_opContext>(0);
		}
		public Level_4_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level_4_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLevel_4_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLevel_4_expr(this);
		}
	}

	[RuleVersion(0)]
	public Level_4_exprContext level_4_expr() {
		Level_4_exprContext _localctx = new Level_4_exprContext(Context, State);
		EnterRule(_localctx, 512, RULE_level_4_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
			case 1:
				{
				State = 3245;
				level_3_expr();
				State = 3246;
				rel_op();
				}
				break;
			}
			State = 3250;
			level_3_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_operandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Level_4_exprContext level_4_expr() {
			return GetRuleContext<Level_4_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Not_opContext not_op() {
			return GetRuleContext<Not_opContext>(0);
		}
		public And_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAnd_operand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAnd_operand(this);
		}
	}

	[RuleVersion(0)]
	public And_operandContext and_operand() {
		And_operandContext _localctx = new And_operandContext(Context, State);
		EnterRule(_localctx, 514, RULE_and_operand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 3252;
				not_op();
				}
			}

			State = 3255;
			level_4_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_operandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_operandContext[] and_operand() {
			return GetRuleContexts<And_operandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_operandContext and_operand(int i) {
			return GetRuleContext<And_operandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_opContext[] and_op() {
			return GetRuleContexts<And_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_opContext and_op(int i) {
			return GetRuleContext<And_opContext>(i);
		}
		public Or_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterOr_operand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitOr_operand(this);
		}
	}

	[RuleVersion(0)]
	public Or_operandContext or_operand() {
		Or_operandContext _localctx = new Or_operandContext(Context, State);
		EnterRule(_localctx, 516, RULE_or_operand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3257;
			and_operand();
			State = 3263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 3258;
				and_op();
				State = 3259;
				and_operand();
				}
				}
				State = 3265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equiv_operandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_operandContext[] or_operand() {
			return GetRuleContexts<Or_operandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_operandContext or_operand(int i) {
			return GetRuleContext<Or_operandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_opContext[] or_op() {
			return GetRuleContexts<Or_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_opContext or_op(int i) {
			return GetRuleContext<Or_opContext>(i);
		}
		public Equiv_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equiv_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEquiv_operand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEquiv_operand(this);
		}
	}

	[RuleVersion(0)]
	public Equiv_operandContext equiv_operand() {
		Equiv_operandContext _localctx = new Equiv_operandContext(Context, State);
		EnterRule(_localctx, 518, RULE_equiv_operand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3266;
			or_operand();
			State = 3272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 3267;
				or_op();
				State = 3268;
				or_operand();
				}
				}
				State = 3274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Level_5_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Equiv_operandContext[] equiv_operand() {
			return GetRuleContexts<Equiv_operandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equiv_operandContext equiv_operand(int i) {
			return GetRuleContext<Equiv_operandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equiv_opContext[] equiv_op() {
			return GetRuleContexts<Equiv_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equiv_opContext equiv_op(int i) {
			return GetRuleContext<Equiv_opContext>(i);
		}
		public Level_5_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_level_5_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLevel_5_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLevel_5_expr(this);
		}
	}

	[RuleVersion(0)]
	public Level_5_exprContext level_5_expr() {
		Level_5_exprContext _localctx = new Level_5_exprContext(Context, State);
		EnterRule(_localctx, 520, RULE_level_5_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3275;
			equiv_operand();
			State = 3281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EQV || _la==NEQV) {
				{
				{
				State = 3276;
				equiv_op();
				State = 3277;
				equiv_operand();
				}
				}
				State = 3283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Level_5_exprContext[] level_5_expr() {
			return GetRuleContexts<Level_5_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Level_5_exprContext level_5_expr(int i) {
			return GetRuleContext<Level_5_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Defined_binary_opContext[] defined_binary_op() {
			return GetRuleContexts<Defined_binary_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Defined_binary_opContext defined_binary_op(int i) {
			return GetRuleContext<Defined_binary_opContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 522, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3284;
			level_5_expr();
			State = 3290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFINEDUNARYBINARYOP) {
				{
				{
				State = 3285;
				defined_binary_op();
				State = 3286;
				level_5_expr();
				}
				}
				State = 3292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Logical_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLogical_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLogical_expr(this);
		}
	}

	[RuleVersion(0)]
	public Logical_exprContext logical_expr() {
		Logical_exprContext _localctx = new Logical_exprContext(Context, State);
		EnterRule(_localctx, 524, RULE_logical_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3293;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_char_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Default_char_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_char_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDefault_char_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDefault_char_expr(this);
		}
	}

	[RuleVersion(0)]
	public Default_char_exprContext default_char_expr() {
		Default_char_exprContext _localctx = new Default_char_exprContext(Context, State);
		EnterRule(_localctx, 526, RULE_default_char_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3295;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Int_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInt_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInt_expr(this);
		}
	}

	[RuleVersion(0)]
	public Int_exprContext int_expr() {
		Int_exprContext _localctx = new Int_exprContext(Context, State);
		EnterRule(_localctx, 528, RULE_int_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3297;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Numeric_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterNumeric_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitNumeric_expr(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_exprContext numeric_expr() {
		Numeric_exprContext _localctx = new Numeric_exprContext(Context, State);
		EnterRule(_localctx, 530, RULE_numeric_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3299;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specification_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		public Specification_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specification_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSpecification_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSpecification_expr(this);
		}
	}

	[RuleVersion(0)]
	public Specification_exprContext specification_expr() {
		Specification_exprContext _localctx = new Specification_exprContext(Context, State);
		EnterRule(_localctx, 532, RULE_specification_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3301;
			scalar_int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Constant_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConstant_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConstant_expr(this);
		}
	}

	[RuleVersion(0)]
	public Constant_exprContext constant_expr() {
		Constant_exprContext _localctx = new Constant_exprContext(Context, State);
		EnterRule(_localctx, 534, RULE_constant_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3303;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_char_constant_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Default_char_exprContext default_char_expr() {
			return GetRuleContext<Default_char_exprContext>(0);
		}
		public Default_char_constant_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_char_constant_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDefault_char_constant_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDefault_char_constant_expr(this);
		}
	}

	[RuleVersion(0)]
	public Default_char_constant_exprContext default_char_constant_expr() {
		Default_char_constant_exprContext _localctx = new Default_char_constant_exprContext(Context, State);
		EnterRule(_localctx, 536, RULE_default_char_constant_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3305;
			default_char_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_constant_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_exprContext int_expr() {
			return GetRuleContext<Int_exprContext>(0);
		}
		public Int_constant_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_constant_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInt_constant_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInt_constant_expr(this);
		}
	}

	[RuleVersion(0)]
	public Int_constant_exprContext int_constant_expr() {
		Int_constant_exprContext _localctx = new Int_constant_exprContext(Context, State);
		EnterRule(_localctx, 538, RULE_int_constant_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3307;
			int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Assignment_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAssignment_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAssignment_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_stmtContext assignment_stmt() {
		Assignment_stmtContext _localctx = new Assignment_stmtContext(Context, State);
		EnterRule(_localctx, 540, RULE_assignment_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3309;
			variable(0);
			State = 3310;
			Match(ASSIGN);
			State = 3311;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_assignment_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_pointer_objectContext data_pointer_object() {
			return GetRuleContext<Data_pointer_objectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLIES() { return GetToken(FortranParser.IMPLIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_targetContext data_target() {
			return GetRuleContext<Data_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bounds_spec_listContext bounds_spec_list() {
			return GetRuleContext<Bounds_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lower_bounds_exprContext lower_bounds_expr() {
			return GetRuleContext<Lower_bounds_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bounds_remapping_listContext bounds_remapping_list() {
			return GetRuleContext<Bounds_remapping_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Upper_bounds_exprContext upper_bounds_expr() {
			return GetRuleContext<Upper_bounds_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_pointer_objectContext proc_pointer_object() {
			return GetRuleContext<Proc_pointer_objectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_targetContext proc_target() {
			return GetRuleContext<Proc_targetContext>(0);
		}
		public Pointer_assignment_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_assignment_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPointer_assignment_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPointer_assignment_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_assignment_stmtContext pointer_assignment_stmt() {
		Pointer_assignment_stmtContext _localctx = new Pointer_assignment_stmtContext(Context, State);
		EnterRule(_localctx, 542, RULE_pointer_assignment_stmt);
		int _la;
		try {
			State = 3351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3313;
				data_pointer_object();
				State = 3318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 3314;
					Match(LPAREN);
					State = 3315;
					bounds_spec_list();
					State = 3316;
					Match(RPAREN);
					}
				}

				State = 3320;
				Match(IMPLIES);
				State = 3321;
				data_target();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3323;
				data_pointer_object();
				State = 3324;
				Match(LPAREN);
				State = 3325;
				lower_bounds_expr();
				State = 3326;
				Match(COLON);
				State = 3327;
				Match(RPAREN);
				State = 3328;
				Match(IMPLIES);
				State = 3329;
				data_target();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3331;
				data_pointer_object();
				State = 3332;
				Match(LPAREN);
				State = 3333;
				bounds_remapping_list();
				State = 3334;
				Match(RPAREN);
				State = 3335;
				Match(IMPLIES);
				State = 3336;
				data_target();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3338;
				data_pointer_object();
				State = 3339;
				Match(LPAREN);
				State = 3340;
				lower_bounds_expr();
				State = 3341;
				Match(COLON);
				State = 3342;
				upper_bounds_expr();
				State = 3343;
				Match(RPAREN);
				State = 3344;
				Match(IMPLIES);
				State = 3345;
				data_target();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3347;
				proc_pointer_object();
				State = 3348;
				Match(IMPLIES);
				State = 3349;
				proc_target();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_pointer_objectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_variableContext scalar_variable() {
			return GetRuleContext<Scalar_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(FortranParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Data_pointer_component_nameContext data_pointer_component_name() {
			return GetRuleContext<Data_pointer_component_nameContext>(0);
		}
		public Data_pointer_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_pointer_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_pointer_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_pointer_object(this);
		}
	}

	[RuleVersion(0)]
	public Data_pointer_objectContext data_pointer_object() {
		Data_pointer_objectContext _localctx = new Data_pointer_objectContext(Context, State);
		EnterRule(_localctx, 544, RULE_data_pointer_object);
		try {
			State = 3358;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3353;
				variable_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3354;
				scalar_variable();
				State = 3355;
				Match(PERCENT);
				State = 3356;
				data_pointer_component_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bounds_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Lower_bound_exprContext lower_bound_expr() {
			return GetRuleContext<Lower_bound_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public Bounds_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bounds_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBounds_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBounds_spec(this);
		}
	}

	[RuleVersion(0)]
	public Bounds_specContext bounds_spec() {
		Bounds_specContext _localctx = new Bounds_specContext(Context, State);
		EnterRule(_localctx, 546, RULE_bounds_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3360;
			lower_bound_expr();
			State = 3361;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bounds_remappingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Lower_bound_exprContext lower_bound_expr() {
			return GetRuleContext<Lower_bound_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Upper_bound_exprContext upper_bound_expr() {
			return GetRuleContext<Upper_bound_exprContext>(0);
		}
		public Bounds_remappingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bounds_remapping; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBounds_remapping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBounds_remapping(this);
		}
	}

	[RuleVersion(0)]
	public Bounds_remappingContext bounds_remapping() {
		Bounds_remappingContext _localctx = new Bounds_remappingContext(Context, State);
		EnterRule(_localctx, 548, RULE_bounds_remapping);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3363;
			lower_bound_expr();
			State = 3364;
			Match(COLON);
			State = 3365;
			upper_bound_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Data_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_target(this);
		}
	}

	[RuleVersion(0)]
	public Data_targetContext data_target() {
		Data_targetContext _localctx = new Data_targetContext(Context, State);
		EnterRule(_localctx, 550, RULE_data_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3367;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_pointer_objectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Proc_pointer_nameContext proc_pointer_name() {
			return GetRuleContext<Proc_pointer_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_component_refContext proc_component_ref() {
			return GetRuleContext<Proc_component_refContext>(0);
		}
		public Proc_pointer_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_pointer_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProc_pointer_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProc_pointer_object(this);
		}
	}

	[RuleVersion(0)]
	public Proc_pointer_objectContext proc_pointer_object() {
		Proc_pointer_objectContext _localctx = new Proc_pointer_objectContext(Context, State);
		EnterRule(_localctx, 552, RULE_proc_pointer_object);
		try {
			State = 3371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3369;
				proc_pointer_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3370;
				proc_component_ref();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_component_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_variableContext scalar_variable() {
			return GetRuleContext<Scalar_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(FortranParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_component_nameContext procedure_component_name() {
			return GetRuleContext<Procedure_component_nameContext>(0);
		}
		public Proc_component_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_component_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProc_component_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProc_component_ref(this);
		}
	}

	[RuleVersion(0)]
	public Proc_component_refContext proc_component_ref() {
		Proc_component_refContext _localctx = new Proc_component_refContext(Context, State);
		EnterRule(_localctx, 554, RULE_proc_component_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3373;
			scalar_variable();
			State = 3374;
			Match(PERCENT);
			State = 3375;
			procedure_component_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_component_refContext proc_component_ref() {
			return GetRuleContext<Proc_component_refContext>(0);
		}
		public Proc_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProc_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProc_target(this);
		}
	}

	[RuleVersion(0)]
	public Proc_targetContext proc_target() {
		Proc_targetContext _localctx = new Proc_targetContext(Context, State);
		EnterRule(_localctx, 556, RULE_proc_target);
		try {
			State = 3380;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,267,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3377;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3378;
				procedure_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3379;
				proc_component_ref();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(FortranParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Mask_exprContext mask_expr() {
			return GetRuleContext<Mask_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Where_assignment_stmtContext where_assignment_stmt() {
			return GetRuleContext<Where_assignment_stmtContext>(0);
		}
		public Where_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterWhere_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitWhere_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Where_stmtContext where_stmt() {
		Where_stmtContext _localctx = new Where_stmtContext(Context, State);
		EnterRule(_localctx, 558, RULE_where_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3382;
			Match(WHERE);
			State = 3383;
			Match(LPAREN);
			State = 3384;
			mask_expr();
			State = 3385;
			Match(RPAREN);
			State = 3386;
			where_assignment_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Where_construct_stmtContext where_construct_stmt() {
			return GetRuleContext<Where_construct_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_where_stmtContext end_where_stmt() {
			return GetRuleContext<End_where_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_body_constructContext[] where_body_construct() {
			return GetRuleContexts<Where_body_constructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_body_constructContext where_body_construct(int i) {
			return GetRuleContext<Where_body_constructContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Masked_elsewhere_stmtContext[] masked_elsewhere_stmt() {
			return GetRuleContexts<Masked_elsewhere_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Masked_elsewhere_stmtContext masked_elsewhere_stmt(int i) {
			return GetRuleContext<Masked_elsewhere_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elsewhere_stmtContext elsewhere_stmt() {
			return GetRuleContext<Elsewhere_stmtContext>(0);
		}
		public Where_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterWhere_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitWhere_construct(this);
		}
	}

	[RuleVersion(0)]
	public Where_constructContext where_construct() {
		Where_constructContext _localctx = new Where_constructContext(Context, State);
		EnterRule(_localctx, 560, RULE_where_construct);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3388;
			where_construct_stmt();
			State = 3392;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,268,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3389;
					where_body_construct();
					}
					} 
				}
				State = 3394;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,268,Context);
			}
			State = 3404;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,270,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3395;
					masked_elsewhere_stmt();
					State = 3399;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,269,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3396;
							where_body_construct();
							}
							} 
						}
						State = 3401;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,269,Context);
					}
					}
					} 
				}
				State = 3406;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,270,Context);
			}
			State = 3414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSEWHERE) {
				{
				State = 3407;
				elsewhere_stmt();
				State = 3411;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,271,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3408;
						where_body_construct();
						}
						} 
					}
					State = 3413;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,271,Context);
				}
				}
			}

			State = 3416;
			end_where_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_construct_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(FortranParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Mask_exprContext mask_expr() {
			return GetRuleContext<Mask_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Where_construct_nameContext where_construct_name() {
			return GetRuleContext<Where_construct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public Where_construct_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_construct_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterWhere_construct_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitWhere_construct_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Where_construct_stmtContext where_construct_stmt() {
		Where_construct_stmtContext _localctx = new Where_construct_stmtContext(Context, State);
		EnterRule(_localctx, 562, RULE_where_construct_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
			case 1:
				{
				State = 3418;
				where_construct_name();
				State = 3419;
				Match(COLON);
				}
				break;
			}
			State = 3423;
			Match(WHERE);
			State = 3424;
			Match(LPAREN);
			State = 3425;
			mask_expr();
			State = 3426;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_body_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Where_assignment_stmtContext where_assignment_stmt() {
			return GetRuleContext<Where_assignment_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_stmtContext where_stmt() {
			return GetRuleContext<Where_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_constructContext where_construct() {
			return GetRuleContext<Where_constructContext>(0);
		}
		public Where_body_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_body_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterWhere_body_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitWhere_body_construct(this);
		}
	}

	[RuleVersion(0)]
	public Where_body_constructContext where_body_construct() {
		Where_body_constructContext _localctx = new Where_body_constructContext(Context, State);
		EnterRule(_localctx, 564, RULE_where_body_construct);
		try {
			State = 3431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3428;
				where_assignment_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3429;
				where_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3430;
				where_construct();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_assignment_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_stmtContext assignment_stmt() {
			return GetRuleContext<Assignment_stmtContext>(0);
		}
		public Where_assignment_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_assignment_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterWhere_assignment_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitWhere_assignment_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Where_assignment_stmtContext where_assignment_stmt() {
		Where_assignment_stmtContext _localctx = new Where_assignment_stmtContext(Context, State);
		EnterRule(_localctx, 566, RULE_where_assignment_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3433;
			assignment_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mask_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_exprContext logical_expr() {
			return GetRuleContext<Logical_exprContext>(0);
		}
		public Mask_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mask_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterMask_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitMask_expr(this);
		}
	}

	[RuleVersion(0)]
	public Mask_exprContext mask_expr() {
		Mask_exprContext _localctx = new Mask_exprContext(Context, State);
		EnterRule(_localctx, 568, RULE_mask_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3435;
			logical_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Masked_elsewhere_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEWHERE() { return GetToken(FortranParser.ELSEWHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Mask_exprContext mask_expr() {
			return GetRuleContext<Mask_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Where_construct_nameContext where_construct_name() {
			return GetRuleContext<Where_construct_nameContext>(0);
		}
		public Masked_elsewhere_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masked_elsewhere_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterMasked_elsewhere_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitMasked_elsewhere_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Masked_elsewhere_stmtContext masked_elsewhere_stmt() {
		Masked_elsewhere_stmtContext _localctx = new Masked_elsewhere_stmtContext(Context, State);
		EnterRule(_localctx, 570, RULE_masked_elsewhere_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3437;
			Match(ELSEWHERE);
			State = 3438;
			Match(LPAREN);
			State = 3439;
			mask_expr();
			State = 3440;
			Match(RPAREN);
			State = 3442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				{
				State = 3441;
				where_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elsewhere_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEWHERE() { return GetToken(FortranParser.ELSEWHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Where_construct_nameContext where_construct_name() {
			return GetRuleContext<Where_construct_nameContext>(0);
		}
		public Elsewhere_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsewhere_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterElsewhere_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitElsewhere_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Elsewhere_stmtContext elsewhere_stmt() {
		Elsewhere_stmtContext _localctx = new Elsewhere_stmtContext(Context, State);
		EnterRule(_localctx, 572, RULE_elsewhere_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3444;
			Match(ELSEWHERE);
			State = 3446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				{
				State = 3445;
				where_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_where_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(FortranParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Where_construct_nameContext where_construct_name() {
			return GetRuleContext<Where_construct_nameContext>(0);
		}
		public End_where_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_where_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_where_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_where_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_where_stmtContext end_where_stmt() {
		End_where_stmtContext _localctx = new End_where_stmtContext(Context, State);
		EnterRule(_localctx, 574, RULE_end_where_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3448;
			Match(END);
			State = 3449;
			Match(WHERE);
			State = 3451;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				{
				State = 3450;
				where_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Forall_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Forall_construct_stmtContext forall_construct_stmt() {
			return GetRuleContext<Forall_construct_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_forall_stmtContext end_forall_stmt() {
			return GetRuleContext<End_forall_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Forall_body_constructContext[] forall_body_construct() {
			return GetRuleContexts<Forall_body_constructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Forall_body_constructContext forall_body_construct(int i) {
			return GetRuleContext<Forall_body_constructContext>(i);
		}
		public Forall_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forall_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterForall_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitForall_construct(this);
		}
	}

	[RuleVersion(0)]
	public Forall_constructContext forall_construct() {
		Forall_constructContext _localctx = new Forall_constructContext(Context, State);
		EnterRule(_localctx, 576, RULE_forall_construct);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3453;
			forall_construct_stmt();
			State = 3457;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,278,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3454;
					forall_body_construct();
					}
					} 
				}
				State = 3459;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,278,Context);
			}
			State = 3460;
			end_forall_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Forall_construct_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORALL() { return GetToken(FortranParser.FORALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_headerContext concurrent_header() {
			return GetRuleContext<Concurrent_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Forall_construct_nameContext forall_construct_name() {
			return GetRuleContext<Forall_construct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public Forall_construct_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forall_construct_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterForall_construct_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitForall_construct_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Forall_construct_stmtContext forall_construct_stmt() {
		Forall_construct_stmtContext _localctx = new Forall_construct_stmtContext(Context, State);
		EnterRule(_localctx, 578, RULE_forall_construct_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
			case 1:
				{
				State = 3462;
				forall_construct_name();
				State = 3463;
				Match(COLON);
				}
				break;
			}
			State = 3467;
			Match(FORALL);
			State = 3468;
			concurrent_header();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Forall_body_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Forall_assignment_stmtContext forall_assignment_stmt() {
			return GetRuleContext<Forall_assignment_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_stmtContext where_stmt() {
			return GetRuleContext<Where_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_constructContext where_construct() {
			return GetRuleContext<Where_constructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Forall_constructContext forall_construct() {
			return GetRuleContext<Forall_constructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Forall_stmtContext forall_stmt() {
			return GetRuleContext<Forall_stmtContext>(0);
		}
		public Forall_body_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forall_body_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterForall_body_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitForall_body_construct(this);
		}
	}

	[RuleVersion(0)]
	public Forall_body_constructContext forall_body_construct() {
		Forall_body_constructContext _localctx = new Forall_body_constructContext(Context, State);
		EnterRule(_localctx, 580, RULE_forall_body_construct);
		try {
			State = 3475;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3470;
				forall_assignment_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3471;
				where_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3472;
				where_construct();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3473;
				forall_construct();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3474;
				forall_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Forall_assignment_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_stmtContext assignment_stmt() {
			return GetRuleContext<Assignment_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pointer_assignment_stmtContext pointer_assignment_stmt() {
			return GetRuleContext<Pointer_assignment_stmtContext>(0);
		}
		public Forall_assignment_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forall_assignment_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterForall_assignment_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitForall_assignment_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Forall_assignment_stmtContext forall_assignment_stmt() {
		Forall_assignment_stmtContext _localctx = new Forall_assignment_stmtContext(Context, State);
		EnterRule(_localctx, 582, RULE_forall_assignment_stmt);
		try {
			State = 3479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3477;
				assignment_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3478;
				pointer_assignment_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_forall_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORALL() { return GetToken(FortranParser.FORALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Forall_construct_nameContext forall_construct_name() {
			return GetRuleContext<Forall_construct_nameContext>(0);
		}
		public End_forall_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_forall_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_forall_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_forall_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_forall_stmtContext end_forall_stmt() {
		End_forall_stmtContext _localctx = new End_forall_stmtContext(Context, State);
		EnterRule(_localctx, 584, RULE_end_forall_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3481;
			Match(END);
			State = 3482;
			Match(FORALL);
			State = 3484;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
			case 1:
				{
				State = 3483;
				forall_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Forall_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORALL() { return GetToken(FortranParser.FORALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_headerContext concurrent_header() {
			return GetRuleContext<Concurrent_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Forall_assignment_stmtContext forall_assignment_stmt() {
			return GetRuleContext<Forall_assignment_stmtContext>(0);
		}
		public Forall_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forall_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterForall_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitForall_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Forall_stmtContext forall_stmt() {
		Forall_stmtContext _localctx = new Forall_stmtContext(Context, State);
		EnterRule(_localctx, 586, RULE_forall_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3486;
			Match(FORALL);
			State = 3487;
			concurrent_header();
			State = 3488;
			forall_assignment_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Execution_part_constructContext[] execution_part_construct() {
			return GetRuleContexts<Execution_part_constructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execution_part_constructContext execution_part_construct(int i) {
			return GetRuleContext<Execution_part_constructContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 588, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3493;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,283,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3490;
					execution_part_construct();
					}
					} 
				}
				State = 3495;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,283,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Associate_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Associate_stmtContext associate_stmt() {
			return GetRuleContext<Associate_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_associate_stmtContext end_associate_stmt() {
			return GetRuleContext<End_associate_stmtContext>(0);
		}
		public Associate_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associate_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAssociate_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAssociate_construct(this);
		}
	}

	[RuleVersion(0)]
	public Associate_constructContext associate_construct() {
		Associate_constructContext _localctx = new Associate_constructContext(Context, State);
		EnterRule(_localctx, 590, RULE_associate_construct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3496;
			associate_stmt();
			State = 3497;
			block();
			State = 3498;
			end_associate_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Associate_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSOCIATE() { return GetToken(FortranParser.ASSOCIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Association_listContext association_list() {
			return GetRuleContext<Association_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Associate_construct_nameContext associate_construct_name() {
			return GetRuleContext<Associate_construct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public Associate_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associate_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAssociate_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAssociate_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Associate_stmtContext associate_stmt() {
		Associate_stmtContext _localctx = new Associate_stmtContext(Context, State);
		EnterRule(_localctx, 592, RULE_associate_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
			case 1:
				{
				State = 3500;
				associate_construct_name();
				State = 3501;
				Match(COLON);
				}
				break;
			}
			State = 3505;
			Match(ASSOCIATE);
			State = 3506;
			Match(LPAREN);
			State = 3507;
			association_list();
			State = 3508;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Associate_nameContext associate_name() {
			return GetRuleContext<Associate_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLIES() { return GetToken(FortranParser.IMPLIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public AssociationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_association; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAssociation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAssociation(this);
		}
	}

	[RuleVersion(0)]
	public AssociationContext association() {
		AssociationContext _localctx = new AssociationContext(Context, State);
		EnterRule(_localctx, 594, RULE_association);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3510;
			associate_name();
			State = 3511;
			Match(IMPLIES);
			State = 3512;
			selector();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSelector(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 596, RULE_selector);
		try {
			State = 3516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3514;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3515;
				variable(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_associate_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSOCIATE() { return GetToken(FortranParser.ASSOCIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Associate_construct_nameContext associate_construct_name() {
			return GetRuleContext<Associate_construct_nameContext>(0);
		}
		public End_associate_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_associate_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_associate_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_associate_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_associate_stmtContext end_associate_stmt() {
		End_associate_stmtContext _localctx = new End_associate_stmtContext(Context, State);
		EnterRule(_localctx, 598, RULE_end_associate_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3518;
			Match(END);
			State = 3519;
			Match(ASSOCIATE);
			State = 3521;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
			case 1:
				{
				State = 3520;
				associate_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Block_stmtContext block_stmt() {
			return GetRuleContext<Block_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_block_stmtContext end_block_stmt() {
			return GetRuleContext<End_block_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_specification_partContext block_specification_part() {
			return GetRuleContext<Block_specification_partContext>(0);
		}
		public Block_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBlock_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBlock_construct(this);
		}
	}

	[RuleVersion(0)]
	public Block_constructContext block_construct() {
		Block_constructContext _localctx = new Block_constructContext(Context, State);
		EnterRule(_localctx, 600, RULE_block_construct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3523;
			block_stmt();
			State = 3525;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				{
				State = 3524;
				block_specification_part();
				}
				break;
			}
			State = 3527;
			block();
			State = 3528;
			end_block_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(FortranParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_construct_nameContext block_construct_name() {
			return GetRuleContext<Block_construct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public Block_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBlock_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBlock_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Block_stmtContext block_stmt() {
		Block_stmtContext _localctx = new Block_stmtContext(Context, State);
		EnterRule(_localctx, 602, RULE_block_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				{
				State = 3530;
				block_construct_name();
				State = 3531;
				Match(COLON);
				}
				break;
			}
			State = 3535;
			Match(BLOCK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_specification_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Use_stmtContext[] use_stmt() {
			return GetRuleContexts<Use_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_stmtContext use_stmt(int i) {
			return GetRuleContext<Use_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext[] import_stmt() {
			return GetRuleContexts<Import_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext import_stmt(int i) {
			return GetRuleContext<Import_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_constructContext[] declaration_construct() {
			return GetRuleContexts<Declaration_constructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_constructContext declaration_construct(int i) {
			return GetRuleContext<Declaration_constructContext>(i);
		}
		public Block_specification_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_specification_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBlock_specification_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBlock_specification_part(this);
		}
	}

	[RuleVersion(0)]
	public Block_specification_partContext block_specification_part() {
		Block_specification_partContext _localctx = new Block_specification_partContext(Context, State);
		EnterRule(_localctx, 604, RULE_block_specification_part);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3540;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,289,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3537;
					use_stmt();
					}
					} 
				}
				State = 3542;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,289,Context);
			}
			State = 3546;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,290,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3543;
					import_stmt();
					}
					} 
				}
				State = 3548;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,290,Context);
			}
			State = 3552;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,291,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3549;
					declaration_construct();
					}
					} 
				}
				State = 3554;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,291,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_block_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(FortranParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_construct_nameContext block_construct_name() {
			return GetRuleContext<Block_construct_nameContext>(0);
		}
		public End_block_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_block_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_block_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_block_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_block_stmtContext end_block_stmt() {
		End_block_stmtContext _localctx = new End_block_stmtContext(Context, State);
		EnterRule(_localctx, 606, RULE_end_block_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3555;
			Match(END);
			State = 3556;
			Match(BLOCK);
			State = 3558;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,292,Context) ) {
			case 1:
				{
				State = 3557;
				block_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_team_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Change_team_stmtContext change_team_stmt() {
			return GetRuleContext<Change_team_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_change_team_stmtContext end_change_team_stmt() {
			return GetRuleContext<End_change_team_stmtContext>(0);
		}
		public Change_team_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_team_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterChange_team_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitChange_team_construct(this);
		}
	}

	[RuleVersion(0)]
	public Change_team_constructContext change_team_construct() {
		Change_team_constructContext _localctx = new Change_team_constructContext(Context, State);
		EnterRule(_localctx, 608, RULE_change_team_construct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3560;
			change_team_stmt();
			State = 3561;
			block();
			State = 3562;
			end_change_team_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Change_team_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(FortranParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEAM() { return GetToken(FortranParser.TEAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Team_valueContext team_value() {
			return GetRuleContext<Team_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Team_construct_nameContext team_construct_name() {
			return GetRuleContext<Team_construct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Coarray_association_listContext coarray_association_list() {
			return GetRuleContext<Coarray_association_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sync_stat_listContext sync_stat_list() {
			return GetRuleContext<Sync_stat_listContext>(0);
		}
		public Change_team_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_change_team_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterChange_team_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitChange_team_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Change_team_stmtContext change_team_stmt() {
		Change_team_stmtContext _localctx = new Change_team_stmtContext(Context, State);
		EnterRule(_localctx, 610, RULE_change_team_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
			case 1:
				{
				State = 3564;
				team_construct_name();
				State = 3565;
				Match(COLON);
				}
				break;
			}
			State = 3569;
			Match(CHANGE);
			State = 3570;
			Match(TEAM);
			State = 3571;
			Match(LPAREN);
			State = 3572;
			team_value();
			State = 3575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
			case 1:
				{
				State = 3573;
				Match(COMMA);
				State = 3574;
				coarray_association_list();
				}
				break;
			}
			State = 3579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3577;
				Match(COMMA);
				State = 3578;
				sync_stat_list();
				}
			}

			State = 3581;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Coarray_associationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Codimension_declContext codimension_decl() {
			return GetRuleContext<Codimension_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLIES() { return GetToken(FortranParser.IMPLIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public Coarray_associationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coarray_association; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCoarray_association(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCoarray_association(this);
		}
	}

	[RuleVersion(0)]
	public Coarray_associationContext coarray_association() {
		Coarray_associationContext _localctx = new Coarray_associationContext(Context, State);
		EnterRule(_localctx, 612, RULE_coarray_association);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3583;
			codimension_decl();
			State = 3584;
			Match(IMPLIES);
			State = 3585;
			selector();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_change_team_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEAM() { return GetToken(FortranParser.TEAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Team_construct_nameContext team_construct_name() {
			return GetRuleContext<Team_construct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sync_stat_listContext sync_stat_list() {
			return GetRuleContext<Sync_stat_listContext>(0);
		}
		public End_change_team_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_change_team_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_change_team_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_change_team_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_change_team_stmtContext end_change_team_stmt() {
		End_change_team_stmtContext _localctx = new End_change_team_stmtContext(Context, State);
		EnterRule(_localctx, 614, RULE_end_change_team_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3587;
			Match(END);
			State = 3588;
			Match(TEAM);
			State = 3594;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
			case 1:
				{
				State = 3589;
				Match(LPAREN);
				State = 3591;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAT || _la==ERRMSG) {
					{
					State = 3590;
					sync_stat_list();
					}
				}

				State = 3593;
				Match(RPAREN);
				}
				break;
			}
			State = 3597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
			case 1:
				{
				State = 3596;
				team_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Team_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_exprContext scalar_expr() {
			return GetRuleContext<Scalar_exprContext>(0);
		}
		public Team_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_team_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterTeam_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitTeam_value(this);
		}
	}

	[RuleVersion(0)]
	public Team_valueContext team_value() {
		Team_valueContext _localctx = new Team_valueContext(Context, State);
		EnterRule(_localctx, 616, RULE_team_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3599;
			scalar_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Critical_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Critical_stmtContext critical_stmt() {
			return GetRuleContext<Critical_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_critical_stmtContext end_critical_stmt() {
			return GetRuleContext<End_critical_stmtContext>(0);
		}
		public Critical_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_critical_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCritical_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCritical_construct(this);
		}
	}

	[RuleVersion(0)]
	public Critical_constructContext critical_construct() {
		Critical_constructContext _localctx = new Critical_constructContext(Context, State);
		EnterRule(_localctx, 618, RULE_critical_construct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3601;
			critical_stmt();
			State = 3602;
			block();
			State = 3603;
			end_critical_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Critical_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRITICAL() { return GetToken(FortranParser.CRITICAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Critical_construct_nameContext critical_construct_name() {
			return GetRuleContext<Critical_construct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sync_stat_listContext sync_stat_list() {
			return GetRuleContext<Sync_stat_listContext>(0);
		}
		public Critical_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_critical_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCritical_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCritical_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Critical_stmtContext critical_stmt() {
		Critical_stmtContext _localctx = new Critical_stmtContext(Context, State);
		EnterRule(_localctx, 620, RULE_critical_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,299,Context) ) {
			case 1:
				{
				State = 3605;
				critical_construct_name();
				State = 3606;
				Match(COLON);
				}
				break;
			}
			State = 3610;
			Match(CRITICAL);
			State = 3616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
			case 1:
				{
				State = 3611;
				Match(LPAREN);
				State = 3613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAT || _la==ERRMSG) {
					{
					State = 3612;
					sync_stat_list();
					}
				}

				State = 3615;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_critical_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRITICAL() { return GetToken(FortranParser.CRITICAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Critical_construct_nameContext critical_construct_name() {
			return GetRuleContext<Critical_construct_nameContext>(0);
		}
		public End_critical_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_critical_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_critical_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_critical_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_critical_stmtContext end_critical_stmt() {
		End_critical_stmtContext _localctx = new End_critical_stmtContext(Context, State);
		EnterRule(_localctx, 622, RULE_end_critical_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3618;
			Match(END);
			State = 3619;
			Match(CRITICAL);
			State = 3621;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,302,Context) ) {
			case 1:
				{
				State = 3620;
				critical_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Do_stmtContext do_stmt() {
			return GetRuleContext<Do_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_doContext end_do() {
			return GetRuleContext<End_doContext>(0);
		}
		public Do_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDo_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDo_construct(this);
		}
	}

	[RuleVersion(0)]
	public Do_constructContext do_construct() {
		Do_constructContext _localctx = new Do_constructContext(Context, State);
		EnterRule(_localctx, 624, RULE_do_construct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3623;
			do_stmt();
			State = 3624;
			block();
			State = 3625;
			end_do();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Nonlabel_do_stmtContext nonlabel_do_stmt() {
			return GetRuleContext<Nonlabel_do_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_do_stmtContext label_do_stmt() {
			return GetRuleContext<Label_do_stmtContext>(0);
		}
		public Do_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDo_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDo_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Do_stmtContext do_stmt() {
		Do_stmtContext _localctx = new Do_stmtContext(Context, State);
		EnterRule(_localctx, 626, RULE_do_stmt);
		try {
			State = 3629;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3627;
				nonlabel_do_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3628;
				label_do_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_do_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(FortranParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_construct_nameContext do_construct_name() {
			return GetRuleContext<Do_construct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Loop_controlContext loop_control() {
			return GetRuleContext<Loop_controlContext>(0);
		}
		public Label_do_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_do_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLabel_do_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLabel_do_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Label_do_stmtContext label_do_stmt() {
		Label_do_stmtContext _localctx = new Label_do_stmtContext(Context, State);
		EnterRule(_localctx, 628, RULE_label_do_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3634;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
			case 1:
				{
				State = 3631;
				do_construct_name();
				State = 3632;
				Match(COLON);
				}
				break;
			}
			State = 3636;
			Match(DO);
			State = 3637;
			label();
			State = 3639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				{
				State = 3638;
				loop_control();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nonlabel_do_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(FortranParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Do_construct_nameContext do_construct_name() {
			return GetRuleContext<Do_construct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Loop_controlContext loop_control() {
			return GetRuleContext<Loop_controlContext>(0);
		}
		public Nonlabel_do_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonlabel_do_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterNonlabel_do_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitNonlabel_do_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Nonlabel_do_stmtContext nonlabel_do_stmt() {
		Nonlabel_do_stmtContext _localctx = new Nonlabel_do_stmtContext(Context, State);
		EnterRule(_localctx, 630, RULE_nonlabel_do_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3644;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
			case 1:
				{
				State = 3641;
				do_construct_name();
				State = 3642;
				Match(COLON);
				}
				break;
			}
			State = 3646;
			Match(DO);
			State = 3648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
			case 1:
				{
				State = 3647;
				loop_control();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_controlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Do_variableContext do_variable() {
			return GetRuleContext<Do_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext[] scalar_int_expr() {
			return GetRuleContexts<Scalar_int_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr(int i) {
			return GetRuleContext<Scalar_int_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(FortranParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_logical_exprContext scalar_logical_expr() {
			return GetRuleContext<Scalar_logical_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(FortranParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_headerContext concurrent_header() {
			return GetRuleContext<Concurrent_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_localityContext concurrent_locality() {
			return GetRuleContext<Concurrent_localityContext>(0);
		}
		public Loop_controlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_control; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLoop_control(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLoop_control(this);
		}
	}

	[RuleVersion(0)]
	public Loop_controlContext loop_control() {
		Loop_controlContext _localctx = new Loop_controlContext(Context, State);
		EnterRule(_localctx, 632, RULE_loop_control);
		int _la;
		try {
			State = 3677;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,312,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3650;
					Match(COMMA);
					}
				}

				State = 3653;
				do_variable();
				State = 3654;
				Match(ASSIGN);
				State = 3655;
				scalar_int_expr();
				State = 3656;
				Match(COMMA);
				State = 3657;
				scalar_int_expr();
				State = 3660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3658;
					Match(COMMA);
					State = 3659;
					scalar_int_expr();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3662;
					Match(COMMA);
					}
				}

				State = 3665;
				Match(WHILE);
				State = 3666;
				Match(LPAREN);
				State = 3667;
				scalar_logical_expr();
				State = 3668;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3670;
					Match(COMMA);
					}
				}

				State = 3673;
				Match(CONCURRENT);
				State = 3674;
				concurrent_header();
				State = 3675;
				concurrent_locality();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_variable_nameContext scalar_int_variable_name() {
			return GetRuleContext<Scalar_int_variable_nameContext>(0);
		}
		public Do_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDo_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDo_variable(this);
		}
	}

	[RuleVersion(0)]
	public Do_variableContext do_variable() {
		Do_variableContext _localctx = new Do_variableContext(Context, State);
		EnterRule(_localctx, 634, RULE_do_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3679;
			scalar_int_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_control_listContext concurrent_control_list() {
			return GetRuleContext<Concurrent_control_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Integer_type_specContext integer_type_spec() {
			return GetRuleContext<Integer_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_mask_exprContext scalar_mask_expr() {
			return GetRuleContext<Scalar_mask_exprContext>(0);
		}
		public Concurrent_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConcurrent_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConcurrent_header(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_headerContext concurrent_header() {
		Concurrent_headerContext _localctx = new Concurrent_headerContext(Context, State);
		EnterRule(_localctx, 636, RULE_concurrent_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3681;
			Match(LPAREN);
			State = 3685;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
			case 1:
				{
				State = 3682;
				integer_type_spec();
				State = 3683;
				Match(DOUBLECOLON);
				}
				break;
			}
			State = 3687;
			concurrent_control_list();
			State = 3690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3688;
				Match(COMMA);
				State = 3689;
				scalar_mask_expr();
				}
			}

			State = 3692;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_controlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_limitContext[] concurrent_limit() {
			return GetRuleContexts<Concurrent_limitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_limitContext concurrent_limit(int i) {
			return GetRuleContext<Concurrent_limitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(FortranParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(FortranParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_stepContext concurrent_step() {
			return GetRuleContext<Concurrent_stepContext>(0);
		}
		public Concurrent_controlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_control; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConcurrent_control(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConcurrent_control(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_controlContext concurrent_control() {
		Concurrent_controlContext _localctx = new Concurrent_controlContext(Context, State);
		EnterRule(_localctx, 638, RULE_concurrent_control);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3694;
			index_name();
			State = 3695;
			Match(ASSIGN);
			State = 3696;
			concurrent_limit();
			State = 3697;
			Match(COLON);
			State = 3698;
			concurrent_limit();
			State = 3701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 3699;
				Match(COLON);
				State = 3700;
				concurrent_step();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_limitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		public Concurrent_limitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_limit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConcurrent_limit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConcurrent_limit(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_limitContext concurrent_limit() {
		Concurrent_limitContext _localctx = new Concurrent_limitContext(Context, State);
		EnterRule(_localctx, 640, RULE_concurrent_limit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3703;
			scalar_int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_stepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		public Concurrent_stepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_step; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConcurrent_step(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConcurrent_step(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_stepContext concurrent_step() {
		Concurrent_stepContext _localctx = new Concurrent_stepContext(Context, State);
		EnterRule(_localctx, 642, RULE_concurrent_step);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3705;
			scalar_int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_localityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Locality_specContext[] locality_spec() {
			return GetRuleContexts<Locality_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Locality_specContext locality_spec(int i) {
			return GetRuleContext<Locality_specContext>(i);
		}
		public Concurrent_localityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_locality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConcurrent_locality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConcurrent_locality(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_localityContext concurrent_locality() {
		Concurrent_localityContext _localctx = new Concurrent_localityContext(Context, State);
		EnterRule(_localctx, 644, RULE_concurrent_locality);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3710;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,316,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3707;
					locality_spec();
					}
					} 
				}
				State = 3712;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,316,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Locality_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(FortranParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Variable_name_listContext variable_name_list() {
			return GetRuleContext<Variable_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALINIT() { return GetToken(FortranParser.LOCALINIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUCE() { return GetToken(FortranParser.REDUCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reduce_operationContext reduce_operation() {
			return GetRuleContext<Reduce_operationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED() { return GetToken(FortranParser.SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(FortranParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(FortranParser.NONE, 0); }
		public Locality_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locality_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLocality_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLocality_spec(this);
		}
	}

	[RuleVersion(0)]
	public Locality_specContext locality_spec() {
		Locality_specContext _localctx = new Locality_specContext(Context, State);
		EnterRule(_localctx, 646, RULE_locality_spec);
		try {
			State = 3739;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3713;
				Match(LOCAL);
				State = 3714;
				Match(LPAREN);
				State = 3715;
				variable_name_list();
				State = 3716;
				Match(RPAREN);
				}
				break;
			case LOCALINIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3718;
				Match(LOCALINIT);
				State = 3719;
				Match(LPAREN);
				State = 3720;
				variable_name_list();
				State = 3721;
				Match(RPAREN);
				}
				break;
			case REDUCE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3723;
				Match(REDUCE);
				State = 3724;
				Match(LPAREN);
				State = 3725;
				reduce_operation();
				State = 3726;
				Match(COLON);
				State = 3727;
				variable_name_list();
				State = 3728;
				Match(RPAREN);
				}
				break;
			case SHARED:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3730;
				Match(SHARED);
				State = 3731;
				Match(LPAREN);
				State = 3732;
				variable_name_list();
				State = 3733;
				Match(RPAREN);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3735;
				Match(DEFAULT);
				State = 3736;
				Match(LPAREN);
				State = 3737;
				Match(NONE);
				State = 3738;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reduce_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Binary_reduce_opContext binary_reduce_op() {
			return GetRuleContext<Binary_reduce_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_reduction_nameContext function_reduction_name() {
			return GetRuleContext<Function_reduction_nameContext>(0);
		}
		public Reduce_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reduce_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterReduce_operation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitReduce_operation(this);
		}
	}

	[RuleVersion(0)]
	public Reduce_operationContext reduce_operation() {
		Reduce_operationContext _localctx = new Reduce_operationContext(Context, State);
		EnterRule(_localctx, 648, RULE_reduce_operation);
		try {
			State = 3743;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASTERIK:
			case PLUS:
			case AND:
			case OR:
			case EQV:
			case NEQV:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3741;
				binary_reduce_op();
				}
				break;
			case PROGRAM:
			case END:
			case FUNCTION:
			case SUBROUTINE:
			case MODULE:
			case SUBMODULE:
			case BLOCK:
			case DATA:
			case INTRINSIC:
			case NONINTRINSIC:
			case OPERATOR:
			case READ:
			case FORMATTED:
			case UNFORMATTED:
			case WRITE:
			case ASSIGNMENT:
			case USE:
			case ONLY:
			case IMPORT:
			case NONE:
			case ALL:
			case KIND:
			case INTEGER:
			case LEN:
			case REAL:
			case DOUBLE:
			case PRECISION:
			case COMPLEX:
			case CHARACTER:
			case LOGICAL:
			case TYPE:
			case CLASS:
			case EXTERNAL:
			case IMPLICIT:
			case PARAMETER:
			case FORMAT:
			case BIND:
			case RESULT:
			case ENTRY:
			case STAT:
			case TEAM:
			case TEAMNUMBER:
			case RE:
			case IM:
			case SEQUENCE:
			case PRIVATE:
			case PROCEDURE:
			case NOPASS:
			case PASS:
			case POINTER:
			case ALLOCATABLE:
			case CODIMENSION:
			case CONTIGUOUS:
			case DIMENSION:
			case PUBLIC:
			case CONTAINS:
			case FINAL:
			case GENERIC:
			case DEFERRED:
			case NONOVERRIDABLE:
			case INTENT:
			case OPTIONAL:
			case PROTECTED:
			case SAVE:
			case IN:
			case OUT:
			case INOUT:
			case INTERFACE:
			case ABSTRACT:
			case ENUM:
			case ENUMERATOR:
			case ASYNCHRONOUS:
			case TARGET:
			case VALUE:
			case VOLATILE:
			case EQUIVALENCE:
			case COMMON:
			case NAMELIST:
			case EVENT:
			case WAIT:
			case UNTILCOUNT:
			case POST:
			case ERRMSG:
			case ERROR:
			case STOP:
			case QUIET:
			case ENDFILE:
			case DEALLOCATE:
			case CYCLE:
			case CONTINUE:
			case CLOSE:
			case UNIT:
			case IOSTAT:
			case IOMSG:
			case ERR:
			case STATUS:
			case CALL:
			case BACKSPACE:
			case ALLOCATE:
			case MOLD:
			case SOURCE:
			case OPEN:
			case ACCESS:
			case ACTION:
			case BLANK:
			case DECIMAL:
			case DELIM:
			case ENCODING:
			case FILE:
			case FORM:
			case NEWUNIT:
			case PAD:
			case POSITION:
			case RECL:
			case ROUND:
			case SIGN:
			case NULLIFY:
			case LOCK:
			case ACQUIREDLOCK:
			case INQUIRE:
			case IOLENGTH:
			case EXIST:
			case ID:
			case NAMED:
			case NEXTREC:
			case NUMBER:
			case OPENED:
			case PENDING:
			case POS:
			case READWRITE:
			case SEQUENTIAL:
			case SIZE:
			case STREAM:
			case IF:
			case GO:
			case TO:
			case NEWINDEX:
			case FLUSH:
			case FAIL:
			case IMAGE:
			case EXIT:
			case FORALL:
			case WHERE:
			case EOR:
			case UNLOCK:
			case SYNC:
			case MEMORY:
			case IMAGES:
			case REWIND:
			case RETURN:
			case FMT:
			case NML:
			case ADVANCE:
			case REC:
			case PRINT:
			case CRITICAL:
			case CHANGE:
			case SELECT:
			case CASE:
			case DEFAULT:
			case ASSOCIATE:
			case ELSEWHERE:
			case IS:
			case RANK:
			case ELSE:
			case THEN:
			case DO:
			case CONCURRENT:
			case WHILE:
			case SHARED:
			case LOCAL:
			case LOCALINIT:
			case RECURSIVE:
			case PURE:
			case NONRECURSIVE:
			case IMPURE:
			case ELEMENTAL:
			case NOTIFY:
			case TYPEOF:
			case CLASSOF:
			case ENUMERATION:
			case DIRECT:
			case LEADINGZERO:
			case REDUCE:
			case SIMPLE:
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3742;
				function_reduction_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_reduce_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(FortranParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(FortranParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(FortranParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQV() { return GetToken(FortranParser.EQV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQV() { return GetToken(FortranParser.NEQV, 0); }
		public Binary_reduce_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_reduce_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBinary_reduce_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBinary_reduce_op(this);
		}
	}

	[RuleVersion(0)]
	public Binary_reduce_opContext binary_reduce_op() {
		Binary_reduce_opContext _localctx = new Binary_reduce_opContext(Context, State);
		EnterRule(_localctx, 650, RULE_binary_reduce_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3745;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32985382391808L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_doContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public End_do_stmtContext end_do_stmt() {
			return GetRuleContext<End_do_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Continue_stmtContext continue_stmt() {
			return GetRuleContext<Continue_stmtContext>(0);
		}
		public End_doContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_do; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_do(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_do(this);
		}
	}

	[RuleVersion(0)]
	public End_doContext end_do() {
		End_doContext _localctx = new End_doContext(Context, State);
		EnterRule(_localctx, 652, RULE_end_do);
		try {
			State = 3749;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case END:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3747;
				end_do_stmt();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3748;
				continue_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_do_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(FortranParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Do_construct_nameContext do_construct_name() {
			return GetRuleContext<Do_construct_nameContext>(0);
		}
		public End_do_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_do_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_do_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_do_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_do_stmtContext end_do_stmt() {
		End_do_stmtContext _localctx = new End_do_stmtContext(Context, State);
		EnterRule(_localctx, 654, RULE_end_do_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3751;
			Match(END);
			State = 3752;
			Match(DO);
			State = 3754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,320,Context) ) {
			case 1:
				{
				State = 3753;
				do_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cycle_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(FortranParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Do_construct_nameContext do_construct_name() {
			return GetRuleContext<Do_construct_nameContext>(0);
		}
		public Cycle_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycle_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCycle_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCycle_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Cycle_stmtContext cycle_stmt() {
		Cycle_stmtContext _localctx = new Cycle_stmtContext(Context, State);
		EnterRule(_localctx, 656, RULE_cycle_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3756;
			Match(CYCLE);
			State = 3758;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,321,Context) ) {
			case 1:
				{
				State = 3757;
				do_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_then_stmtContext if_then_stmt() {
			return GetRuleContext<If_then_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_if_stmtContext end_if_stmt() {
			return GetRuleContext<End_if_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_stmtContext[] else_if_stmt() {
			return GetRuleContexts<Else_if_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_stmtContext else_if_stmt(int i) {
			return GetRuleContext<Else_if_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_stmtContext else_stmt() {
			return GetRuleContext<Else_stmtContext>(0);
		}
		public If_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIf_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIf_construct(this);
		}
	}

	[RuleVersion(0)]
	public If_constructContext if_construct() {
		If_constructContext _localctx = new If_constructContext(Context, State);
		EnterRule(_localctx, 658, RULE_if_construct);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3760;
			if_then_stmt();
			State = 3761;
			block();
			State = 3767;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,322,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3762;
					else_if_stmt();
					State = 3763;
					block();
					}
					} 
				}
				State = 3769;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,322,Context);
			}
			State = 3773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 3770;
				else_stmt();
				State = 3771;
				block();
				}
			}

			State = 3775;
			end_if_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_then_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(FortranParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_logical_exprContext scalar_logical_expr() {
			return GetRuleContext<Scalar_logical_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(FortranParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_construct_nameContext if_construct_name() {
			return GetRuleContext<If_construct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public If_then_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_then_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIf_then_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIf_then_stmt(this);
		}
	}

	[RuleVersion(0)]
	public If_then_stmtContext if_then_stmt() {
		If_then_stmtContext _localctx = new If_then_stmtContext(Context, State);
		EnterRule(_localctx, 660, RULE_if_then_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3780;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,324,Context) ) {
			case 1:
				{
				State = 3777;
				if_construct_name();
				State = 3778;
				Match(COLON);
				}
				break;
			}
			State = 3782;
			Match(IF);
			State = 3783;
			Match(LPAREN);
			State = 3784;
			scalar_logical_expr();
			State = 3785;
			Match(RPAREN);
			State = 3786;
			Match(THEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(FortranParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(FortranParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_logical_exprContext scalar_logical_expr() {
			return GetRuleContext<Scalar_logical_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(FortranParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_construct_nameContext if_construct_name() {
			return GetRuleContext<If_construct_nameContext>(0);
		}
		public Else_if_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterElse_if_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitElse_if_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_stmtContext else_if_stmt() {
		Else_if_stmtContext _localctx = new Else_if_stmtContext(Context, State);
		EnterRule(_localctx, 662, RULE_else_if_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3788;
			Match(ELSE);
			State = 3789;
			Match(IF);
			State = 3790;
			Match(LPAREN);
			State = 3791;
			scalar_logical_expr();
			State = 3792;
			Match(RPAREN);
			State = 3793;
			Match(THEN);
			State = 3795;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,325,Context) ) {
			case 1:
				{
				State = 3794;
				if_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(FortranParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_construct_nameContext if_construct_name() {
			return GetRuleContext<If_construct_nameContext>(0);
		}
		public Else_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterElse_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitElse_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Else_stmtContext else_stmt() {
		Else_stmtContext _localctx = new Else_stmtContext(Context, State);
		EnterRule(_localctx, 664, RULE_else_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3797;
			Match(ELSE);
			State = 3799;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,326,Context) ) {
			case 1:
				{
				State = 3798;
				if_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_if_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(FortranParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_construct_nameContext if_construct_name() {
			return GetRuleContext<If_construct_nameContext>(0);
		}
		public End_if_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_if_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_if_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_if_stmtContext end_if_stmt() {
		End_if_stmtContext _localctx = new End_if_stmtContext(Context, State);
		EnterRule(_localctx, 666, RULE_end_if_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3801;
			Match(END);
			State = 3802;
			Match(IF);
			State = 3804;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,327,Context) ) {
			case 1:
				{
				State = 3803;
				if_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(FortranParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_logical_exprContext scalar_logical_expr() {
			return GetRuleContext<Scalar_logical_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Action_stmtContext action_stmt() {
			return GetRuleContext<Action_stmtContext>(0);
		}
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 668, RULE_if_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3806;
			Match(IF);
			State = 3807;
			Match(LPAREN);
			State = 3808;
			scalar_logical_expr();
			State = 3809;
			Match(RPAREN);
			State = 3810;
			action_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_case_stmtContext select_case_stmt() {
			return GetRuleContext<Select_case_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_select_stmtContext end_select_stmt() {
			return GetRuleContext<End_select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_stmtContext[] case_stmt() {
			return GetRuleContexts<Case_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_stmtContext case_stmt(int i) {
			return GetRuleContext<Case_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public Case_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCase_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCase_construct(this);
		}
	}

	[RuleVersion(0)]
	public Case_constructContext case_construct() {
		Case_constructContext _localctx = new Case_constructContext(Context, State);
		EnterRule(_localctx, 670, RULE_case_construct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3812;
			select_case_stmt();
			State = 3818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE) {
				{
				{
				State = 3813;
				case_stmt();
				State = 3814;
				block();
				}
				}
				State = 3820;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3821;
			end_select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_case_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(FortranParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(FortranParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_exprContext case_expr() {
			return GetRuleContext<Case_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_construct_nameContext case_construct_name() {
			return GetRuleContext<Case_construct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public Select_case_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_case_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSelect_case_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSelect_case_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Select_case_stmtContext select_case_stmt() {
		Select_case_stmtContext _localctx = new Select_case_stmtContext(Context, State);
		EnterRule(_localctx, 672, RULE_select_case_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3826;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,329,Context) ) {
			case 1:
				{
				State = 3823;
				case_construct_name();
				State = 3824;
				Match(COLON);
				}
				break;
			}
			State = 3828;
			Match(SELECT);
			State = 3829;
			Match(CASE);
			State = 3830;
			Match(LPAREN);
			State = 3831;
			case_expr();
			State = 3832;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(FortranParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_selectorContext case_selector() {
			return GetRuleContext<Case_selectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_construct_nameContext case_construct_name() {
			return GetRuleContext<Case_construct_nameContext>(0);
		}
		public Case_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCase_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCase_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Case_stmtContext case_stmt() {
		Case_stmtContext _localctx = new Case_stmtContext(Context, State);
		EnterRule(_localctx, 674, RULE_case_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3834;
			Match(CASE);
			State = 3835;
			case_selector();
			State = 3837;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,330,Context) ) {
			case 1:
				{
				State = 3836;
				case_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_select_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(FortranParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_construct_nameContext case_construct_name() {
			return GetRuleContext<Case_construct_nameContext>(0);
		}
		public End_select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_select_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_select_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_select_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_select_stmtContext end_select_stmt() {
		End_select_stmtContext _localctx = new End_select_stmtContext(Context, State);
		EnterRule(_localctx, 676, RULE_end_select_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3839;
			Match(END);
			State = 3840;
			Match(SELECT);
			State = 3842;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,331,Context) ) {
			case 1:
				{
				State = 3841;
				case_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_exprContext scalar_expr() {
			return GetRuleContext<Scalar_exprContext>(0);
		}
		public Case_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCase_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCase_expr(this);
		}
	}

	[RuleVersion(0)]
	public Case_exprContext case_expr() {
		Case_exprContext _localctx = new Case_exprContext(Context, State);
		EnterRule(_localctx, 678, RULE_case_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3844;
			scalar_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_selectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_value_range_listContext case_value_range_list() {
			return GetRuleContext<Case_value_range_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(FortranParser.DEFAULT, 0); }
		public Case_selectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCase_selector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCase_selector(this);
		}
	}

	[RuleVersion(0)]
	public Case_selectorContext case_selector() {
		Case_selectorContext _localctx = new Case_selectorContext(Context, State);
		EnterRule(_localctx, 680, RULE_case_selector);
		try {
			State = 3851;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3846;
				Match(LPAREN);
				State = 3847;
				case_value_range_list();
				State = 3848;
				Match(RPAREN);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3850;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_value_rangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Case_valueContext[] case_value() {
			return GetRuleContexts<Case_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_valueContext case_value(int i) {
			return GetRuleContext<Case_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		public Case_value_rangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_value_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCase_value_range(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCase_value_range(this);
		}
	}

	[RuleVersion(0)]
	public Case_value_rangeContext case_value_range() {
		Case_value_rangeContext _localctx = new Case_value_rangeContext(Context, State);
		EnterRule(_localctx, 682, RULE_case_value_range);
		try {
			State = 3863;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,333,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3853;
				case_value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3854;
				case_value();
				State = 3855;
				Match(COLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3857;
				Match(COLON);
				State = 3858;
				case_value();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3859;
				case_value();
				State = 3860;
				Match(COLON);
				State = 3861;
				case_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_constant_exprContext scalar_constant_expr() {
			return GetRuleContext<Scalar_constant_exprContext>(0);
		}
		public Case_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCase_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCase_value(this);
		}
	}

	[RuleVersion(0)]
	public Case_valueContext case_value() {
		Case_valueContext _localctx = new Case_valueContext(Context, State);
		EnterRule(_localctx, 684, RULE_case_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3865;
			scalar_constant_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_rank_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_rank_stmtContext select_rank_stmt() {
			return GetRuleContext<Select_rank_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_select_rank_stmtContext end_select_rank_stmt() {
			return GetRuleContext<End_select_rank_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_rank_case_stmtContext[] select_rank_case_stmt() {
			return GetRuleContexts<Select_rank_case_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_rank_case_stmtContext select_rank_case_stmt(int i) {
			return GetRuleContext<Select_rank_case_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public Select_rank_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_rank_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSelect_rank_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSelect_rank_construct(this);
		}
	}

	[RuleVersion(0)]
	public Select_rank_constructContext select_rank_construct() {
		Select_rank_constructContext _localctx = new Select_rank_constructContext(Context, State);
		EnterRule(_localctx, 686, RULE_select_rank_construct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3867;
			select_rank_stmt();
			State = 3873;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==RANK) {
				{
				{
				State = 3868;
				select_rank_case_stmt();
				State = 3869;
				block();
				}
				}
				State = 3875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3876;
			end_select_rank_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_rank_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(FortranParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(FortranParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_construct_nameContext select_construct_name() {
			return GetRuleContext<Select_construct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Associate_nameContext associate_name() {
			return GetRuleContext<Associate_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLIES() { return GetToken(FortranParser.IMPLIES, 0); }
		public Select_rank_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_rank_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSelect_rank_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSelect_rank_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Select_rank_stmtContext select_rank_stmt() {
		Select_rank_stmtContext _localctx = new Select_rank_stmtContext(Context, State);
		EnterRule(_localctx, 688, RULE_select_rank_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3881;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,335,Context) ) {
			case 1:
				{
				State = 3878;
				select_construct_name();
				State = 3879;
				Match(COLON);
				}
				break;
			}
			State = 3883;
			Match(SELECT);
			State = 3884;
			Match(RANK);
			State = 3885;
			Match(LPAREN);
			State = 3889;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,336,Context) ) {
			case 1:
				{
				State = 3886;
				associate_name();
				State = 3887;
				Match(IMPLIES);
				}
				break;
			}
			State = 3891;
			selector();
			State = 3892;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_rank_case_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(FortranParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_constant_exprContext scalar_int_constant_expr() {
			return GetRuleContext<Scalar_int_constant_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_construct_nameContext select_construct_name() {
			return GetRuleContext<Select_construct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(FortranParser.DEFAULT, 0); }
		public Select_rank_case_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_rank_case_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSelect_rank_case_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSelect_rank_case_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Select_rank_case_stmtContext select_rank_case_stmt() {
		Select_rank_case_stmtContext _localctx = new Select_rank_case_stmtContext(Context, State);
		EnterRule(_localctx, 690, RULE_select_rank_case_stmt);
		try {
			State = 3913;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,340,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3894;
				Match(RANK);
				State = 3895;
				Match(LPAREN);
				State = 3896;
				scalar_int_constant_expr();
				State = 3897;
				Match(RPAREN);
				State = 3899;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,337,Context) ) {
				case 1:
					{
					State = 3898;
					select_construct_name();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3901;
				Match(RANK);
				State = 3902;
				Match(LPAREN);
				State = 3903;
				Match(ASTERIK);
				State = 3904;
				Match(RPAREN);
				State = 3906;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,338,Context) ) {
				case 1:
					{
					State = 3905;
					select_construct_name();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3908;
				Match(RANK);
				State = 3909;
				Match(DEFAULT);
				State = 3911;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,339,Context) ) {
				case 1:
					{
					State = 3910;
					select_construct_name();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_select_rank_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(FortranParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_construct_nameContext select_construct_name() {
			return GetRuleContext<Select_construct_nameContext>(0);
		}
		public End_select_rank_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_select_rank_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_select_rank_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_select_rank_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_select_rank_stmtContext end_select_rank_stmt() {
		End_select_rank_stmtContext _localctx = new End_select_rank_stmtContext(Context, State);
		EnterRule(_localctx, 692, RULE_end_select_rank_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3915;
			Match(END);
			State = 3916;
			Match(SELECT);
			State = 3918;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,341,Context) ) {
			case 1:
				{
				State = 3917;
				select_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_type_constructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_type_stmtContext select_type_stmt() {
			return GetRuleContext<Select_type_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_select_type_stmtContext end_select_type_stmt() {
			return GetRuleContext<End_select_type_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_guard_stmtContext[] type_guard_stmt() {
			return GetRuleContexts<Type_guard_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_guard_stmtContext type_guard_stmt(int i) {
			return GetRuleContext<Type_guard_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public Select_type_constructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_type_construct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSelect_type_construct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSelect_type_construct(this);
		}
	}

	[RuleVersion(0)]
	public Select_type_constructContext select_type_construct() {
		Select_type_constructContext _localctx = new Select_type_constructContext(Context, State);
		EnterRule(_localctx, 694, RULE_select_type_construct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3920;
			select_type_stmt();
			State = 3926;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TYPE || _la==CLASS) {
				{
				{
				State = 3921;
				type_guard_stmt();
				State = 3922;
				block();
				}
				}
				State = 3928;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3929;
			end_select_type_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_type_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(FortranParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(FortranParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_construct_nameContext select_construct_name() {
			return GetRuleContext<Select_construct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Associate_nameContext associate_name() {
			return GetRuleContext<Associate_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLIES() { return GetToken(FortranParser.IMPLIES, 0); }
		public Select_type_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_type_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSelect_type_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSelect_type_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Select_type_stmtContext select_type_stmt() {
		Select_type_stmtContext _localctx = new Select_type_stmtContext(Context, State);
		EnterRule(_localctx, 696, RULE_select_type_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3934;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,343,Context) ) {
			case 1:
				{
				State = 3931;
				select_construct_name();
				State = 3932;
				Match(COLON);
				}
				break;
			}
			State = 3936;
			Match(SELECT);
			State = 3937;
			Match(TYPE);
			State = 3938;
			Match(LPAREN);
			State = 3942;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,344,Context) ) {
			case 1:
				{
				State = 3939;
				associate_name();
				State = 3940;
				Match(IMPLIES);
				}
				break;
			}
			State = 3944;
			selector();
			State = 3945;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_guard_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(FortranParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(FortranParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_construct_nameContext select_construct_name() {
			return GetRuleContext<Select_construct_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(FortranParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Derived_type_specContext derived_type_spec() {
			return GetRuleContext<Derived_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(FortranParser.DEFAULT, 0); }
		public Type_guard_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_guard_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_guard_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_guard_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Type_guard_stmtContext type_guard_stmt() {
		Type_guard_stmtContext _localctx = new Type_guard_stmtContext(Context, State);
		EnterRule(_localctx, 698, RULE_type_guard_stmt);
		try {
			State = 3968;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,348,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3947;
				Match(TYPE);
				State = 3948;
				Match(IS);
				State = 3949;
				Match(LPAREN);
				State = 3950;
				type_spec();
				State = 3951;
				Match(RPAREN);
				State = 3953;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,345,Context) ) {
				case 1:
					{
					State = 3952;
					select_construct_name();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3955;
				Match(CLASS);
				State = 3956;
				Match(IS);
				State = 3957;
				Match(LPAREN);
				State = 3958;
				derived_type_spec();
				State = 3959;
				Match(RPAREN);
				State = 3961;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
				case 1:
					{
					State = 3960;
					select_construct_name();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3963;
				Match(CLASS);
				State = 3964;
				Match(DEFAULT);
				State = 3966;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,347,Context) ) {
				case 1:
					{
					State = 3965;
					select_construct_name();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_select_type_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(FortranParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_construct_nameContext select_construct_name() {
			return GetRuleContext<Select_construct_nameContext>(0);
		}
		public End_select_type_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_select_type_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_select_type_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_select_type_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_select_type_stmtContext end_select_type_stmt() {
		End_select_type_stmtContext _localctx = new End_select_type_stmtContext(Context, State);
		EnterRule(_localctx, 700, RULE_end_select_type_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3970;
			Match(END);
			State = 3971;
			Match(SELECT);
			State = 3973;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,349,Context) ) {
			case 1:
				{
				State = 3972;
				select_construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exit_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(FortranParser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Construct_nameContext construct_name() {
			return GetRuleContext<Construct_nameContext>(0);
		}
		public Exit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exit_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExit_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExit_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Exit_stmtContext exit_stmt() {
		Exit_stmtContext _localctx = new Exit_stmtContext(Context, State);
		EnterRule(_localctx, 702, RULE_exit_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3975;
			Match(EXIT);
			State = 3977;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,350,Context) ) {
			case 1:
				{
				State = 3976;
				construct_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Goto_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(FortranParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(FortranParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public Goto_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterGoto_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitGoto_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Goto_stmtContext goto_stmt() {
		Goto_stmtContext _localctx = new Goto_stmtContext(Context, State);
		EnterRule(_localctx, 704, RULE_goto_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3979;
			Match(GO);
			State = 3980;
			Match(TO);
			State = 3981;
			label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Computed_goto_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(FortranParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(FortranParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_listContext label_list() {
			return GetRuleContext<Label_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		public Computed_goto_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computed_goto_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterComputed_goto_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitComputed_goto_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Computed_goto_stmtContext computed_goto_stmt() {
		Computed_goto_stmtContext _localctx = new Computed_goto_stmtContext(Context, State);
		EnterRule(_localctx, 706, RULE_computed_goto_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3983;
			Match(GO);
			State = 3984;
			Match(TO);
			State = 3985;
			Match(LPAREN);
			State = 3986;
			label_list();
			State = 3987;
			Match(RPAREN);
			State = 3989;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3988;
				Match(COMMA);
				}
			}

			State = 3991;
			scalar_int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(FortranParser.CONTINUE, 0); }
		public Continue_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterContinue_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitContinue_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Continue_stmtContext continue_stmt() {
		Continue_stmtContext _localctx = new Continue_stmtContext(Context, State);
		EnterRule(_localctx, 708, RULE_continue_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3993;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stop_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(FortranParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stop_codeContext stop_code() {
			return GetRuleContext<Stop_codeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUIET() { return GetToken(FortranParser.QUIET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_logical_exprContext scalar_logical_expr() {
			return GetRuleContext<Scalar_logical_exprContext>(0);
		}
		public Stop_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stop_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterStop_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitStop_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Stop_stmtContext stop_stmt() {
		Stop_stmtContext _localctx = new Stop_stmtContext(Context, State);
		EnterRule(_localctx, 710, RULE_stop_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3995;
			Match(STOP);
			State = 3997;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
			case 1:
				{
				State = 3996;
				stop_code();
				}
				break;
			}
			State = 4003;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3999;
				Match(COMMA);
				State = 4000;
				Match(QUIET);
				State = 4001;
				Match(ASSIGN);
				State = 4002;
				scalar_logical_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_stop_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(FortranParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(FortranParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stop_codeContext stop_code() {
			return GetRuleContext<Stop_codeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUIET() { return GetToken(FortranParser.QUIET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_logical_exprContext scalar_logical_expr() {
			return GetRuleContext<Scalar_logical_exprContext>(0);
		}
		public Error_stop_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_stop_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterError_stop_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitError_stop_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Error_stop_stmtContext error_stop_stmt() {
		Error_stop_stmtContext _localctx = new Error_stop_stmtContext(Context, State);
		EnterRule(_localctx, 712, RULE_error_stop_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4005;
			Match(ERROR);
			State = 4006;
			Match(STOP);
			State = 4008;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,354,Context) ) {
			case 1:
				{
				State = 4007;
				stop_code();
				}
				break;
			}
			State = 4014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4010;
				Match(COMMA);
				State = 4011;
				Match(QUIET);
				State = 4012;
				Match(ASSIGN);
				State = 4013;
				scalar_logical_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stop_codeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_default_char_exprContext scalar_default_char_expr() {
			return GetRuleContext<Scalar_default_char_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		public Stop_codeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stop_code; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterStop_code(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitStop_code(this);
		}
	}

	[RuleVersion(0)]
	public Stop_codeContext stop_code() {
		Stop_codeContext _localctx = new Stop_codeContext(Context, State);
		EnterRule(_localctx, 714, RULE_stop_code);
		try {
			State = 4018;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,356,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4016;
				scalar_default_char_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4017;
				scalar_int_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fail_image_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAIL() { return GetToken(FortranParser.FAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGE() { return GetToken(FortranParser.IMAGE, 0); }
		public Fail_image_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fail_image_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFail_image_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFail_image_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Fail_image_stmtContext fail_image_stmt() {
		Fail_image_stmtContext _localctx = new Fail_image_stmtContext(Context, State);
		EnterRule(_localctx, 716, RULE_fail_image_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4020;
			Match(FAIL);
			State = 4021;
			Match(IMAGE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Notify_wait_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFY() { return GetToken(FortranParser.NOTIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(FortranParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Notify_variableContext notify_variable() {
			return GetRuleContext<Notify_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Event_wait_spec_listContext event_wait_spec_list() {
			return GetRuleContext<Event_wait_spec_listContext>(0);
		}
		public Notify_wait_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notify_wait_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterNotify_wait_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitNotify_wait_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Notify_wait_stmtContext notify_wait_stmt() {
		Notify_wait_stmtContext _localctx = new Notify_wait_stmtContext(Context, State);
		EnterRule(_localctx, 718, RULE_notify_wait_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4023;
			Match(NOTIFY);
			State = 4024;
			Match(WAIT);
			State = 4025;
			Match(LPAREN);
			State = 4026;
			notify_variable();
			State = 4029;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4027;
				Match(COMMA);
				State = 4028;
				event_wait_spec_list();
				}
			}

			State = 4031;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Notify_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_variableContext scalar_variable() {
			return GetRuleContext<Scalar_variableContext>(0);
		}
		public Notify_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notify_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterNotify_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitNotify_variable(this);
		}
	}

	[RuleVersion(0)]
	public Notify_variableContext notify_variable() {
		Notify_variableContext _localctx = new Notify_variableContext(Context, State);
		EnterRule(_localctx, 720, RULE_notify_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4033;
			scalar_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sync_all_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(FortranParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(FortranParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sync_stat_listContext sync_stat_list() {
			return GetRuleContext<Sync_stat_listContext>(0);
		}
		public Sync_all_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sync_all_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSync_all_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSync_all_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Sync_all_stmtContext sync_all_stmt() {
		Sync_all_stmtContext _localctx = new Sync_all_stmtContext(Context, State);
		EnterRule(_localctx, 722, RULE_sync_all_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4035;
			Match(SYNC);
			State = 4036;
			Match(ALL);
			State = 4042;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,359,Context) ) {
			case 1:
				{
				State = 4037;
				Match(LPAREN);
				State = 4039;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAT || _la==ERRMSG) {
					{
					State = 4038;
					sync_stat_list();
					}
				}

				State = 4041;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sync_statContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAT() { return GetToken(FortranParser.STAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stat_variableContext stat_variable() {
			return GetRuleContext<Stat_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRMSG() { return GetToken(FortranParser.ERRMSG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Errmsg_variableContext errmsg_variable() {
			return GetRuleContext<Errmsg_variableContext>(0);
		}
		public Sync_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sync_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSync_stat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSync_stat(this);
		}
	}

	[RuleVersion(0)]
	public Sync_statContext sync_stat() {
		Sync_statContext _localctx = new Sync_statContext(Context, State);
		EnterRule(_localctx, 724, RULE_sync_stat);
		try {
			State = 4050;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4044;
				Match(STAT);
				State = 4045;
				Match(ASSIGN);
				State = 4046;
				stat_variable();
				}
				break;
			case ERRMSG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4047;
				Match(ERRMSG);
				State = 4048;
				Match(ASSIGN);
				State = 4049;
				errmsg_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sync_images_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(FortranParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGES() { return GetToken(FortranParser.IMAGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Image_setContext image_set() {
			return GetRuleContext<Image_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sync_stat_listContext sync_stat_list() {
			return GetRuleContext<Sync_stat_listContext>(0);
		}
		public Sync_images_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sync_images_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSync_images_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSync_images_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Sync_images_stmtContext sync_images_stmt() {
		Sync_images_stmtContext _localctx = new Sync_images_stmtContext(Context, State);
		EnterRule(_localctx, 726, RULE_sync_images_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4052;
			Match(SYNC);
			State = 4053;
			Match(IMAGES);
			State = 4054;
			Match(LPAREN);
			State = 4055;
			image_set();
			State = 4058;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4056;
				Match(COMMA);
				State = 4057;
				sync_stat_list();
				}
			}

			State = 4060;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Image_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_exprContext int_expr() {
			return GetRuleContext<Int_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		public Image_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_image_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImage_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImage_set(this);
		}
	}

	[RuleVersion(0)]
	public Image_setContext image_set() {
		Image_setContext _localctx = new Image_setContext(Context, State);
		EnterRule(_localctx, 728, RULE_image_set);
		try {
			State = 4064;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROGRAM:
			case END:
			case FUNCTION:
			case LPAREN:
			case SUBROUTINE:
			case MODULE:
			case SUBMODULE:
			case BLOCK:
			case DATA:
			case INTRINSIC:
			case NONINTRINSIC:
			case OPERATOR:
			case PLUS:
			case MINUS:
			case NOT:
			case READ:
			case FORMATTED:
			case UNFORMATTED:
			case WRITE:
			case ASSIGNMENT:
			case USE:
			case ONLY:
			case IMPORT:
			case NONE:
			case ALL:
			case KIND:
			case INTEGER:
			case LEN:
			case REAL:
			case DOUBLE:
			case PRECISION:
			case COMPLEX:
			case CHARACTER:
			case LOGICAL:
			case TYPE:
			case CLASS:
			case EXTERNAL:
			case IMPLICIT:
			case PARAMETER:
			case FORMAT:
			case BIND:
			case RESULT:
			case ENTRY:
			case DOT:
			case TRUE:
			case FALSE:
			case STAT:
			case TEAM:
			case TEAMNUMBER:
			case LBRACKET:
			case RE:
			case IM:
			case LPARENSLASH:
			case SEQUENCE:
			case PRIVATE:
			case PROCEDURE:
			case NOPASS:
			case PASS:
			case POINTER:
			case ALLOCATABLE:
			case CODIMENSION:
			case CONTIGUOUS:
			case DIMENSION:
			case PUBLIC:
			case CONTAINS:
			case FINAL:
			case GENERIC:
			case DEFERRED:
			case NONOVERRIDABLE:
			case INTENT:
			case OPTIONAL:
			case PROTECTED:
			case SAVE:
			case IN:
			case OUT:
			case INOUT:
			case INTERFACE:
			case ABSTRACT:
			case ENUM:
			case ENUMERATOR:
			case ASYNCHRONOUS:
			case TARGET:
			case VALUE:
			case VOLATILE:
			case EQUIVALENCE:
			case COMMON:
			case NAMELIST:
			case EVENT:
			case WAIT:
			case UNTILCOUNT:
			case POST:
			case ERRMSG:
			case ERROR:
			case STOP:
			case QUIET:
			case ENDFILE:
			case DEALLOCATE:
			case CYCLE:
			case CONTINUE:
			case CLOSE:
			case UNIT:
			case IOSTAT:
			case IOMSG:
			case ERR:
			case STATUS:
			case CALL:
			case BACKSPACE:
			case ALLOCATE:
			case MOLD:
			case SOURCE:
			case OPEN:
			case ACCESS:
			case ACTION:
			case BLANK:
			case DECIMAL:
			case DELIM:
			case ENCODING:
			case FILE:
			case FORM:
			case NEWUNIT:
			case PAD:
			case POSITION:
			case RECL:
			case ROUND:
			case SIGN:
			case NULLIFY:
			case LOCK:
			case ACQUIREDLOCK:
			case INQUIRE:
			case IOLENGTH:
			case EXIST:
			case ID:
			case NAMED:
			case NEXTREC:
			case NUMBER:
			case OPENED:
			case PENDING:
			case POS:
			case READWRITE:
			case SEQUENTIAL:
			case SIZE:
			case STREAM:
			case IF:
			case GO:
			case TO:
			case NEWINDEX:
			case FLUSH:
			case FAIL:
			case IMAGE:
			case EXIT:
			case FORALL:
			case WHERE:
			case EOR:
			case UNLOCK:
			case SYNC:
			case MEMORY:
			case IMAGES:
			case REWIND:
			case RETURN:
			case FMT:
			case NML:
			case ADVANCE:
			case REC:
			case PRINT:
			case CRITICAL:
			case CHANGE:
			case SELECT:
			case CASE:
			case DEFAULT:
			case ASSOCIATE:
			case ELSEWHERE:
			case IS:
			case RANK:
			case ELSE:
			case THEN:
			case DO:
			case CONCURRENT:
			case WHILE:
			case SHARED:
			case LOCAL:
			case LOCALINIT:
			case RECURSIVE:
			case PURE:
			case NONRECURSIVE:
			case IMPURE:
			case ELEMENTAL:
			case NOTIFY:
			case TYPEOF:
			case CLASSOF:
			case ENUMERATION:
			case DIRECT:
			case LEADINGZERO:
			case REDUCE:
			case SIMPLE:
			case DEFINEDUNARYBINARYOP:
			case BINARY_CONSTANT:
			case OCTAL_CONSTANT:
			case HEX_CONSTANT:
			case SQUOTE_REP_CHAR:
			case DQUOTE_REP_CHAR:
			case NAME:
			case DIGITSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4062;
				int_expr();
				}
				break;
			case ASTERIK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4063;
				Match(ASTERIK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sync_memory_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(FortranParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(FortranParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sync_stat_listContext sync_stat_list() {
			return GetRuleContext<Sync_stat_listContext>(0);
		}
		public Sync_memory_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sync_memory_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSync_memory_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSync_memory_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Sync_memory_stmtContext sync_memory_stmt() {
		Sync_memory_stmtContext _localctx = new Sync_memory_stmtContext(Context, State);
		EnterRule(_localctx, 730, RULE_sync_memory_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4066;
			Match(SYNC);
			State = 4067;
			Match(MEMORY);
			State = 4073;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
			case 1:
				{
				State = 4068;
				Match(LPAREN);
				State = 4070;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAT || _la==ERRMSG) {
					{
					State = 4069;
					sync_stat_list();
					}
				}

				State = 4072;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sync_team_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNC() { return GetToken(FortranParser.SYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEAM() { return GetToken(FortranParser.TEAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Team_valueContext team_value() {
			return GetRuleContext<Team_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sync_stat_listContext sync_stat_list() {
			return GetRuleContext<Sync_stat_listContext>(0);
		}
		public Sync_team_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sync_team_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSync_team_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSync_team_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Sync_team_stmtContext sync_team_stmt() {
		Sync_team_stmtContext _localctx = new Sync_team_stmtContext(Context, State);
		EnterRule(_localctx, 732, RULE_sync_team_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4075;
			Match(SYNC);
			State = 4076;
			Match(TEAM);
			State = 4077;
			Match(LPAREN);
			State = 4078;
			team_value();
			State = 4081;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4079;
				Match(COMMA);
				State = 4080;
				sync_stat_list();
				}
			}

			State = 4083;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_post_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(FortranParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POST() { return GetToken(FortranParser.POST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Event_variableContext event_variable() {
			return GetRuleContext<Event_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sync_stat_listContext sync_stat_list() {
			return GetRuleContext<Sync_stat_listContext>(0);
		}
		public Event_post_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_post_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEvent_post_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEvent_post_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Event_post_stmtContext event_post_stmt() {
		Event_post_stmtContext _localctx = new Event_post_stmtContext(Context, State);
		EnterRule(_localctx, 734, RULE_event_post_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4085;
			Match(EVENT);
			State = 4086;
			Match(POST);
			State = 4087;
			Match(LPAREN);
			State = 4088;
			event_variable();
			State = 4091;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4089;
				Match(COMMA);
				State = 4090;
				sync_stat_list();
				}
			}

			State = 4093;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_variableContext scalar_variable() {
			return GetRuleContext<Scalar_variableContext>(0);
		}
		public Event_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEvent_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEvent_variable(this);
		}
	}

	[RuleVersion(0)]
	public Event_variableContext event_variable() {
		Event_variableContext _localctx = new Event_variableContext(Context, State);
		EnterRule(_localctx, 736, RULE_event_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4095;
			scalar_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_wait_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(FortranParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(FortranParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Event_variableContext event_variable() {
			return GetRuleContext<Event_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Event_wait_spec_listContext event_wait_spec_list() {
			return GetRuleContext<Event_wait_spec_listContext>(0);
		}
		public Event_wait_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_wait_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEvent_wait_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEvent_wait_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Event_wait_stmtContext event_wait_stmt() {
		Event_wait_stmtContext _localctx = new Event_wait_stmtContext(Context, State);
		EnterRule(_localctx, 738, RULE_event_wait_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4097;
			Match(EVENT);
			State = 4098;
			Match(WAIT);
			State = 4099;
			Match(LPAREN);
			State = 4100;
			event_variable();
			State = 4103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4101;
				Match(COMMA);
				State = 4102;
				event_wait_spec_list();
				}
			}

			State = 4105;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_wait_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Until_specContext until_spec() {
			return GetRuleContext<Until_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sync_statContext sync_stat() {
			return GetRuleContext<Sync_statContext>(0);
		}
		public Event_wait_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_wait_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEvent_wait_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEvent_wait_spec(this);
		}
	}

	[RuleVersion(0)]
	public Event_wait_specContext event_wait_spec() {
		Event_wait_specContext _localctx = new Event_wait_specContext(Context, State);
		EnterRule(_localctx, 740, RULE_event_wait_spec);
		try {
			State = 4109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNTILCOUNT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4107;
				until_spec();
				}
				break;
			case STAT:
			case ERRMSG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4108;
				sync_stat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Until_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTILCOUNT() { return GetToken(FortranParser.UNTILCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		public Until_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_until_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterUntil_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitUntil_spec(this);
		}
	}

	[RuleVersion(0)]
	public Until_specContext until_spec() {
		Until_specContext _localctx = new Until_specContext(Context, State);
		EnterRule(_localctx, 742, RULE_until_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4111;
			Match(UNTILCOUNT);
			State = 4112;
			Match(ASSIGN);
			State = 4113;
			scalar_int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Form_team_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORM() { return GetToken(FortranParser.FORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEAM() { return GetToken(FortranParser.TEAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Team_numberContext team_number() {
			return GetRuleContext<Team_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Team_variableContext team_variable() {
			return GetRuleContext<Team_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Form_team_spec_listContext form_team_spec_list() {
			return GetRuleContext<Form_team_spec_listContext>(0);
		}
		public Form_team_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form_team_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterForm_team_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitForm_team_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Form_team_stmtContext form_team_stmt() {
		Form_team_stmtContext _localctx = new Form_team_stmtContext(Context, State);
		EnterRule(_localctx, 744, RULE_form_team_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4115;
			Match(FORM);
			State = 4116;
			Match(TEAM);
			State = 4117;
			Match(LPAREN);
			State = 4118;
			team_number();
			State = 4119;
			Match(COMMA);
			State = 4120;
			team_variable();
			State = 4123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4121;
				Match(COMMA);
				State = 4122;
				form_team_spec_list();
				}
			}

			State = 4125;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Team_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		public Team_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_team_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterTeam_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitTeam_number(this);
		}
	}

	[RuleVersion(0)]
	public Team_numberContext team_number() {
		Team_numberContext _localctx = new Team_numberContext(Context, State);
		EnterRule(_localctx, 746, RULE_team_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4127;
			scalar_int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Team_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_variableContext scalar_variable() {
			return GetRuleContext<Scalar_variableContext>(0);
		}
		public Team_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_team_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterTeam_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitTeam_variable(this);
		}
	}

	[RuleVersion(0)]
	public Team_variableContext team_variable() {
		Team_variableContext _localctx = new Team_variableContext(Context, State);
		EnterRule(_localctx, 748, RULE_team_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4129;
			scalar_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Form_team_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWINDEX() { return GetToken(FortranParser.NEWINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sync_statContext sync_stat() {
			return GetRuleContext<Sync_statContext>(0);
		}
		public Form_team_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form_team_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterForm_team_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitForm_team_spec(this);
		}
	}

	[RuleVersion(0)]
	public Form_team_specContext form_team_spec() {
		Form_team_specContext _localctx = new Form_team_specContext(Context, State);
		EnterRule(_localctx, 750, RULE_form_team_spec);
		try {
			State = 4135;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEWINDEX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4131;
				Match(NEWINDEX);
				State = 4132;
				Match(ASSIGN);
				State = 4133;
				scalar_int_expr();
				}
				break;
			case STAT:
			case ERRMSG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4134;
				sync_stat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(FortranParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lock_variableContext lock_variable() {
			return GetRuleContext<Lock_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lock_stat_listContext lock_stat_list() {
			return GetRuleContext<Lock_stat_listContext>(0);
		}
		public Lock_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLock_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLock_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Lock_stmtContext lock_stmt() {
		Lock_stmtContext _localctx = new Lock_stmtContext(Context, State);
		EnterRule(_localctx, 752, RULE_lock_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4137;
			Match(LOCK);
			State = 4138;
			Match(LPAREN);
			State = 4139;
			lock_variable();
			State = 4142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4140;
				Match(COMMA);
				State = 4141;
				lock_stat_list();
				}
			}

			State = 4144;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_statContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACQUIREDLOCK() { return GetToken(FortranParser.ACQUIREDLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_logical_variableContext scalar_logical_variable() {
			return GetRuleContext<Scalar_logical_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sync_statContext sync_stat() {
			return GetRuleContext<Sync_statContext>(0);
		}
		public Lock_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLock_stat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLock_stat(this);
		}
	}

	[RuleVersion(0)]
	public Lock_statContext lock_stat() {
		Lock_statContext _localctx = new Lock_statContext(Context, State);
		EnterRule(_localctx, 754, RULE_lock_stat);
		try {
			State = 4150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACQUIREDLOCK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4146;
				Match(ACQUIREDLOCK);
				State = 4147;
				Match(ASSIGN);
				State = 4148;
				scalar_logical_variable();
				}
				break;
			case STAT:
			case ERRMSG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4149;
				sync_stat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unlock_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK() { return GetToken(FortranParser.UNLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lock_variableContext lock_variable() {
			return GetRuleContext<Lock_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sync_stat_listContext sync_stat_list() {
			return GetRuleContext<Sync_stat_listContext>(0);
		}
		public Unlock_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlock_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterUnlock_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitUnlock_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Unlock_stmtContext unlock_stmt() {
		Unlock_stmtContext _localctx = new Unlock_stmtContext(Context, State);
		EnterRule(_localctx, 756, RULE_unlock_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4152;
			Match(UNLOCK);
			State = 4153;
			Match(LPAREN);
			State = 4154;
			lock_variable();
			State = 4157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4155;
				Match(COMMA);
				State = 4156;
				sync_stat_list();
				}
			}

			State = 4159;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_variableContext scalar_variable() {
			return GetRuleContext<Scalar_variableContext>(0);
		}
		public Lock_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLock_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLock_variable(this);
		}
	}

	[RuleVersion(0)]
	public Lock_variableContext lock_variable() {
		Lock_variableContext _localctx = new Lock_variableContext(Context, State);
		EnterRule(_localctx, 758, RULE_lock_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4161;
			scalar_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Io_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_unit_numberContext file_unit_number() {
			return GetRuleContext<File_unit_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Internal_file_variableContext internal_file_variable() {
			return GetRuleContext<Internal_file_variableContext>(0);
		}
		public Io_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_io_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIo_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIo_unit(this);
		}
	}

	[RuleVersion(0)]
	public Io_unitContext io_unit() {
		Io_unitContext _localctx = new Io_unitContext(Context, State);
		EnterRule(_localctx, 760, RULE_io_unit);
		try {
			State = 4166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,374,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4163;
				file_unit_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4164;
				Match(ASTERIK);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4165;
				internal_file_variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_unit_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		public File_unit_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_unit_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFile_unit_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFile_unit_number(this);
		}
	}

	[RuleVersion(0)]
	public File_unit_numberContext file_unit_number() {
		File_unit_numberContext _localctx = new File_unit_numberContext(Context, State);
		EnterRule(_localctx, 762, RULE_file_unit_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4168;
			scalar_int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Internal_file_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Char_variableContext char_variable() {
			return GetRuleContext<Char_variableContext>(0);
		}
		public Internal_file_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internal_file_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInternal_file_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInternal_file_variable(this);
		}
	}

	[RuleVersion(0)]
	public Internal_file_variableContext internal_file_variable() {
		Internal_file_variableContext _localctx = new Internal_file_variableContext(Context, State);
		EnterRule(_localctx, 764, RULE_internal_file_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4170;
			char_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(FortranParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Connect_spec_listContext connect_spec_list() {
			return GetRuleContext<Connect_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Open_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterOpen_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitOpen_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Open_stmtContext open_stmt() {
		Open_stmtContext _localctx = new Open_stmtContext(Context, State);
		EnterRule(_localctx, 766, RULE_open_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4172;
			Match(OPEN);
			State = 4173;
			Match(LPAREN);
			State = 4174;
			connect_spec_list();
			State = 4175;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Connect_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_unit_numberContext file_unit_number() {
			return GetRuleContext<File_unit_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(FortranParser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(FortranParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_default_char_exprContext scalar_default_char_expr() {
			return GetRuleContext<Scalar_default_char_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(FortranParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNCHRONOUS() { return GetToken(FortranParser.ASYNCHRONOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANK() { return GetToken(FortranParser.BLANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(FortranParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIM() { return GetToken(FortranParser.DELIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(FortranParser.ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERR() { return GetToken(FortranParser.ERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(FortranParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_name_exprContext file_name_expr() {
			return GetRuleContext<File_name_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORM() { return GetToken(FortranParser.FORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOMSG() { return GetToken(FortranParser.IOMSG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Iomsg_variableContext iomsg_variable() {
			return GetRuleContext<Iomsg_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOSTAT() { return GetToken(FortranParser.IOSTAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stat_variableContext stat_variable() {
			return GetRuleContext<Stat_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADINGZERO() { return GetToken(FortranParser.LEADINGZERO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWUNIT() { return GetToken(FortranParser.NEWUNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_variableContext scalar_int_variable() {
			return GetRuleContext<Scalar_int_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAD() { return GetToken(FortranParser.PAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(FortranParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECL() { return GetToken(FortranParser.RECL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(FortranParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(FortranParser.SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(FortranParser.STATUS, 0); }
		public Connect_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connect_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConnect_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConnect_spec(this);
		}
	}

	[RuleVersion(0)]
	public Connect_specContext connect_spec() {
		Connect_specContext _localctx = new Connect_specContext(Context, State);
		EnterRule(_localctx, 768, RULE_connect_spec);
		try {
			State = 4242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,376,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4179;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,375,Context) ) {
				case 1:
					{
					State = 4177;
					Match(UNIT);
					State = 4178;
					Match(ASSIGN);
					}
					break;
				}
				State = 4181;
				file_unit_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4182;
				Match(ACCESS);
				State = 4183;
				Match(ASSIGN);
				State = 4184;
				scalar_default_char_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4185;
				Match(ACTION);
				State = 4186;
				Match(ASSIGN);
				State = 4187;
				scalar_default_char_expr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4188;
				Match(ASYNCHRONOUS);
				State = 4189;
				Match(ASSIGN);
				State = 4190;
				scalar_default_char_expr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4191;
				Match(BLANK);
				State = 4192;
				Match(ASSIGN);
				State = 4193;
				scalar_default_char_expr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4194;
				Match(DECIMAL);
				State = 4195;
				Match(ASSIGN);
				State = 4196;
				scalar_default_char_expr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4197;
				Match(DELIM);
				State = 4198;
				Match(ASSIGN);
				State = 4199;
				scalar_default_char_expr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4200;
				Match(ENCODING);
				State = 4201;
				Match(ASSIGN);
				State = 4202;
				scalar_default_char_expr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4203;
				Match(ERR);
				State = 4204;
				Match(ASSIGN);
				State = 4205;
				label();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4206;
				Match(FILE);
				State = 4207;
				Match(ASSIGN);
				State = 4208;
				file_name_expr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4209;
				Match(FORM);
				State = 4210;
				Match(ASSIGN);
				State = 4211;
				scalar_default_char_expr();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4212;
				Match(IOMSG);
				State = 4213;
				Match(ASSIGN);
				State = 4214;
				iomsg_variable();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4215;
				Match(IOSTAT);
				State = 4216;
				Match(ASSIGN);
				State = 4217;
				stat_variable();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4218;
				Match(LEADINGZERO);
				State = 4219;
				Match(ASSIGN);
				State = 4220;
				scalar_default_char_expr();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4221;
				Match(NEWUNIT);
				State = 4222;
				Match(ASSIGN);
				State = 4223;
				scalar_int_variable();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 4224;
				Match(PAD);
				State = 4225;
				Match(ASSIGN);
				State = 4226;
				scalar_default_char_expr();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 4227;
				Match(POSITION);
				State = 4228;
				Match(ASSIGN);
				State = 4229;
				scalar_default_char_expr();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 4230;
				Match(RECL);
				State = 4231;
				Match(ASSIGN);
				State = 4232;
				scalar_int_expr();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 4233;
				Match(ROUND);
				State = 4234;
				Match(ASSIGN);
				State = 4235;
				scalar_default_char_expr();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 4236;
				Match(SIGN);
				State = 4237;
				Match(ASSIGN);
				State = 4238;
				scalar_default_char_expr();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 4239;
				Match(STATUS);
				State = 4240;
				Match(ASSIGN);
				State = 4241;
				scalar_default_char_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_name_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_default_char_exprContext scalar_default_char_expr() {
			return GetRuleContext<Scalar_default_char_exprContext>(0);
		}
		public File_name_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_name_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFile_name_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFile_name_expr(this);
		}
	}

	[RuleVersion(0)]
	public File_name_exprContext file_name_expr() {
		File_name_exprContext _localctx = new File_name_exprContext(Context, State);
		EnterRule(_localctx, 770, RULE_file_name_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4244;
			scalar_default_char_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iomsg_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_default_char_variableContext scalar_default_char_variable() {
			return GetRuleContext<Scalar_default_char_variableContext>(0);
		}
		public Iomsg_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iomsg_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIomsg_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIomsg_variable(this);
		}
	}

	[RuleVersion(0)]
	public Iomsg_variableContext iomsg_variable() {
		Iomsg_variableContext _localctx = new Iomsg_variableContext(Context, State);
		EnterRule(_localctx, 772, RULE_iomsg_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4246;
			scalar_default_char_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Close_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(FortranParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Close_spec_listContext close_spec_list() {
			return GetRuleContext<Close_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Close_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterClose_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitClose_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Close_stmtContext close_stmt() {
		Close_stmtContext _localctx = new Close_stmtContext(Context, State);
		EnterRule(_localctx, 774, RULE_close_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4248;
			Match(CLOSE);
			State = 4249;
			Match(LPAREN);
			State = 4250;
			close_spec_list();
			State = 4251;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Close_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_unit_numberContext file_unit_number() {
			return GetRuleContext<File_unit_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(FortranParser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOSTAT() { return GetToken(FortranParser.IOSTAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stat_variableContext stat_variable() {
			return GetRuleContext<Stat_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOMSG() { return GetToken(FortranParser.IOMSG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Iomsg_variableContext iomsg_variable() {
			return GetRuleContext<Iomsg_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERR() { return GetToken(FortranParser.ERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(FortranParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_default_char_exprContext scalar_default_char_expr() {
			return GetRuleContext<Scalar_default_char_exprContext>(0);
		}
		public Close_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterClose_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitClose_spec(this);
		}
	}

	[RuleVersion(0)]
	public Close_specContext close_spec() {
		Close_specContext _localctx = new Close_specContext(Context, State);
		EnterRule(_localctx, 776, RULE_close_spec);
		try {
			State = 4270;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,378,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4255;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,377,Context) ) {
				case 1:
					{
					State = 4253;
					Match(UNIT);
					State = 4254;
					Match(ASSIGN);
					}
					break;
				}
				State = 4257;
				file_unit_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4258;
				Match(IOSTAT);
				State = 4259;
				Match(ASSIGN);
				State = 4260;
				stat_variable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4261;
				Match(IOMSG);
				State = 4262;
				Match(ASSIGN);
				State = 4263;
				iomsg_variable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4264;
				Match(ERR);
				State = 4265;
				Match(ASSIGN);
				State = 4266;
				label();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4267;
				Match(STATUS);
				State = 4268;
				Match(ASSIGN);
				State = 4269;
				scalar_default_char_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Read_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(FortranParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Io_control_spec_listContext io_control_spec_list() {
			return GetRuleContext<Io_control_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Input_item_listContext input_item_list() {
			return GetRuleContext<Input_item_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormatContext format() {
			return GetRuleContext<FormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		public Read_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterRead_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitRead_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Read_stmtContext read_stmt() {
		Read_stmtContext _localctx = new Read_stmtContext(Context, State);
		EnterRule(_localctx, 778, RULE_read_stmt);
		int _la;
		try {
			State = 4285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,381,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4272;
				Match(READ);
				State = 4273;
				Match(LPAREN);
				State = 4274;
				io_control_spec_list();
				State = 4275;
				Match(RPAREN);
				State = 4277;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,379,Context) ) {
				case 1:
					{
					State = 4276;
					input_item_list();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4279;
				Match(READ);
				State = 4280;
				format();
				State = 4283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4281;
					Match(COMMA);
					State = 4282;
					input_item_list();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Write_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(FortranParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Io_control_spec_listContext io_control_spec_list() {
			return GetRuleContext<Io_control_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Output_item_listContext output_item_list() {
			return GetRuleContext<Output_item_listContext>(0);
		}
		public Write_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterWrite_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitWrite_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Write_stmtContext write_stmt() {
		Write_stmtContext _localctx = new Write_stmtContext(Context, State);
		EnterRule(_localctx, 780, RULE_write_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4287;
			Match(WRITE);
			State = 4288;
			Match(LPAREN);
			State = 4289;
			io_control_spec_list();
			State = 4290;
			Match(RPAREN);
			State = 4292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,382,Context) ) {
			case 1:
				{
				State = 4291;
				output_item_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(FortranParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormatContext format() {
			return GetRuleContext<FormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Output_item_listContext output_item_list() {
			return GetRuleContext<Output_item_listContext>(0);
		}
		public Print_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPrint_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPrint_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Print_stmtContext print_stmt() {
		Print_stmtContext _localctx = new Print_stmtContext(Context, State);
		EnterRule(_localctx, 782, RULE_print_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4294;
			Match(PRINT);
			State = 4295;
			format();
			State = 4298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4296;
				Match(COMMA);
				State = 4297;
				output_item_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Io_control_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Io_unitContext io_unit() {
			return GetRuleContext<Io_unitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(FortranParser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormatContext format() {
			return GetRuleContext<FormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FMT() { return GetToken(FortranParser.FMT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namelist_group_nameContext namelist_group_name() {
			return GetRuleContext<Namelist_group_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NML() { return GetToken(FortranParser.NML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADVANCE() { return GetToken(FortranParser.ADVANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_default_char_exprContext scalar_default_char_expr() {
			return GetRuleContext<Scalar_default_char_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNCHRONOUS() { return GetToken(FortranParser.ASYNCHRONOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_default_char_constant_exprContext scalar_default_char_constant_expr() {
			return GetRuleContext<Scalar_default_char_constant_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANK() { return GetToken(FortranParser.BLANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(FortranParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIM() { return GetToken(FortranParser.DELIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR() { return GetToken(FortranParser.EOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERR() { return GetToken(FortranParser.ERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FortranParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Id_variableContext id_variable() {
			return GetRuleContext<Id_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOMSG() { return GetToken(FortranParser.IOMSG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Iomsg_variableContext iomsg_variable() {
			return GetRuleContext<Iomsg_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOSTAT() { return GetToken(FortranParser.IOSTAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stat_variableContext stat_variable() {
			return GetRuleContext<Stat_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADINGZERO() { return GetToken(FortranParser.LEADINGZERO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAD() { return GetToken(FortranParser.PAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POS() { return GetToken(FortranParser.POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REC() { return GetToken(FortranParser.REC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(FortranParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(FortranParser.SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(FortranParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_variableContext scalar_int_variable() {
			return GetRuleContext<Scalar_int_variableContext>(0);
		}
		public Io_control_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_io_control_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIo_control_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIo_control_spec(this);
		}
	}

	[RuleVersion(0)]
	public Io_control_specContext io_control_spec() {
		Io_control_specContext _localctx = new Io_control_specContext(Context, State);
		EnterRule(_localctx, 784, RULE_io_control_spec);
		try {
			State = 4369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,387,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4302;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
				case 1:
					{
					State = 4300;
					Match(UNIT);
					State = 4301;
					Match(ASSIGN);
					}
					break;
				}
				State = 4304;
				io_unit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4307;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,385,Context) ) {
				case 1:
					{
					State = 4305;
					Match(FMT);
					State = 4306;
					Match(ASSIGN);
					}
					break;
				}
				State = 4309;
				format();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4312;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,386,Context) ) {
				case 1:
					{
					State = 4310;
					Match(NML);
					State = 4311;
					Match(ASSIGN);
					}
					break;
				}
				State = 4314;
				namelist_group_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4315;
				Match(ADVANCE);
				State = 4316;
				Match(ASSIGN);
				State = 4317;
				scalar_default_char_expr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4318;
				Match(ASYNCHRONOUS);
				State = 4319;
				Match(ASSIGN);
				State = 4320;
				scalar_default_char_constant_expr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4321;
				Match(BLANK);
				State = 4322;
				Match(ASSIGN);
				State = 4323;
				scalar_default_char_expr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4324;
				Match(DECIMAL);
				State = 4325;
				Match(ASSIGN);
				State = 4326;
				scalar_default_char_expr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4327;
				Match(DELIM);
				State = 4328;
				Match(ASSIGN);
				State = 4329;
				scalar_default_char_expr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4330;
				Match(END);
				State = 4331;
				Match(ASSIGN);
				State = 4332;
				label();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4333;
				Match(EOR);
				State = 4334;
				Match(ASSIGN);
				State = 4335;
				label();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4336;
				Match(ERR);
				State = 4337;
				Match(ASSIGN);
				State = 4338;
				label();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4339;
				Match(ID);
				State = 4340;
				Match(ASSIGN);
				State = 4341;
				id_variable();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4342;
				Match(IOMSG);
				State = 4343;
				Match(ASSIGN);
				State = 4344;
				iomsg_variable();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4345;
				Match(IOSTAT);
				State = 4346;
				Match(ASSIGN);
				State = 4347;
				stat_variable();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4348;
				Match(LEADINGZERO);
				State = 4349;
				Match(ASSIGN);
				State = 4350;
				scalar_default_char_expr();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 4351;
				Match(PAD);
				State = 4352;
				Match(ASSIGN);
				State = 4353;
				scalar_default_char_expr();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 4354;
				Match(POS);
				State = 4355;
				Match(ASSIGN);
				State = 4356;
				scalar_int_expr();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 4357;
				Match(REC);
				State = 4358;
				Match(ASSIGN);
				State = 4359;
				scalar_int_expr();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 4360;
				Match(ROUND);
				State = 4361;
				Match(ASSIGN);
				State = 4362;
				scalar_default_char_expr();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 4363;
				Match(SIGN);
				State = 4364;
				Match(ASSIGN);
				State = 4365;
				scalar_default_char_expr();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 4366;
				Match(SIZE);
				State = 4367;
				Match(ASSIGN);
				State = 4368;
				scalar_int_variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_variableContext scalar_int_variable() {
			return GetRuleContext<Scalar_int_variableContext>(0);
		}
		public Id_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterId_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitId_variable(this);
		}
	}

	[RuleVersion(0)]
	public Id_variableContext id_variable() {
		Id_variableContext _localctx = new Id_variableContext(Context, State);
		EnterRule(_localctx, 786, RULE_id_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4371;
			scalar_int_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Default_char_exprContext default_char_expr() {
			return GetRuleContext<Default_char_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		public FormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFormat(this);
		}
	}

	[RuleVersion(0)]
	public FormatContext format() {
		FormatContext _localctx = new FormatContext(Context, State);
		EnterRule(_localctx, 788, RULE_format);
		try {
			State = 4376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,388,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4373;
				default_char_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4374;
				label();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4375;
				Match(ASTERIK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Io_implied_doContext io_implied_do() {
			return GetRuleContext<Io_implied_doContext>(0);
		}
		public Input_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInput_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInput_item(this);
		}
	}

	[RuleVersion(0)]
	public Input_itemContext input_item() {
		Input_itemContext _localctx = new Input_itemContext(Context, State);
		EnterRule(_localctx, 790, RULE_input_item);
		try {
			State = 4380;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,389,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4378;
				variable(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4379;
				io_implied_do();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Io_implied_doContext io_implied_do() {
			return GetRuleContext<Io_implied_doContext>(0);
		}
		public Output_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterOutput_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitOutput_item(this);
		}
	}

	[RuleVersion(0)]
	public Output_itemContext output_item() {
		Output_itemContext _localctx = new Output_itemContext(Context, State);
		EnterRule(_localctx, 792, RULE_output_item);
		try {
			State = 4384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,390,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4382;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4383;
				io_implied_do();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Io_implied_doContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Io_implied_do_object_listContext io_implied_do_object_list() {
			return GetRuleContext<Io_implied_do_object_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Io_implied_do_controlContext io_implied_do_control() {
			return GetRuleContext<Io_implied_do_controlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Io_implied_doContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_io_implied_do; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIo_implied_do(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIo_implied_do(this);
		}
	}

	[RuleVersion(0)]
	public Io_implied_doContext io_implied_do() {
		Io_implied_doContext _localctx = new Io_implied_doContext(Context, State);
		EnterRule(_localctx, 794, RULE_io_implied_do);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4386;
			Match(LPAREN);
			State = 4387;
			io_implied_do_object_list();
			State = 4388;
			Match(COMMA);
			State = 4389;
			io_implied_do_control();
			State = 4390;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Io_implied_do_objectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Input_itemContext input_item() {
			return GetRuleContext<Input_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Output_itemContext output_item() {
			return GetRuleContext<Output_itemContext>(0);
		}
		public Io_implied_do_objectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_io_implied_do_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIo_implied_do_object(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIo_implied_do_object(this);
		}
	}

	[RuleVersion(0)]
	public Io_implied_do_objectContext io_implied_do_object() {
		Io_implied_do_objectContext _localctx = new Io_implied_do_objectContext(Context, State);
		EnterRule(_localctx, 796, RULE_io_implied_do_object);
		try {
			State = 4394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,391,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4392;
				input_item();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4393;
				output_item();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Io_implied_do_controlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Do_variableContext do_variable() {
			return GetRuleContext<Do_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext[] scalar_int_expr() {
			return GetRuleContexts<Scalar_int_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr(int i) {
			return GetRuleContext<Scalar_int_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Io_implied_do_controlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_io_implied_do_control; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIo_implied_do_control(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIo_implied_do_control(this);
		}
	}

	[RuleVersion(0)]
	public Io_implied_do_controlContext io_implied_do_control() {
		Io_implied_do_controlContext _localctx = new Io_implied_do_controlContext(Context, State);
		EnterRule(_localctx, 798, RULE_io_implied_do_control);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4396;
			do_variable();
			State = 4397;
			Match(ASSIGN);
			State = 4398;
			scalar_int_expr();
			State = 4399;
			Match(COMMA);
			State = 4400;
			scalar_int_expr();
			State = 4403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 4401;
				Match(COMMA);
				State = 4402;
				scalar_int_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dtv_type_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(FortranParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Derived_type_specContext derived_type_spec() {
			return GetRuleContext<Derived_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(FortranParser.CLASS, 0); }
		public Dtv_type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dtv_type_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDtv_type_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDtv_type_spec(this);
		}
	}

	[RuleVersion(0)]
	public Dtv_type_specContext dtv_type_spec() {
		Dtv_type_specContext _localctx = new Dtv_type_specContext(Context, State);
		EnterRule(_localctx, 800, RULE_dtv_type_spec);
		try {
			State = 4415;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4405;
				Match(TYPE);
				State = 4406;
				Match(LPAREN);
				State = 4407;
				derived_type_spec();
				State = 4408;
				Match(RPAREN);
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4410;
				Match(CLASS);
				State = 4411;
				Match(LPAREN);
				State = 4412;
				derived_type_spec();
				State = 4413;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wait_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(FortranParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Wait_spec_listContext wait_spec_list() {
			return GetRuleContext<Wait_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Wait_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wait_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterWait_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitWait_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Wait_stmtContext wait_stmt() {
		Wait_stmtContext _localctx = new Wait_stmtContext(Context, State);
		EnterRule(_localctx, 802, RULE_wait_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4417;
			Match(WAIT);
			State = 4418;
			Match(LPAREN);
			State = 4419;
			wait_spec_list();
			State = 4420;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wait_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_unit_numberContext file_unit_number() {
			return GetRuleContext<File_unit_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(FortranParser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR() { return GetToken(FortranParser.EOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERR() { return GetToken(FortranParser.ERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FortranParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOMSG() { return GetToken(FortranParser.IOMSG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Iomsg_variableContext iomsg_variable() {
			return GetRuleContext<Iomsg_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOSTAT() { return GetToken(FortranParser.IOSTAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stat_variableContext stat_variable() {
			return GetRuleContext<Stat_variableContext>(0);
		}
		public Wait_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wait_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterWait_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitWait_spec(this);
		}
	}

	[RuleVersion(0)]
	public Wait_specContext wait_spec() {
		Wait_specContext _localctx = new Wait_specContext(Context, State);
		EnterRule(_localctx, 804, RULE_wait_spec);
		try {
			State = 4445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,395,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4424;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,394,Context) ) {
				case 1:
					{
					State = 4422;
					Match(UNIT);
					State = 4423;
					Match(ASSIGN);
					}
					break;
				}
				State = 4426;
				file_unit_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4427;
				Match(END);
				State = 4428;
				Match(ASSIGN);
				State = 4429;
				label();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4430;
				Match(EOR);
				State = 4431;
				Match(ASSIGN);
				State = 4432;
				label();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4433;
				Match(ERR);
				State = 4434;
				Match(ASSIGN);
				State = 4435;
				label();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4436;
				Match(ID);
				State = 4437;
				Match(ASSIGN);
				State = 4438;
				scalar_int_expr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4439;
				Match(IOMSG);
				State = 4440;
				Match(ASSIGN);
				State = 4441;
				iomsg_variable();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4442;
				Match(IOSTAT);
				State = 4443;
				Match(ASSIGN);
				State = 4444;
				stat_variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Backspace_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKSPACE() { return GetToken(FortranParser.BACKSPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_unit_numberContext file_unit_number() {
			return GetRuleContext<File_unit_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Position_spec_listContext position_spec_list() {
			return GetRuleContext<Position_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Backspace_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backspace_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBackspace_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBackspace_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Backspace_stmtContext backspace_stmt() {
		Backspace_stmtContext _localctx = new Backspace_stmtContext(Context, State);
		EnterRule(_localctx, 806, RULE_backspace_stmt);
		try {
			State = 4454;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,396,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4447;
				Match(BACKSPACE);
				State = 4448;
				file_unit_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4449;
				Match(BACKSPACE);
				State = 4450;
				Match(LPAREN);
				State = 4451;
				position_spec_list();
				State = 4452;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Endfile_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDFILE() { return GetToken(FortranParser.ENDFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_unit_numberContext file_unit_number() {
			return GetRuleContext<File_unit_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Position_spec_listContext position_spec_list() {
			return GetRuleContext<Position_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Endfile_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endfile_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEndfile_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEndfile_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Endfile_stmtContext endfile_stmt() {
		Endfile_stmtContext _localctx = new Endfile_stmtContext(Context, State);
		EnterRule(_localctx, 808, RULE_endfile_stmt);
		try {
			State = 4463;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,397,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4456;
				Match(ENDFILE);
				State = 4457;
				file_unit_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4458;
				Match(ENDFILE);
				State = 4459;
				Match(LPAREN);
				State = 4460;
				position_spec_list();
				State = 4461;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rewind_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REWIND() { return GetToken(FortranParser.REWIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_unit_numberContext file_unit_number() {
			return GetRuleContext<File_unit_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Position_spec_listContext position_spec_list() {
			return GetRuleContext<Position_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Rewind_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewind_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterRewind_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitRewind_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Rewind_stmtContext rewind_stmt() {
		Rewind_stmtContext _localctx = new Rewind_stmtContext(Context, State);
		EnterRule(_localctx, 810, RULE_rewind_stmt);
		try {
			State = 4472;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,398,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4465;
				Match(REWIND);
				State = 4466;
				file_unit_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4467;
				Match(REWIND);
				State = 4468;
				Match(LPAREN);
				State = 4469;
				position_spec_list();
				State = 4470;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Position_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_unit_numberContext file_unit_number() {
			return GetRuleContext<File_unit_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(FortranParser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOMSG() { return GetToken(FortranParser.IOMSG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Iomsg_variableContext iomsg_variable() {
			return GetRuleContext<Iomsg_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOSTAT() { return GetToken(FortranParser.IOSTAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stat_variableContext stat_variable() {
			return GetRuleContext<Stat_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERR() { return GetToken(FortranParser.ERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public Position_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_position_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPosition_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPosition_spec(this);
		}
	}

	[RuleVersion(0)]
	public Position_specContext position_spec() {
		Position_specContext _localctx = new Position_specContext(Context, State);
		EnterRule(_localctx, 812, RULE_position_spec);
		try {
			State = 4488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,400,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4476;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,399,Context) ) {
				case 1:
					{
					State = 4474;
					Match(UNIT);
					State = 4475;
					Match(ASSIGN);
					}
					break;
				}
				State = 4478;
				file_unit_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4479;
				Match(IOMSG);
				State = 4480;
				Match(ASSIGN);
				State = 4481;
				iomsg_variable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4482;
				Match(IOSTAT);
				State = 4483;
				Match(ASSIGN);
				State = 4484;
				stat_variable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4485;
				Match(ERR);
				State = 4486;
				Match(ASSIGN);
				State = 4487;
				label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flush_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH() { return GetToken(FortranParser.FLUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_unit_numberContext file_unit_number() {
			return GetRuleContext<File_unit_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Flush_spec_listContext flush_spec_list() {
			return GetRuleContext<Flush_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Flush_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flush_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFlush_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFlush_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Flush_stmtContext flush_stmt() {
		Flush_stmtContext _localctx = new Flush_stmtContext(Context, State);
		EnterRule(_localctx, 814, RULE_flush_stmt);
		try {
			State = 4497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,401,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4490;
				Match(FLUSH);
				State = 4491;
				file_unit_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4492;
				Match(FLUSH);
				State = 4493;
				Match(LPAREN);
				State = 4494;
				flush_spec_list();
				State = 4495;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flush_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_unit_numberContext file_unit_number() {
			return GetRuleContext<File_unit_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(FortranParser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOSTAT() { return GetToken(FortranParser.IOSTAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stat_variableContext stat_variable() {
			return GetRuleContext<Stat_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOMSG() { return GetToken(FortranParser.IOMSG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Iomsg_variableContext iomsg_variable() {
			return GetRuleContext<Iomsg_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERR() { return GetToken(FortranParser.ERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public Flush_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flush_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFlush_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFlush_spec(this);
		}
	}

	[RuleVersion(0)]
	public Flush_specContext flush_spec() {
		Flush_specContext _localctx = new Flush_specContext(Context, State);
		EnterRule(_localctx, 816, RULE_flush_spec);
		try {
			State = 4513;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,403,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4501;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,402,Context) ) {
				case 1:
					{
					State = 4499;
					Match(UNIT);
					State = 4500;
					Match(ASSIGN);
					}
					break;
				}
				State = 4503;
				file_unit_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4504;
				Match(IOSTAT);
				State = 4505;
				Match(ASSIGN);
				State = 4506;
				stat_variable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4507;
				Match(IOMSG);
				State = 4508;
				Match(ASSIGN);
				State = 4509;
				iomsg_variable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4510;
				Match(ERR);
				State = 4511;
				Match(ASSIGN);
				State = 4512;
				label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inquire_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INQUIRE() { return GetToken(FortranParser.INQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Inquire_spec_listContext inquire_spec_list() {
			return GetRuleContext<Inquire_spec_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOLENGTH() { return GetToken(FortranParser.IOLENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_variableContext scalar_int_variable() {
			return GetRuleContext<Scalar_int_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Output_item_listContext output_item_list() {
			return GetRuleContext<Output_item_listContext>(0);
		}
		public Inquire_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inquire_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInquire_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInquire_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Inquire_stmtContext inquire_stmt() {
		Inquire_stmtContext _localctx = new Inquire_stmtContext(Context, State);
		EnterRule(_localctx, 818, RULE_inquire_stmt);
		try {
			State = 4528;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,404,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4515;
				Match(INQUIRE);
				State = 4516;
				Match(LPAREN);
				State = 4517;
				inquire_spec_list();
				State = 4518;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4520;
				Match(INQUIRE);
				State = 4521;
				Match(LPAREN);
				State = 4522;
				Match(IOLENGTH);
				State = 4523;
				Match(ASSIGN);
				State = 4524;
				scalar_int_variable();
				State = 4525;
				Match(RPAREN);
				State = 4526;
				output_item_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inquire_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_unit_numberContext file_unit_number() {
			return GetRuleContext<File_unit_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIT() { return GetToken(FortranParser.UNIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(FortranParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_name_exprContext file_name_expr() {
			return GetRuleContext<File_name_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(FortranParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_default_char_variableContext scalar_default_char_variable() {
			return GetRuleContext<Scalar_default_char_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(FortranParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNCHRONOUS() { return GetToken(FortranParser.ASYNCHRONOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANK() { return GetToken(FortranParser.BLANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(FortranParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIM() { return GetToken(FortranParser.DELIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECT() { return GetToken(FortranParser.DIRECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(FortranParser.ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERR() { return GetToken(FortranParser.ERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIST() { return GetToken(FortranParser.EXIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_logical_variableContext scalar_logical_variable() {
			return GetRuleContext<Scalar_logical_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORM() { return GetToken(FortranParser.FORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMATTED() { return GetToken(FortranParser.FORMATTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FortranParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOMSG() { return GetToken(FortranParser.IOMSG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Iomsg_variableContext iomsg_variable() {
			return GetRuleContext<Iomsg_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IOSTAT() { return GetToken(FortranParser.IOSTAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stat_variableContext stat_variable() {
			return GetRuleContext<Stat_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADINGZERO() { return GetToken(FortranParser.LEADINGZERO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAAM() { return GetToken(FortranParser.NAAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMED() { return GetToken(FortranParser.NAMED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXTREC() { return GetToken(FortranParser.NEXTREC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_variableContext scalar_int_variable() {
			return GetRuleContext<Scalar_int_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(FortranParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENED() { return GetToken(FortranParser.OPENED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAD() { return GetToken(FortranParser.PAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PENDING() { return GetToken(FortranParser.PENDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POS() { return GetToken(FortranParser.POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(FortranParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(FortranParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READWRITE() { return GetToken(FortranParser.READWRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECL() { return GetToken(FortranParser.RECL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(FortranParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENTIAL() { return GetToken(FortranParser.SEQUENTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(FortranParser.SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIZE() { return GetToken(FortranParser.SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(FortranParser.STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNFORMATTED() { return GetToken(FortranParser.UNFORMATTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(FortranParser.WRITE, 0); }
		public Inquire_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inquire_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInquire_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInquire_spec(this);
		}
	}

	[RuleVersion(0)]
	public Inquire_specContext inquire_spec() {
		Inquire_specContext _localctx = new Inquire_specContext(Context, State);
		EnterRule(_localctx, 820, RULE_inquire_spec);
		try {
			State = 4643;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,406,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4532;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,405,Context) ) {
				case 1:
					{
					State = 4530;
					Match(UNIT);
					State = 4531;
					Match(ASSIGN);
					}
					break;
				}
				State = 4534;
				file_unit_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4535;
				Match(FILE);
				State = 4536;
				Match(ASSIGN);
				State = 4537;
				file_name_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4538;
				Match(ACCESS);
				State = 4539;
				Match(ASSIGN);
				State = 4540;
				scalar_default_char_variable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4541;
				Match(ACTION);
				State = 4542;
				Match(ASSIGN);
				State = 4543;
				scalar_default_char_variable();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4544;
				Match(ASYNCHRONOUS);
				State = 4545;
				Match(ASSIGN);
				State = 4546;
				scalar_default_char_variable();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4547;
				Match(BLANK);
				State = 4548;
				Match(ASSIGN);
				State = 4549;
				scalar_default_char_variable();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4550;
				Match(DECIMAL);
				State = 4551;
				Match(ASSIGN);
				State = 4552;
				scalar_default_char_variable();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4553;
				Match(DELIM);
				State = 4554;
				Match(ASSIGN);
				State = 4555;
				scalar_default_char_variable();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4556;
				Match(DIRECT);
				State = 4557;
				Match(ASSIGN);
				State = 4558;
				scalar_default_char_variable();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4559;
				Match(ENCODING);
				State = 4560;
				Match(ASSIGN);
				State = 4561;
				scalar_default_char_variable();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4562;
				Match(ERR);
				State = 4563;
				Match(ASSIGN);
				State = 4564;
				label();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4565;
				Match(EXIST);
				State = 4566;
				Match(ASSIGN);
				State = 4567;
				scalar_logical_variable();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4568;
				Match(FORM);
				State = 4569;
				Match(ASSIGN);
				State = 4570;
				scalar_default_char_variable();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4571;
				Match(FORMATTED);
				State = 4572;
				Match(ASSIGN);
				State = 4573;
				scalar_default_char_variable();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4574;
				Match(ID);
				State = 4575;
				Match(ASSIGN);
				State = 4576;
				scalar_int_expr();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 4577;
				Match(IOMSG);
				State = 4578;
				Match(ASSIGN);
				State = 4579;
				iomsg_variable();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 4580;
				Match(IOSTAT);
				State = 4581;
				Match(ASSIGN);
				State = 4582;
				stat_variable();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 4583;
				Match(LEADINGZERO);
				State = 4584;
				Match(ASSIGN);
				State = 4585;
				scalar_default_char_variable();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 4586;
				Match(NAAM);
				State = 4587;
				Match(ASSIGN);
				State = 4588;
				scalar_default_char_variable();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 4589;
				Match(NAMED);
				State = 4590;
				Match(ASSIGN);
				State = 4591;
				scalar_logical_variable();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 4592;
				Match(NEXTREC);
				State = 4593;
				Match(ASSIGN);
				State = 4594;
				scalar_int_variable();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 4595;
				Match(NUMBER);
				State = 4596;
				Match(ASSIGN);
				State = 4597;
				scalar_int_variable();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 4598;
				Match(OPENED);
				State = 4599;
				Match(ASSIGN);
				State = 4600;
				scalar_logical_variable();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 4601;
				Match(PAD);
				State = 4602;
				Match(ASSIGN);
				State = 4603;
				scalar_default_char_variable();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 4604;
				Match(PENDING);
				State = 4605;
				Match(ASSIGN);
				State = 4606;
				scalar_logical_variable();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 4607;
				Match(POS);
				State = 4608;
				Match(ASSIGN);
				State = 4609;
				scalar_int_variable();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 4610;
				Match(POSITION);
				State = 4611;
				Match(ASSIGN);
				State = 4612;
				scalar_default_char_variable();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 4613;
				Match(READ);
				State = 4614;
				Match(ASSIGN);
				State = 4615;
				scalar_default_char_variable();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 4616;
				Match(READWRITE);
				State = 4617;
				Match(ASSIGN);
				State = 4618;
				scalar_default_char_variable();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 4619;
				Match(RECL);
				State = 4620;
				Match(ASSIGN);
				State = 4621;
				scalar_int_variable();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 4622;
				Match(ROUND);
				State = 4623;
				Match(ASSIGN);
				State = 4624;
				scalar_default_char_variable();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 4625;
				Match(SEQUENTIAL);
				State = 4626;
				Match(ASSIGN);
				State = 4627;
				scalar_default_char_variable();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 4628;
				Match(SIGN);
				State = 4629;
				Match(ASSIGN);
				State = 4630;
				scalar_default_char_variable();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 4631;
				Match(SIZE);
				State = 4632;
				Match(ASSIGN);
				State = 4633;
				scalar_int_variable();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 4634;
				Match(STREAM);
				State = 4635;
				Match(ASSIGN);
				State = 4636;
				scalar_default_char_variable();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 4637;
				Match(UNFORMATTED);
				State = 4638;
				Match(ASSIGN);
				State = 4639;
				scalar_default_char_variable();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 4640;
				Match(WRITE);
				State = 4641;
				Match(ASSIGN);
				State = 4642;
				scalar_default_char_variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Format_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(FortranParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Format_specificationContext format_specification() {
			return GetRuleContext<Format_specificationContext>(0);
		}
		public Format_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFormat_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFormat_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Format_stmtContext format_stmt() {
		Format_stmtContext _localctx = new Format_stmtContext(Context, State);
		EnterRule(_localctx, 822, RULE_format_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4645;
			Match(FORMAT);
			State = 4646;
			format_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Format_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Format_itemsContext format_items() {
			return GetRuleContext<Format_itemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unlimited_format_itemContext unlimited_format_item() {
			return GetRuleContext<Unlimited_format_itemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		public Format_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFormat_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFormat_specification(this);
		}
	}

	[RuleVersion(0)]
	public Format_specificationContext format_specification() {
		Format_specificationContext _localctx = new Format_specificationContext(Context, State);
		EnterRule(_localctx, 824, RULE_format_specification);
		int _la;
		try {
			State = 4662;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,409,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4648;
				Match(LPAREN);
				State = 4650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5664683782576448L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1019726465L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -5667710002819760129L) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & 34292629391L) != 0)) {
					{
					State = 4649;
					format_items();
					}
				}

				State = 4652;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4653;
				Match(LPAREN);
				State = 4657;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5664683782576448L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1019726465L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & -5667710002819760129L) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & 34292629391L) != 0)) {
					{
					State = 4654;
					format_items();
					State = 4655;
					Match(COMMA);
					}
				}

				State = 4659;
				unlimited_format_item();
				State = 4660;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Format_itemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Format_itemContext[] format_item() {
			return GetRuleContexts<Format_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Format_itemContext format_item(int i) {
			return GetRuleContext<Format_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Format_itemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format_items; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFormat_items(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFormat_items(this);
		}
	}

	[RuleVersion(0)]
	public Format_itemsContext format_items() {
		Format_itemsContext _localctx = new Format_itemsContext(Context, State);
		EnterRule(_localctx, 826, RULE_format_items);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4664;
			format_item();
			State = 4671;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,411,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4666;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4665;
						Match(COMMA);
						}
					}

					State = 4668;
					format_item();
					}
					} 
				}
				State = 4673;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,411,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Format_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_edit_descContext data_edit_desc() {
			return GetRuleContext<Data_edit_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RContext r() {
			return GetRuleContext<RContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Control_edit_descContext control_edit_desc() {
			return GetRuleContext<Control_edit_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Char_string_edit_descContext char_string_edit_desc() {
			return GetRuleContext<Char_string_edit_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Format_itemsContext format_items() {
			return GetRuleContext<Format_itemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Format_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_format_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFormat_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFormat_item(this);
		}
	}

	[RuleVersion(0)]
	public Format_itemContext format_item() {
		Format_itemContext _localctx = new Format_itemContext(Context, State);
		EnterRule(_localctx, 828, RULE_format_item);
		int _la;
		try {
			State = 4687;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,414,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGITSTRING) {
					{
					State = 4674;
					r();
					}
				}

				State = 4677;
				data_edit_desc();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4678;
				control_edit_desc();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4679;
				char_string_edit_desc();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGITSTRING) {
					{
					State = 4680;
					r();
					}
				}

				State = 4683;
				Match(LPAREN);
				State = 4684;
				format_items();
				State = 4685;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unlimited_format_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Format_itemsContext format_items() {
			return GetRuleContext<Format_itemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Unlimited_format_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlimited_format_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterUnlimited_format_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitUnlimited_format_item(this);
		}
	}

	[RuleVersion(0)]
	public Unlimited_format_itemContext unlimited_format_item() {
		Unlimited_format_itemContext _localctx = new Unlimited_format_itemContext(Context, State);
		EnterRule(_localctx, 830, RULE_unlimited_format_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4689;
			Match(ASTERIK);
			State = 4690;
			Match(LPAREN);
			State = 4691;
			format_items();
			State = 4692;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_literal_constantContext int_literal_constant() {
			return GetRuleContext<Int_literal_constantContext>(0);
		}
		public RContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_r; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitR(this);
		}
	}

	[RuleVersion(0)]
	public RContext r() {
		RContext _localctx = new RContext(Context, State);
		EnterRule(_localctx, 832, RULE_r);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4694;
			int_literal_constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_edit_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I() { return GetToken(FortranParser.I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WContext w() {
			return GetRuleContext<WContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(FortranParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MContext m() {
			return GetRuleContext<MContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B() { return GetToken(FortranParser.B, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode O() { return GetToken(FortranParser.O, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Z() { return GetToken(FortranParser.Z, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F() { return GetToken(FortranParser.F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DContext d() {
			return GetRuleContext<DContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] E() { return GetTokens(FortranParser.E); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode E(int i) {
			return GetToken(FortranParser.E, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EContext e() {
			return GetRuleContext<EContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EN() { return GetToken(FortranParser.EN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ES() { return GetToken(FortranParser.ES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EX() { return GetToken(FortranParser.EX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode G() { return GetToken(FortranParser.G, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L() { return GetToken(FortranParser.L, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(FortranParser.A, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(FortranParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode D() { return GetToken(FortranParser.D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DT() { return GetToken(FortranParser.DT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Char_literal_constantContext char_literal_constant() {
			return GetRuleContext<Char_literal_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public V_listContext v_list() {
			return GetRuleContext<V_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Data_edit_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_edit_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_edit_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_edit_desc(this);
		}
	}

	[RuleVersion(0)]
	public Data_edit_descContext data_edit_desc() {
		Data_edit_descContext _localctx = new Data_edit_descContext(Context, State);
		EnterRule(_localctx, 834, RULE_data_edit_desc);
		int _la;
		try {
			State = 4789;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case I:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4696;
				Match(I);
				State = 4697;
				w();
				State = 4700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 4698;
					Match(DOT);
					State = 4699;
					m();
					}
				}

				}
				break;
			case B:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4702;
				Match(B);
				State = 4703;
				w();
				State = 4706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 4704;
					Match(DOT);
					State = 4705;
					m();
					}
				}

				}
				break;
			case O:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4708;
				Match(O);
				State = 4709;
				w();
				State = 4712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 4710;
					Match(DOT);
					State = 4711;
					m();
					}
				}

				}
				break;
			case Z:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4714;
				Match(Z);
				State = 4715;
				w();
				State = 4718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 4716;
					Match(DOT);
					State = 4717;
					m();
					}
				}

				}
				break;
			case F:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4720;
				Match(F);
				State = 4721;
				w();
				State = 4722;
				Match(DOT);
				State = 4723;
				d();
				}
				break;
			case E:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4725;
				Match(E);
				State = 4726;
				w();
				State = 4727;
				Match(DOT);
				State = 4728;
				d();
				State = 4731;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,419,Context) ) {
				case 1:
					{
					State = 4729;
					Match(E);
					State = 4730;
					e();
					}
					break;
				}
				}
				break;
			case EN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4733;
				Match(EN);
				State = 4734;
				w();
				State = 4735;
				Match(DOT);
				State = 4736;
				d();
				State = 4739;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,420,Context) ) {
				case 1:
					{
					State = 4737;
					Match(E);
					State = 4738;
					e();
					}
					break;
				}
				}
				break;
			case ES:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4741;
				Match(ES);
				State = 4742;
				w();
				State = 4743;
				Match(DOT);
				State = 4744;
				d();
				State = 4747;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,421,Context) ) {
				case 1:
					{
					State = 4745;
					Match(E);
					State = 4746;
					e();
					}
					break;
				}
				}
				break;
			case EX:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4749;
				Match(EX);
				State = 4750;
				w();
				State = 4751;
				Match(DOT);
				State = 4752;
				d();
				State = 4755;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,422,Context) ) {
				case 1:
					{
					State = 4753;
					Match(E);
					State = 4754;
					e();
					}
					break;
				}
				}
				break;
			case G:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4757;
				Match(G);
				State = 4758;
				w();
				State = 4765;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 4759;
					Match(DOT);
					State = 4760;
					d();
					State = 4763;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,423,Context) ) {
					case 1:
						{
						State = 4761;
						Match(E);
						State = 4762;
						e();
						}
						break;
					}
					}
				}

				}
				break;
			case L:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4767;
				Match(L);
				State = 4768;
				w();
				}
				break;
			case A:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4769;
				Match(A);
				State = 4771;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,425,Context) ) {
				case 1:
					{
					State = 4770;
					w();
					}
					break;
				}
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4773;
				Match(AT);
				}
				break;
			case D:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4774;
				Match(D);
				State = 4775;
				w();
				State = 4776;
				Match(DOT);
				State = 4777;
				d();
				}
				break;
			case DT:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4779;
				Match(DT);
				State = 4781;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,426,Context) ) {
				case 1:
					{
					State = 4780;
					char_literal_constant();
					}
					break;
				}
				State = 4787;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,427,Context) ) {
				case 1:
					{
					State = 4783;
					Match(LPAREN);
					State = 4784;
					v_list();
					State = 4785;
					Match(RPAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_literal_constantContext int_literal_constant() {
			return GetRuleContext<Int_literal_constantContext>(0);
		}
		public WContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_w; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterW(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitW(this);
		}
	}

	[RuleVersion(0)]
	public WContext w() {
		WContext _localctx = new WContext(Context, State);
		EnterRule(_localctx, 836, RULE_w);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4791;
			int_literal_constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_literal_constantContext int_literal_constant() {
			return GetRuleContext<Int_literal_constantContext>(0);
		}
		public MContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_m; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterM(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitM(this);
		}
	}

	[RuleVersion(0)]
	public MContext m() {
		MContext _localctx = new MContext(Context, State);
		EnterRule(_localctx, 838, RULE_m);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4793;
			int_literal_constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_literal_constantContext int_literal_constant() {
			return GetRuleContext<Int_literal_constantContext>(0);
		}
		public DContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_d; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitD(this);
		}
	}

	[RuleVersion(0)]
	public DContext d() {
		DContext _localctx = new DContext(Context, State);
		EnterRule(_localctx, 840, RULE_d);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4795;
			int_literal_constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_literal_constantContext int_literal_constant() {
			return GetRuleContext<Int_literal_constantContext>(0);
		}
		public EContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_e; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitE(this);
		}
	}

	[RuleVersion(0)]
	public EContext e() {
		EContext _localctx = new EContext(Context, State);
		EnterRule(_localctx, 842, RULE_e);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4797;
			int_literal_constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_int_literal_constantContext signed_int_literal_constant() {
			return GetRuleContext<Signed_int_literal_constantContext>(0);
		}
		public VContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_v; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterV(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitV(this);
		}
	}

	[RuleVersion(0)]
	public VContext v() {
		VContext _localctx = new VContext(Context, State);
		EnterRule(_localctx, 844, RULE_v);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4799;
			signed_int_literal_constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Control_edit_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Blank_interp_edit_descContext blank_interp_edit_desc() {
			return GetRuleContext<Blank_interp_edit_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decimal_edit_descContext decimal_edit_desc() {
			return GetRuleContext<Decimal_edit_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Leading_zero_edit_descContext leading_zero_edit_desc() {
			return GetRuleContext<Leading_zero_edit_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Position_edit_descContext position_edit_desc() {
			return GetRuleContext<Position_edit_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Round_edit_descContext round_edit_desc() {
			return GetRuleContext<Round_edit_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sign_edit_descContext sign_edit_desc() {
			return GetRuleContext<Sign_edit_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KContext k() {
			return GetRuleContext<KContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode P() { return GetToken(FortranParser.P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(FortranParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RContext r() {
			return GetRuleContext<RContext>(0);
		}
		public Control_edit_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control_edit_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterControl_edit_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitControl_edit_desc(this);
		}
	}

	[RuleVersion(0)]
	public Control_edit_descContext control_edit_desc() {
		Control_edit_descContext _localctx = new Control_edit_descContext(Context, State);
		EnterRule(_localctx, 846, RULE_control_edit_desc);
		int _la;
		try {
			State = 4815;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,430,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4801;
				blank_interp_edit_desc();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4802;
				decimal_edit_desc();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4803;
				leading_zero_edit_desc();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4804;
				position_edit_desc();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4805;
				round_edit_desc();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4806;
				sign_edit_desc();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4807;
				k();
				State = 4808;
				Match(P);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4810;
				Match(COLON);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4812;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DIGITSTRING) {
					{
					State = 4811;
					r();
					}
				}

				State = 4814;
				Match(SLASH);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_int_literal_constantContext signed_int_literal_constant() {
			return GetRuleContext<Signed_int_literal_constantContext>(0);
		}
		public KContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_k; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterK(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitK(this);
		}
	}

	[RuleVersion(0)]
	public KContext k() {
		KContext _localctx = new KContext(Context, State);
		EnterRule(_localctx, 848, RULE_k);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4817;
			signed_int_literal_constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Position_edit_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T() { return GetToken(FortranParser.T, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NContext n() {
			return GetRuleContext<NContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TL() { return GetToken(FortranParser.TL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TR() { return GetToken(FortranParser.TR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X() { return GetToken(FortranParser.X, 0); }
		public Position_edit_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_position_edit_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPosition_edit_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPosition_edit_desc(this);
		}
	}

	[RuleVersion(0)]
	public Position_edit_descContext position_edit_desc() {
		Position_edit_descContext _localctx = new Position_edit_descContext(Context, State);
		EnterRule(_localctx, 850, RULE_position_edit_desc);
		try {
			State = 4828;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4819;
				Match(T);
				State = 4820;
				n();
				}
				break;
			case TL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4821;
				Match(TL);
				State = 4822;
				n();
				}
				break;
			case TR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4823;
				Match(TR);
				State = 4824;
				n();
				}
				break;
			case DIGITSTRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4825;
				n();
				State = 4826;
				Match(X);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_literal_constantContext int_literal_constant() {
			return GetRuleContext<Int_literal_constantContext>(0);
		}
		public NContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_n; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterN(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitN(this);
		}
	}

	[RuleVersion(0)]
	public NContext n() {
		NContext _localctx = new NContext(Context, State);
		EnterRule(_localctx, 852, RULE_n);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4830;
			int_literal_constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Blank_interp_edit_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BN() { return GetToken(FortranParser.BN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BZ() { return GetToken(FortranParser.BZ, 0); }
		public Blank_interp_edit_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blank_interp_edit_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBlank_interp_edit_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBlank_interp_edit_desc(this);
		}
	}

	[RuleVersion(0)]
	public Blank_interp_edit_descContext blank_interp_edit_desc() {
		Blank_interp_edit_descContext _localctx = new Blank_interp_edit_descContext(Context, State);
		EnterRule(_localctx, 854, RULE_blank_interp_edit_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4832;
			_la = TokenStream.LA(1);
			if ( !(_la==BN || _la==BZ) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decimal_edit_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DC() { return GetToken(FortranParser.DC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DP() { return GetToken(FortranParser.DP, 0); }
		public Decimal_edit_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal_edit_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDecimal_edit_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDecimal_edit_desc(this);
		}
	}

	[RuleVersion(0)]
	public Decimal_edit_descContext decimal_edit_desc() {
		Decimal_edit_descContext _localctx = new Decimal_edit_descContext(Context, State);
		EnterRule(_localctx, 856, RULE_decimal_edit_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4834;
			_la = TokenStream.LA(1);
			if ( !(_la==DC || _la==DP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Leading_zero_edit_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LZS() { return GetToken(FortranParser.LZS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LZP() { return GetToken(FortranParser.LZP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LZ() { return GetToken(FortranParser.LZ, 0); }
		public Leading_zero_edit_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leading_zero_edit_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLeading_zero_edit_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLeading_zero_edit_desc(this);
		}
	}

	[RuleVersion(0)]
	public Leading_zero_edit_descContext leading_zero_edit_desc() {
		Leading_zero_edit_descContext _localctx = new Leading_zero_edit_descContext(Context, State);
		EnterRule(_localctx, 858, RULE_leading_zero_edit_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4836;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Round_edit_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RU() { return GetToken(FortranParser.RU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RD() { return GetToken(FortranParser.RD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RZ() { return GetToken(FortranParser.RZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RN() { return GetToken(FortranParser.RN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RC() { return GetToken(FortranParser.RC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(FortranParser.RP, 0); }
		public Round_edit_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_round_edit_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterRound_edit_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitRound_edit_desc(this);
		}
	}

	[RuleVersion(0)]
	public Round_edit_descContext round_edit_desc() {
		Round_edit_descContext _localctx = new Round_edit_descContext(Context, State);
		EnterRule(_localctx, 860, RULE_round_edit_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4838;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 269)) & ~0x3f) == 0 && ((1L << (_la - 269)) & 63L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sign_edit_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SS() { return GetToken(FortranParser.SS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(FortranParser.SP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode S() { return GetToken(FortranParser.S, 0); }
		public Sign_edit_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign_edit_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSign_edit_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSign_edit_desc(this);
		}
	}

	[RuleVersion(0)]
	public Sign_edit_descContext sign_edit_desc() {
		Sign_edit_descContext _localctx = new Sign_edit_descContext(Context, State);
		EnterRule(_localctx, 862, RULE_sign_edit_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4840;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_string_edit_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Char_literal_constantContext char_literal_constant() {
			return GetRuleContext<Char_literal_constantContext>(0);
		}
		public Char_string_edit_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_string_edit_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterChar_string_edit_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitChar_string_edit_desc(this);
		}
	}

	[RuleVersion(0)]
	public Char_string_edit_descContext char_string_edit_desc() {
		Char_string_edit_descContext _localctx = new Char_string_edit_descContext(Context, State);
		EnterRule(_localctx, 864, RULE_char_string_edit_desc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4842;
			char_literal_constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Program_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(FortranParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Program_nameContext program_name() {
			return GetRuleContext<Program_nameContext>(0);
		}
		public Program_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProgram_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProgram_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Program_stmtContext program_stmt() {
		Program_stmtContext _localctx = new Program_stmtContext(Context, State);
		EnterRule(_localctx, 866, RULE_program_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4844;
			Match(PROGRAM);
			State = 4845;
			program_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_program_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(FortranParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Program_nameContext program_name() {
			return GetRuleContext<Program_nameContext>(0);
		}
		public End_program_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_program_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_program_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_program_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_program_stmtContext end_program_stmt() {
		End_program_stmtContext _localctx = new End_program_stmtContext(Context, State);
		EnterRule(_localctx, 868, RULE_end_program_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4847;
			Match(END);
			State = 4852;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,433,Context) ) {
			case 1:
				{
				State = 4848;
				Match(PROGRAM);
				State = 4850;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,432,Context) ) {
				case 1:
					{
					State = 4849;
					program_name();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(FortranParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		public Module_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterModule_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitModule_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Module_stmtContext module_stmt() {
		Module_stmtContext _localctx = new Module_stmtContext(Context, State);
		EnterRule(_localctx, 870, RULE_module_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4854;
			Match(MODULE);
			State = 4855;
			module_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_module_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(FortranParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		public End_module_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_module_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_module_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_module_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_module_stmtContext end_module_stmt() {
		End_module_stmtContext _localctx = new End_module_stmtContext(Context, State);
		EnterRule(_localctx, 872, RULE_end_module_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4857;
			Match(END);
			State = 4862;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,435,Context) ) {
			case 1:
				{
				State = 4858;
				Match(MODULE);
				State = 4860;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,434,Context) ) {
				case 1:
					{
					State = 4859;
					module_name();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(FortranParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rename_listContext rename_list() {
			return GetRuleContext<Rename_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_natureContext module_nature() {
			return GetRuleContext<Module_natureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(FortranParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Only_listContext only_list() {
			return GetRuleContext<Only_listContext>(0);
		}
		public Use_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterUse_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitUse_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Use_stmtContext use_stmt() {
		Use_stmtContext _localctx = new Use_stmtContext(Context, State);
		EnterRule(_localctx, 874, RULE_use_stmt);
		int _la;
		try {
			State = 4892;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,442,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4864;
				Match(USE);
				State = 4870;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA || _la==DOUBLECOLON) {
					{
					State = 4867;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4865;
						Match(COMMA);
						State = 4866;
						module_nature();
						}
					}

					State = 4869;
					Match(DOUBLECOLON);
					}
				}

				State = 4872;
				module_name();
				State = 4875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4873;
					Match(COMMA);
					State = 4874;
					rename_list();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4877;
				Match(USE);
				State = 4883;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA || _la==DOUBLECOLON) {
					{
					State = 4880;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4878;
						Match(COMMA);
						State = 4879;
						module_nature();
						}
					}

					State = 4882;
					Match(DOUBLECOLON);
					}
				}

				State = 4885;
				module_name();
				State = 4886;
				Match(COMMA);
				State = 4887;
				Match(ONLY);
				State = 4888;
				Match(COLON);
				State = 4890;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,441,Context) ) {
				case 1:
					{
					State = 4889;
					only_list();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_natureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRINSIC() { return GetToken(FortranParser.INTRINSIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONINTRINSIC() { return GetToken(FortranParser.NONINTRINSIC, 0); }
		public Module_natureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_nature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterModule_nature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitModule_nature(this);
		}
	}

	[RuleVersion(0)]
	public Module_natureContext module_nature() {
		Module_natureContext _localctx = new Module_natureContext(Context, State);
		EnterRule(_localctx, 876, RULE_module_nature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4894;
			_la = TokenStream.LA(1);
			if ( !(_la==INTRINSIC || _la==NONINTRINSIC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_nameContext local_name() {
			return GetRuleContext<Local_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLIES() { return GetToken(FortranParser.IMPLIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Use_nameContext use_name() {
			return GetRuleContext<Use_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPERATOR() { return GetTokens(FortranParser.OPERATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR(int i) {
			return GetToken(FortranParser.OPERATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(FortranParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(FortranParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Local_defined_operatorContext local_defined_operator() {
			return GetRuleContext<Local_defined_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(FortranParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(FortranParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_defined_operatorContext use_defined_operator() {
			return GetRuleContext<Use_defined_operatorContext>(0);
		}
		public RenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterRename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitRename(this);
		}
	}

	[RuleVersion(0)]
	public RenameContext rename() {
		RenameContext _localctx = new RenameContext(Context, State);
		EnterRule(_localctx, 878, RULE_rename);
		try {
			State = 4910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,443,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4896;
				local_name();
				State = 4897;
				Match(IMPLIES);
				State = 4898;
				use_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4900;
				Match(OPERATOR);
				State = 4901;
				Match(LPAREN);
				State = 4902;
				local_defined_operator();
				State = 4903;
				Match(RPAREN);
				State = 4904;
				Match(IMPLIES);
				State = 4905;
				Match(OPERATOR);
				State = 4906;
				Match(LPAREN);
				State = 4907;
				use_defined_operator();
				State = 4908;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnlyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_specContext generic_spec() {
			return GetRuleContext<Generic_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Only_use_nameContext only_use_name() {
			return GetRuleContext<Only_use_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameContext rename() {
			return GetRuleContext<RenameContext>(0);
		}
		public OnlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_only; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterOnly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitOnly(this);
		}
	}

	[RuleVersion(0)]
	public OnlyContext only() {
		OnlyContext _localctx = new OnlyContext(Context, State);
		EnterRule(_localctx, 880, RULE_only);
		try {
			State = 4915;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,444,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4912;
				generic_spec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4913;
				only_use_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4914;
				rename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Only_use_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Use_nameContext use_name() {
			return GetRuleContext<Use_nameContext>(0);
		}
		public Only_use_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_only_use_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterOnly_use_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitOnly_use_name(this);
		}
	}

	[RuleVersion(0)]
	public Only_use_nameContext only_use_name() {
		Only_use_nameContext _localctx = new Only_use_nameContext(Context, State);
		EnterRule(_localctx, 882, RULE_only_use_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4917;
			use_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_defined_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Defined_unary_opContext defined_unary_op() {
			return GetRuleContext<Defined_unary_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Defined_binary_opContext defined_binary_op() {
			return GetRuleContext<Defined_binary_opContext>(0);
		}
		public Local_defined_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_defined_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLocal_defined_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLocal_defined_operator(this);
		}
	}

	[RuleVersion(0)]
	public Local_defined_operatorContext local_defined_operator() {
		Local_defined_operatorContext _localctx = new Local_defined_operatorContext(Context, State);
		EnterRule(_localctx, 884, RULE_local_defined_operator);
		try {
			State = 4921;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,445,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4919;
				defined_unary_op();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4920;
				defined_binary_op();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_defined_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Defined_unary_opContext defined_unary_op() {
			return GetRuleContext<Defined_unary_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Defined_binary_opContext defined_binary_op() {
			return GetRuleContext<Defined_binary_opContext>(0);
		}
		public Use_defined_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_defined_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterUse_defined_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitUse_defined_operator(this);
		}
	}

	[RuleVersion(0)]
	public Use_defined_operatorContext use_defined_operator() {
		Use_defined_operatorContext _localctx = new Use_defined_operatorContext(Context, State);
		EnterRule(_localctx, 886, RULE_use_defined_operator);
		try {
			State = 4925;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,446,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4923;
				defined_unary_op();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4924;
				defined_binary_op();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Submodule_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBMODULE() { return GetToken(FortranParser.SUBMODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parent_identifierContext parent_identifier() {
			return GetRuleContext<Parent_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Submodule_nameContext submodule_name() {
			return GetRuleContext<Submodule_nameContext>(0);
		}
		public Submodule_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_submodule_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSubmodule_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSubmodule_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Submodule_stmtContext submodule_stmt() {
		Submodule_stmtContext _localctx = new Submodule_stmtContext(Context, State);
		EnterRule(_localctx, 888, RULE_submodule_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4927;
			Match(SUBMODULE);
			State = 4928;
			Match(LPAREN);
			State = 4929;
			parent_identifier();
			State = 4930;
			Match(RPAREN);
			State = 4931;
			submodule_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parent_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ancestor_module_nameContext ancestor_module_name() {
			return GetRuleContext<Ancestor_module_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(FortranParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parent_submodule_nameContext parent_submodule_name() {
			return GetRuleContext<Parent_submodule_nameContext>(0);
		}
		public Parent_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parent_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterParent_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitParent_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Parent_identifierContext parent_identifier() {
		Parent_identifierContext _localctx = new Parent_identifierContext(Context, State);
		EnterRule(_localctx, 890, RULE_parent_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4933;
			ancestor_module_name();
			State = 4936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 4934;
				Match(COLON);
				State = 4935;
				parent_submodule_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_submodule_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBMODULE() { return GetToken(FortranParser.SUBMODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Submodule_nameContext submodule_name() {
			return GetRuleContext<Submodule_nameContext>(0);
		}
		public End_submodule_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_submodule_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_submodule_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_submodule_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_submodule_stmtContext end_submodule_stmt() {
		End_submodule_stmtContext _localctx = new End_submodule_stmtContext(Context, State);
		EnterRule(_localctx, 892, RULE_end_submodule_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4938;
			Match(END);
			State = 4943;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,449,Context) ) {
			case 1:
				{
				State = 4939;
				Match(SUBMODULE);
				State = 4941;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,448,Context) ) {
				case 1:
					{
					State = 4940;
					submodule_name();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_data_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(FortranParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(FortranParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_data_nameContext block_data_name() {
			return GetRuleContext<Block_data_nameContext>(0);
		}
		public Block_data_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_data_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBlock_data_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBlock_data_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Block_data_stmtContext block_data_stmt() {
		Block_data_stmtContext _localctx = new Block_data_stmtContext(Context, State);
		EnterRule(_localctx, 894, RULE_block_data_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4945;
			Match(BLOCK);
			State = 4946;
			Match(DATA);
			State = 4948;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,450,Context) ) {
			case 1:
				{
				State = 4947;
				block_data_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_block_data_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(FortranParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(FortranParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_data_nameContext block_data_name() {
			return GetRuleContext<Block_data_nameContext>(0);
		}
		public End_block_data_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_block_data_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_block_data_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_block_data_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_block_data_stmtContext end_block_data_stmt() {
		End_block_data_stmtContext _localctx = new End_block_data_stmtContext(Context, State);
		EnterRule(_localctx, 896, RULE_end_block_data_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4950;
			Match(END);
			State = 4956;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,452,Context) ) {
			case 1:
				{
				State = 4951;
				Match(BLOCK);
				State = 4952;
				Match(DATA);
				State = 4954;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,451,Context) ) {
				case 1:
					{
					State = 4953;
					block_data_name();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_stmtContext interface_stmt() {
			return GetRuleContext<Interface_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_interface_stmtContext end_interface_stmt() {
			return GetRuleContext<End_interface_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_specificationContext[] interface_specification() {
			return GetRuleContexts<Interface_specificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_specificationContext interface_specification(int i) {
			return GetRuleContext<Interface_specificationContext>(i);
		}
		public Interface_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInterface_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInterface_block(this);
		}
	}

	[RuleVersion(0)]
	public Interface_blockContext interface_block() {
		Interface_blockContext _localctx = new Interface_blockContext(Context, State);
		EnterRule(_localctx, 898, RULE_interface_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4958;
			interface_stmt();
			State = 4962;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5476377146882498048L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4294967311L) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & 34335L) != 0)) {
				{
				{
				State = 4959;
				interface_specification();
				}
				}
				State = 4964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4965;
			end_interface_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_bodyContext interface_body() {
			return GetRuleContext<Interface_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_stmtContext procedure_stmt() {
			return GetRuleContext<Procedure_stmtContext>(0);
		}
		public Interface_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInterface_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInterface_specification(this);
		}
	}

	[RuleVersion(0)]
	public Interface_specificationContext interface_specification() {
		Interface_specificationContext _localctx = new Interface_specificationContext(Context, State);
		EnterRule(_localctx, 900, RULE_interface_specification);
		try {
			State = 4969;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,454,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4967;
				interface_body();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4968;
				procedure_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(FortranParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_specContext generic_spec() {
			return GetRuleContext<Generic_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(FortranParser.ABSTRACT, 0); }
		public Interface_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInterface_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInterface_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Interface_stmtContext interface_stmt() {
		Interface_stmtContext _localctx = new Interface_stmtContext(Context, State);
		EnterRule(_localctx, 902, RULE_interface_stmt);
		try {
			State = 4977;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTERFACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4971;
				Match(INTERFACE);
				State = 4973;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,455,Context) ) {
				case 1:
					{
					State = 4972;
					generic_spec();
					}
					break;
				}
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4975;
				Match(ABSTRACT);
				State = 4976;
				Match(INTERFACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_interface_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(FortranParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_specContext generic_spec() {
			return GetRuleContext<Generic_specContext>(0);
		}
		public End_interface_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_interface_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_interface_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_interface_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_interface_stmtContext end_interface_stmt() {
		End_interface_stmtContext _localctx = new End_interface_stmtContext(Context, State);
		EnterRule(_localctx, 904, RULE_end_interface_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4979;
			Match(END);
			State = 4980;
			Match(INTERFACE);
			State = 4982;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,457,Context) ) {
			case 1:
				{
				State = 4981;
				generic_spec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_stmtContext function_stmt() {
			return GetRuleContext<Function_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_function_stmtContext end_function_stmt() {
			return GetRuleContext<End_function_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Specification_partContext specification_part() {
			return GetRuleContext<Specification_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subroutine_stmtContext subroutine_stmt() {
			return GetRuleContext<Subroutine_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public End_subroutine_stmtContext end_subroutine_stmt() {
			return GetRuleContext<End_subroutine_stmtContext>(0);
		}
		public Interface_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInterface_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInterface_body(this);
		}
	}

	[RuleVersion(0)]
	public Interface_bodyContext interface_body() {
		Interface_bodyContext _localctx = new Interface_bodyContext(Context, State);
		EnterRule(_localctx, 906, RULE_interface_body);
		try {
			State = 4996;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,460,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4984;
				function_stmt();
				State = 4986;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,458,Context) ) {
				case 1:
					{
					State = 4985;
					specification_part();
					}
					break;
				}
				State = 4988;
				end_function_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4990;
				subroutine_stmt();
				State = 4992;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,459,Context) ) {
				case 1:
					{
					State = 4991;
					specification_part();
					}
					break;
				}
				State = 4994;
				end_subroutine_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(FortranParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Specific_procedure_listContext specific_procedure_list() {
			return GetRuleContext<Specific_procedure_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(FortranParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Procedure_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProcedure_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProcedure_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_stmtContext procedure_stmt() {
		Procedure_stmtContext _localctx = new Procedure_stmtContext(Context, State);
		EnterRule(_localctx, 908, RULE_procedure_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4999;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODULE) {
				{
				State = 4998;
				Match(MODULE);
				}
			}

			State = 5001;
			Match(PROCEDURE);
			State = 5003;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 5002;
				Match(DOUBLECOLON);
				}
			}

			State = 5005;
			specific_procedure_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_procedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public Specific_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSpecific_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSpecific_procedure(this);
		}
	}

	[RuleVersion(0)]
	public Specific_procedureContext specific_procedure() {
		Specific_procedureContext _localctx = new Specific_procedureContext(Context, State);
		EnterRule(_localctx, 910, RULE_specific_procedure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5007;
			procedure_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_nameContext generic_name() {
			return GetRuleContext<Generic_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(FortranParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Defined_operatorContext defined_operator() {
			return GetRuleContext<Defined_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(FortranParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Defined_io_generic_specContext defined_io_generic_spec() {
			return GetRuleContext<Defined_io_generic_specContext>(0);
		}
		public Generic_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterGeneric_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitGeneric_spec(this);
		}
	}

	[RuleVersion(0)]
	public Generic_specContext generic_spec() {
		Generic_specContext _localctx = new Generic_specContext(Context, State);
		EnterRule(_localctx, 912, RULE_generic_spec);
		try {
			State = 5020;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,463,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5009;
				generic_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5010;
				Match(OPERATOR);
				State = 5011;
				Match(LPAREN);
				State = 5012;
				defined_operator();
				State = 5013;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5015;
				Match(ASSIGNMENT);
				State = 5016;
				Match(LPAREN);
				State = 5017;
				Match(ASSIGN);
				State = 5018;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5019;
				defined_io_generic_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defined_io_generic_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(FortranParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMATTED() { return GetToken(FortranParser.FORMATTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNFORMATTED() { return GetToken(FortranParser.UNFORMATTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(FortranParser.WRITE, 0); }
		public Defined_io_generic_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defined_io_generic_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDefined_io_generic_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDefined_io_generic_spec(this);
		}
	}

	[RuleVersion(0)]
	public Defined_io_generic_specContext defined_io_generic_spec() {
		Defined_io_generic_specContext _localctx = new Defined_io_generic_specContext(Context, State);
		EnterRule(_localctx, 914, RULE_defined_io_generic_spec);
		try {
			State = 5038;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,464,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5022;
				Match(READ);
				State = 5023;
				Match(LPAREN);
				State = 5024;
				Match(FORMATTED);
				State = 5025;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5026;
				Match(READ);
				State = 5027;
				Match(LPAREN);
				State = 5028;
				Match(UNFORMATTED);
				State = 5029;
				Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5030;
				Match(WRITE);
				State = 5031;
				Match(LPAREN);
				State = 5032;
				Match(FORMATTED);
				State = 5033;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5034;
				Match(WRITE);
				State = 5035;
				Match(LPAREN);
				State = 5036;
				Match(UNFORMATTED);
				State = 5037;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERIC() { return GetToken(FortranParser.GENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_specContext generic_spec() {
			return GetRuleContext<Generic_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLIES() { return GetToken(FortranParser.IMPLIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Specific_procedure_listContext specific_procedure_list() {
			return GetRuleContext<Specific_procedure_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FortranParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Access_specContext access_spec() {
			return GetRuleContext<Access_specContext>(0);
		}
		public Generic_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterGeneric_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitGeneric_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Generic_stmtContext generic_stmt() {
		Generic_stmtContext _localctx = new Generic_stmtContext(Context, State);
		EnterRule(_localctx, 916, RULE_generic_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5040;
			Match(GENERIC);
			State = 5043;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 5041;
				Match(COMMA);
				State = 5042;
				access_spec();
				}
			}

			State = 5045;
			Match(DOUBLECOLON);
			State = 5046;
			generic_spec();
			State = 5047;
			Match(IMPLIES);
			State = 5048;
			specific_procedure_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(FortranParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public External_name_listContext external_name_list() {
			return GetRuleContext<External_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public External_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExternal_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExternal_stmt(this);
		}
	}

	[RuleVersion(0)]
	public External_stmtContext external_stmt() {
		External_stmtContext _localctx = new External_stmtContext(Context, State);
		EnterRule(_localctx, 918, RULE_external_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5050;
			Match(EXTERNAL);
			State = 5052;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 5051;
				Match(DOUBLECOLON);
				}
			}

			State = 5054;
			external_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_declaration_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(FortranParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_decl_listContext proc_decl_list() {
			return GetRuleContext<Proc_decl_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_interfaceContext proc_interface() {
			return GetRuleContext<Proc_interfaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_attr_specContext[] proc_attr_spec() {
			return GetRuleContexts<Proc_attr_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_attr_specContext proc_attr_spec(int i) {
			return GetRuleContext<Proc_attr_specContext>(i);
		}
		public Procedure_declaration_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_declaration_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProcedure_declaration_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProcedure_declaration_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_declaration_stmtContext procedure_declaration_stmt() {
		Procedure_declaration_stmtContext _localctx = new Procedure_declaration_stmtContext(Context, State);
		EnterRule(_localctx, 920, RULE_procedure_declaration_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5056;
			Match(PROCEDURE);
			State = 5057;
			Match(LPAREN);
			State = 5059;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5664683900280128L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1019726465L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 18084526735491071L) != 0)) {
				{
				State = 5058;
				proc_interface();
				}
			}

			State = 5061;
			Match(RPAREN);
			State = 5070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA || _la==DOUBLECOLON) {
				{
				State = 5066;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5062;
					Match(COMMA);
					State = 5063;
					proc_attr_spec();
					}
					}
					State = 5068;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5069;
				Match(DOUBLECOLON);
				}
			}

			State = 5072;
			proc_decl_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_interfaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_nameContext interface_name() {
			return GetRuleContext<Interface_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_type_specContext declaration_type_spec() {
			return GetRuleContext<Declaration_type_specContext>(0);
		}
		public Proc_interfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProc_interface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProc_interface(this);
		}
	}

	[RuleVersion(0)]
	public Proc_interfaceContext proc_interface() {
		Proc_interfaceContext _localctx = new Proc_interfaceContext(Context, State);
		EnterRule(_localctx, 922, RULE_proc_interface);
		try {
			State = 5076;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,470,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5074;
				interface_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5075;
				declaration_type_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_attr_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Access_specContext access_spec() {
			return GetRuleContext<Access_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_language_binding_specContext proc_language_binding_spec() {
			return GetRuleContext<Proc_language_binding_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTENT() { return GetToken(FortranParser.INTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Intent_specContext intent_spec() {
			return GetRuleContext<Intent_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(FortranParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER() { return GetToken(FortranParser.POINTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(FortranParser.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVE() { return GetToken(FortranParser.SAVE, 0); }
		public Proc_attr_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_attr_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProc_attr_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProc_attr_spec(this);
		}
	}

	[RuleVersion(0)]
	public Proc_attr_specContext proc_attr_spec() {
		Proc_attr_specContext _localctx = new Proc_attr_specContext(Context, State);
		EnterRule(_localctx, 924, RULE_proc_attr_spec);
		try {
			State = 5089;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIVATE:
			case PUBLIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5078;
				access_spec();
				}
				break;
			case BIND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5079;
				proc_language_binding_spec();
				}
				break;
			case INTENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5080;
				Match(INTENT);
				State = 5081;
				Match(LPAREN);
				State = 5082;
				intent_spec();
				State = 5083;
				Match(RPAREN);
				}
				break;
			case OPTIONAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5085;
				Match(OPTIONAL);
				}
				break;
			case POINTER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5086;
				Match(POINTER);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5087;
				Match(PROTECTED);
				}
				break;
			case SAVE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5088;
				Match(SAVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_entity_nameContext procedure_entity_name() {
			return GetRuleContext<Procedure_entity_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLIES() { return GetToken(FortranParser.IMPLIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_pointer_initContext proc_pointer_init() {
			return GetRuleContext<Proc_pointer_initContext>(0);
		}
		public Proc_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProc_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProc_decl(this);
		}
	}

	[RuleVersion(0)]
	public Proc_declContext proc_decl() {
		Proc_declContext _localctx = new Proc_declContext(Context, State);
		EnterRule(_localctx, 926, RULE_proc_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5091;
			procedure_entity_name();
			State = 5094;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLIES) {
				{
				State = 5092;
				Match(IMPLIES);
				State = 5093;
				proc_pointer_init();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Interface_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInterface_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInterface_name(this);
		}
	}

	[RuleVersion(0)]
	public Interface_nameContext interface_name() {
		Interface_nameContext _localctx = new Interface_nameContext(Context, State);
		EnterRule(_localctx, 928, RULE_interface_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5096;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_pointer_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Null_initContext null_init() {
			return GetRuleContext<Null_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Initial_proc_targetContext initial_proc_target() {
			return GetRuleContext<Initial_proc_targetContext>(0);
		}
		public Proc_pointer_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_pointer_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProc_pointer_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProc_pointer_init(this);
		}
	}

	[RuleVersion(0)]
	public Proc_pointer_initContext proc_pointer_init() {
		Proc_pointer_initContext _localctx = new Proc_pointer_initContext(Context, State);
		EnterRule(_localctx, 930, RULE_proc_pointer_init);
		try {
			State = 5100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,473,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5098;
				null_init();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5099;
				initial_proc_target();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initial_proc_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public Initial_proc_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initial_proc_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInitial_proc_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInitial_proc_target(this);
		}
	}

	[RuleVersion(0)]
	public Initial_proc_targetContext initial_proc_target() {
		Initial_proc_targetContext _localctx = new Initial_proc_targetContext(Context, State);
		EnterRule(_localctx, 932, RULE_initial_proc_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5102;
			procedure_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Intrinsic_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTRINSIC() { return GetToken(FortranParser.INTRINSIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Intrinsic_procedure_name_listContext intrinsic_procedure_name_list() {
			return GetRuleContext<Intrinsic_procedure_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLECOLON() { return GetToken(FortranParser.DOUBLECOLON, 0); }
		public Intrinsic_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intrinsic_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIntrinsic_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIntrinsic_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Intrinsic_stmtContext intrinsic_stmt() {
		Intrinsic_stmtContext _localctx = new Intrinsic_stmtContext(Context, State);
		EnterRule(_localctx, 934, RULE_intrinsic_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5104;
			Match(INTRINSIC);
			State = 5106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOUBLECOLON) {
				{
				State = 5105;
				Match(DOUBLECOLON);
				}
			}

			State = 5108;
			intrinsic_procedure_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_referenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_designatorContext procedure_designator() {
			return GetRuleContext<Procedure_designatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Actual_arg_spec_listContext actual_arg_spec_list() {
			return GetRuleContext<Actual_arg_spec_listContext>(0);
		}
		public Function_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFunction_reference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFunction_reference(this);
		}
	}

	[RuleVersion(0)]
	public Function_referenceContext function_reference() {
		Function_referenceContext _localctx = new Function_referenceContext(Context, State);
		EnterRule(_localctx, 936, RULE_function_reference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5110;
			procedure_designator();
			State = 5111;
			Match(LPAREN);
			State = 5113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5663584287983936L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -881199745L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98938213795627007L) != 0)) {
				{
				State = 5112;
				actual_arg_spec_list();
				}
			}

			State = 5115;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(FortranParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_designatorContext procedure_designator() {
			return GetRuleContext<Procedure_designatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Actual_arg_spec_listContext actual_arg_spec_list() {
			return GetRuleContext<Actual_arg_spec_listContext>(0);
		}
		public Call_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCall_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCall_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Call_stmtContext call_stmt() {
		Call_stmtContext _localctx = new Call_stmtContext(Context, State);
		EnterRule(_localctx, 938, RULE_call_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5117;
			Match(CALL);
			State = 5118;
			procedure_designator();
			State = 5124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,477,Context) ) {
			case 1:
				{
				State = 5119;
				Match(LPAREN);
				State = 5121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5663584287983936L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -881199745L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 98938213795627007L) != 0)) {
					{
					State = 5120;
					actual_arg_spec_list();
					}
				}

				State = 5123;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_designatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_component_refContext proc_component_ref() {
			return GetRuleContext<Proc_component_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_refContext data_ref() {
			return GetRuleContext<Data_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(FortranParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Binding_nameContext binding_name() {
			return GetRuleContext<Binding_nameContext>(0);
		}
		public Procedure_designatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProcedure_designator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProcedure_designator(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_designatorContext procedure_designator() {
		Procedure_designatorContext _localctx = new Procedure_designatorContext(Context, State);
		EnterRule(_localctx, 940, RULE_procedure_designator);
		try {
			State = 5132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,478,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5126;
				procedure_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5127;
				proc_component_ref();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5128;
				data_ref();
				State = 5129;
				Match(PERCENT);
				State = 5130;
				binding_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Actual_arg_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Actual_argContext actual_arg() {
			return GetRuleContext<Actual_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		public Actual_arg_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual_arg_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterActual_arg_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitActual_arg_spec(this);
		}
	}

	[RuleVersion(0)]
	public Actual_arg_specContext actual_arg_spec() {
		Actual_arg_specContext _localctx = new Actual_arg_specContext(Context, State);
		EnterRule(_localctx, 942, RULE_actual_arg_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,479,Context) ) {
			case 1:
				{
				State = 5134;
				keyword();
				State = 5135;
				Match(ASSIGN);
				}
				break;
			}
			State = 5139;
			actual_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Actual_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_component_refContext proc_component_ref() {
			return GetRuleContext<Proc_component_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_argContext conditional_arg() {
			return GetRuleContext<Conditional_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alt_return_specContext alt_return_spec() {
			return GetRuleContext<Alt_return_specContext>(0);
		}
		public Actual_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterActual_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitActual_arg(this);
		}
	}

	[RuleVersion(0)]
	public Actual_argContext actual_arg() {
		Actual_argContext _localctx = new Actual_argContext(Context, State);
		EnterRule(_localctx, 944, RULE_actual_arg);
		try {
			State = 5147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,480,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5141;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5142;
				variable(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5143;
				procedure_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5144;
				proc_component_ref();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5145;
				conditional_arg();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5146;
				alt_return_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alt_return_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public Alt_return_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alt_return_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAlt_return_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAlt_return_spec(this);
		}
	}

	[RuleVersion(0)]
	public Alt_return_specContext alt_return_spec() {
		Alt_return_specContext _localctx = new Alt_return_specContext(Context, State);
		EnterRule(_localctx, 946, RULE_alt_return_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5149;
			Match(ASTERIK);
			State = 5150;
			label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_logical_exprContext[] scalar_logical_expr() {
			return GetRuleContexts<Scalar_logical_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_logical_exprContext scalar_logical_expr(int i) {
			return GetRuleContext<Scalar_logical_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTION() { return GetTokens(FortranParser.QUESTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION(int i) {
			return GetToken(FortranParser.QUESTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConsequentContext[] consequent() {
			return GetRuleContexts<ConsequentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConsequentContext consequent(int i) {
			return GetRuleContext<ConsequentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(FortranParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(FortranParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public Conditional_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConditional_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConditional_arg(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_argContext conditional_arg() {
		Conditional_argContext _localctx = new Conditional_argContext(Context, State);
		EnterRule(_localctx, 948, RULE_conditional_arg);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5152;
			Match(LPAREN);
			State = 5153;
			scalar_logical_expr();
			State = 5154;
			Match(QUESTION);
			State = 5155;
			consequent();
			State = 5163;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,481,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5156;
					Match(COLON);
					State = 5157;
					scalar_logical_expr();
					State = 5158;
					Match(QUESTION);
					State = 5159;
					consequent();
					}
					} 
				}
				State = 5165;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,481,Context);
			}
			State = 5166;
			Match(COLON);
			State = 5167;
			consequent();
			State = 5168;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConsequentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Consequent_argContext consequent_arg() {
			return GetRuleContext<Consequent_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(FortranParser.NIL, 0); }
		public ConsequentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consequent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConsequent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConsequent(this);
		}
	}

	[RuleVersion(0)]
	public ConsequentContext consequent() {
		ConsequentContext _localctx = new ConsequentContext(Context, State);
		EnterRule(_localctx, 950, RULE_consequent);
		try {
			State = 5172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROGRAM:
			case END:
			case FUNCTION:
			case LPAREN:
			case SUBROUTINE:
			case MODULE:
			case SUBMODULE:
			case BLOCK:
			case DATA:
			case INTRINSIC:
			case NONINTRINSIC:
			case OPERATOR:
			case PLUS:
			case MINUS:
			case NOT:
			case READ:
			case FORMATTED:
			case UNFORMATTED:
			case WRITE:
			case ASSIGNMENT:
			case USE:
			case ONLY:
			case IMPORT:
			case NONE:
			case ALL:
			case KIND:
			case INTEGER:
			case LEN:
			case REAL:
			case DOUBLE:
			case PRECISION:
			case COMPLEX:
			case CHARACTER:
			case LOGICAL:
			case TYPE:
			case CLASS:
			case EXTERNAL:
			case IMPLICIT:
			case PARAMETER:
			case FORMAT:
			case BIND:
			case RESULT:
			case ENTRY:
			case DOT:
			case TRUE:
			case FALSE:
			case STAT:
			case TEAM:
			case TEAMNUMBER:
			case LBRACKET:
			case RE:
			case IM:
			case LPARENSLASH:
			case SEQUENCE:
			case PRIVATE:
			case PROCEDURE:
			case NOPASS:
			case PASS:
			case POINTER:
			case ALLOCATABLE:
			case CODIMENSION:
			case CONTIGUOUS:
			case DIMENSION:
			case PUBLIC:
			case CONTAINS:
			case FINAL:
			case GENERIC:
			case DEFERRED:
			case NONOVERRIDABLE:
			case INTENT:
			case OPTIONAL:
			case PROTECTED:
			case SAVE:
			case IN:
			case OUT:
			case INOUT:
			case INTERFACE:
			case ABSTRACT:
			case ENUM:
			case ENUMERATOR:
			case ASYNCHRONOUS:
			case TARGET:
			case VALUE:
			case VOLATILE:
			case EQUIVALENCE:
			case COMMON:
			case NAMELIST:
			case EVENT:
			case WAIT:
			case UNTILCOUNT:
			case POST:
			case ERRMSG:
			case ERROR:
			case STOP:
			case QUIET:
			case ENDFILE:
			case DEALLOCATE:
			case CYCLE:
			case CONTINUE:
			case CLOSE:
			case UNIT:
			case IOSTAT:
			case IOMSG:
			case ERR:
			case STATUS:
			case CALL:
			case BACKSPACE:
			case ALLOCATE:
			case MOLD:
			case SOURCE:
			case OPEN:
			case ACCESS:
			case ACTION:
			case BLANK:
			case DECIMAL:
			case DELIM:
			case ENCODING:
			case FILE:
			case FORM:
			case NEWUNIT:
			case PAD:
			case POSITION:
			case RECL:
			case ROUND:
			case SIGN:
			case NULLIFY:
			case LOCK:
			case ACQUIREDLOCK:
			case INQUIRE:
			case IOLENGTH:
			case EXIST:
			case ID:
			case NAMED:
			case NEXTREC:
			case NUMBER:
			case OPENED:
			case PENDING:
			case POS:
			case READWRITE:
			case SEQUENTIAL:
			case SIZE:
			case STREAM:
			case IF:
			case GO:
			case TO:
			case NEWINDEX:
			case FLUSH:
			case FAIL:
			case IMAGE:
			case EXIT:
			case FORALL:
			case WHERE:
			case EOR:
			case UNLOCK:
			case SYNC:
			case MEMORY:
			case IMAGES:
			case REWIND:
			case RETURN:
			case FMT:
			case NML:
			case ADVANCE:
			case REC:
			case PRINT:
			case CRITICAL:
			case CHANGE:
			case SELECT:
			case CASE:
			case DEFAULT:
			case ASSOCIATE:
			case ELSEWHERE:
			case IS:
			case RANK:
			case ELSE:
			case THEN:
			case DO:
			case CONCURRENT:
			case WHILE:
			case SHARED:
			case LOCAL:
			case LOCALINIT:
			case RECURSIVE:
			case PURE:
			case NONRECURSIVE:
			case IMPURE:
			case ELEMENTAL:
			case NOTIFY:
			case TYPEOF:
			case CLASSOF:
			case ENUMERATION:
			case DIRECT:
			case LEADINGZERO:
			case REDUCE:
			case SIMPLE:
			case DEFINEDUNARYBINARYOP:
			case BINARY_CONSTANT:
			case OCTAL_CONSTANT:
			case HEX_CONSTANT:
			case SQUOTE_REP_CHAR:
			case DQUOTE_REP_CHAR:
			case NAME:
			case DIGITSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5170;
				consequent_arg();
				}
				break;
			case NIL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5171;
				Match(NIL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Consequent_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Consequent_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consequent_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConsequent_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConsequent_arg(this);
		}
	}

	[RuleVersion(0)]
	public Consequent_argContext consequent_arg() {
		Consequent_argContext _localctx = new Consequent_argContext(Context, State);
		EnterRule(_localctx, 952, RULE_consequent_arg);
		try {
			State = 5176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,483,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5174;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5175;
				variable(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prefix_specContext[] prefix_spec() {
			return GetRuleContexts<Prefix_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prefix_specContext prefix_spec(int i) {
			return GetRuleContext<Prefix_specContext>(i);
		}
		public PrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPrefix(this);
		}
	}

	[RuleVersion(0)]
	public PrefixContext prefix() {
		PrefixContext _localctx = new PrefixContext(Context, State);
		EnterRule(_localctx, 954, RULE_prefix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5178;
			prefix_spec();
			State = 5182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 17680146974638081L) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & 34335L) != 0)) {
				{
				{
				State = 5179;
				prefix_spec();
				}
				}
				State = 5184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefix_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_type_specContext declaration_type_spec() {
			return GetRuleContext<Declaration_type_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELEMENTAL() { return GetToken(FortranParser.ELEMENTAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPURE() { return GetToken(FortranParser.IMPURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(FortranParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONRECURSIVE() { return GetToken(FortranParser.NONRECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURE() { return GetToken(FortranParser.PURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(FortranParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(FortranParser.SIMPLE, 0); }
		public Prefix_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPrefix_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPrefix_spec(this);
		}
	}

	[RuleVersion(0)]
	public Prefix_specContext prefix_spec() {
		Prefix_specContext _localctx = new Prefix_specContext(Context, State);
		EnterRule(_localctx, 956, RULE_prefix_spec);
		try {
			State = 5193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case REAL:
			case DOUBLE:
			case COMPLEX:
			case CHARACTER:
			case LOGICAL:
			case TYPE:
			case CLASS:
			case TYPEOF:
			case CLASSOF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5185;
				declaration_type_spec();
				}
				break;
			case ELEMENTAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5186;
				Match(ELEMENTAL);
				}
				break;
			case IMPURE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5187;
				Match(IMPURE);
				}
				break;
			case MODULE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5188;
				Match(MODULE);
				}
				break;
			case NONRECURSIVE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5189;
				Match(NONRECURSIVE);
				}
				break;
			case PURE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5190;
				Match(PURE);
				}
				break;
			case RECURSIVE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5191;
				Match(RECURSIVE);
				}
				break;
			case SIMPLE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5192;
				Match(SIMPLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_language_binding_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Language_binding_specContext language_binding_spec() {
			return GetRuleContext<Language_binding_specContext>(0);
		}
		public Proc_language_binding_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_language_binding_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProc_language_binding_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProc_language_binding_spec(this);
		}
	}

	[RuleVersion(0)]
	public Proc_language_binding_specContext proc_language_binding_spec() {
		Proc_language_binding_specContext _localctx = new Proc_language_binding_specContext(Context, State);
		EnterRule(_localctx, 958, RULE_proc_language_binding_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5195;
			language_binding_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(FortranParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrefixContext prefix() {
			return GetRuleContext<PrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dummy_arg_name_listContext dummy_arg_name_list() {
			return GetRuleContext<Dummy_arg_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuffixContext suffix() {
			return GetRuleContext<SuffixContext>(0);
		}
		public Function_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFunction_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFunction_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Function_stmtContext function_stmt() {
		Function_stmtContext _localctx = new Function_stmtContext(Context, State);
		EnterRule(_localctx, 960, RULE_function_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 17680146974638081L) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & 34335L) != 0)) {
				{
				State = 5197;
				prefix();
				}
			}

			State = 5200;
			Match(FUNCTION);
			State = 5201;
			function_name();
			State = 5202;
			Match(LPAREN);
			State = 5204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5664683900280128L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1019726465L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 18084526735491071L) != 0)) {
				{
				State = 5203;
				dummy_arg_name_list();
				}
			}

			State = 5206;
			Match(RPAREN);
			State = 5208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,488,Context) ) {
			case 1:
				{
				State = 5207;
				suffix();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dummy_arg_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Dummy_arg_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dummy_arg_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDummy_arg_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDummy_arg_name(this);
		}
	}

	[RuleVersion(0)]
	public Dummy_arg_nameContext dummy_arg_name() {
		Dummy_arg_nameContext _localctx = new Dummy_arg_nameContext(Context, State);
		EnterRule(_localctx, 962, RULE_dummy_arg_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5210;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Proc_language_binding_specContext proc_language_binding_spec() {
			return GetRuleContext<Proc_language_binding_specContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESULT() { return GetToken(FortranParser.RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Result_nameContext result_name() {
			return GetRuleContext<Result_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		public SuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_suffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSuffix(this);
		}
	}

	[RuleVersion(0)]
	public SuffixContext suffix() {
		SuffixContext _localctx = new SuffixContext(Context, State);
		EnterRule(_localctx, 964, RULE_suffix);
		try {
			State = 5227;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BIND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5212;
				proc_language_binding_spec();
				State = 5218;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,489,Context) ) {
				case 1:
					{
					State = 5213;
					Match(RESULT);
					State = 5214;
					Match(LPAREN);
					State = 5215;
					result_name();
					State = 5216;
					Match(RPAREN);
					}
					break;
				}
				}
				break;
			case RESULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5220;
				Match(RESULT);
				State = 5221;
				Match(LPAREN);
				State = 5222;
				result_name();
				State = 5223;
				Match(RPAREN);
				State = 5225;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,490,Context) ) {
				case 1:
					{
					State = 5224;
					proc_language_binding_spec();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_function_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(FortranParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public End_function_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_function_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_function_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_function_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_function_stmtContext end_function_stmt() {
		End_function_stmtContext _localctx = new End_function_stmtContext(Context, State);
		EnterRule(_localctx, 966, RULE_end_function_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5229;
			Match(END);
			State = 5234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,493,Context) ) {
			case 1:
				{
				State = 5230;
				Match(FUNCTION);
				State = 5232;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,492,Context) ) {
				case 1:
					{
					State = 5231;
					function_name();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subroutine_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBROUTINE() { return GetToken(FortranParser.SUBROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subroutine_nameContext subroutine_name() {
			return GetRuleContext<Subroutine_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixContext prefix() {
			return GetRuleContext<PrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dummy_arg_listContext dummy_arg_list() {
			return GetRuleContext<Dummy_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_language_binding_specContext proc_language_binding_spec() {
			return GetRuleContext<Proc_language_binding_specContext>(0);
		}
		public Subroutine_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutine_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSubroutine_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSubroutine_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Subroutine_stmtContext subroutine_stmt() {
		Subroutine_stmtContext _localctx = new Subroutine_stmtContext(Context, State);
		EnterRule(_localctx, 968, RULE_subroutine_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 17680146974638081L) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & 34335L) != 0)) {
				{
				State = 5236;
				prefix();
				}
			}

			State = 5239;
			Match(SUBROUTINE);
			State = 5240;
			subroutine_name();
			State = 5249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,497,Context) ) {
			case 1:
				{
				State = 5241;
				Match(LPAREN);
				State = 5243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5664683900276032L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1019726465L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 18084526735491071L) != 0)) {
					{
					State = 5242;
					dummy_arg_list();
					}
				}

				State = 5245;
				Match(RPAREN);
				State = 5247;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,496,Context) ) {
				case 1:
					{
					State = 5246;
					proc_language_binding_spec();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dummy_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dummy_arg_nameContext dummy_arg_name() {
			return GetRuleContext<Dummy_arg_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERIK() { return GetToken(FortranParser.ASTERIK, 0); }
		public Dummy_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dummy_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDummy_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDummy_arg(this);
		}
	}

	[RuleVersion(0)]
	public Dummy_argContext dummy_arg() {
		Dummy_argContext _localctx = new Dummy_argContext(Context, State);
		EnterRule(_localctx, 970, RULE_dummy_arg);
		try {
			State = 5253;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROGRAM:
			case END:
			case FUNCTION:
			case SUBROUTINE:
			case MODULE:
			case SUBMODULE:
			case BLOCK:
			case DATA:
			case INTRINSIC:
			case NONINTRINSIC:
			case OPERATOR:
			case READ:
			case FORMATTED:
			case UNFORMATTED:
			case WRITE:
			case ASSIGNMENT:
			case USE:
			case ONLY:
			case IMPORT:
			case NONE:
			case ALL:
			case KIND:
			case INTEGER:
			case LEN:
			case REAL:
			case DOUBLE:
			case PRECISION:
			case COMPLEX:
			case CHARACTER:
			case LOGICAL:
			case TYPE:
			case CLASS:
			case EXTERNAL:
			case IMPLICIT:
			case PARAMETER:
			case FORMAT:
			case BIND:
			case RESULT:
			case ENTRY:
			case STAT:
			case TEAM:
			case TEAMNUMBER:
			case RE:
			case IM:
			case SEQUENCE:
			case PRIVATE:
			case PROCEDURE:
			case NOPASS:
			case PASS:
			case POINTER:
			case ALLOCATABLE:
			case CODIMENSION:
			case CONTIGUOUS:
			case DIMENSION:
			case PUBLIC:
			case CONTAINS:
			case FINAL:
			case GENERIC:
			case DEFERRED:
			case NONOVERRIDABLE:
			case INTENT:
			case OPTIONAL:
			case PROTECTED:
			case SAVE:
			case IN:
			case OUT:
			case INOUT:
			case INTERFACE:
			case ABSTRACT:
			case ENUM:
			case ENUMERATOR:
			case ASYNCHRONOUS:
			case TARGET:
			case VALUE:
			case VOLATILE:
			case EQUIVALENCE:
			case COMMON:
			case NAMELIST:
			case EVENT:
			case WAIT:
			case UNTILCOUNT:
			case POST:
			case ERRMSG:
			case ERROR:
			case STOP:
			case QUIET:
			case ENDFILE:
			case DEALLOCATE:
			case CYCLE:
			case CONTINUE:
			case CLOSE:
			case UNIT:
			case IOSTAT:
			case IOMSG:
			case ERR:
			case STATUS:
			case CALL:
			case BACKSPACE:
			case ALLOCATE:
			case MOLD:
			case SOURCE:
			case OPEN:
			case ACCESS:
			case ACTION:
			case BLANK:
			case DECIMAL:
			case DELIM:
			case ENCODING:
			case FILE:
			case FORM:
			case NEWUNIT:
			case PAD:
			case POSITION:
			case RECL:
			case ROUND:
			case SIGN:
			case NULLIFY:
			case LOCK:
			case ACQUIREDLOCK:
			case INQUIRE:
			case IOLENGTH:
			case EXIST:
			case ID:
			case NAMED:
			case NEXTREC:
			case NUMBER:
			case OPENED:
			case PENDING:
			case POS:
			case READWRITE:
			case SEQUENTIAL:
			case SIZE:
			case STREAM:
			case IF:
			case GO:
			case TO:
			case NEWINDEX:
			case FLUSH:
			case FAIL:
			case IMAGE:
			case EXIT:
			case FORALL:
			case WHERE:
			case EOR:
			case UNLOCK:
			case SYNC:
			case MEMORY:
			case IMAGES:
			case REWIND:
			case RETURN:
			case FMT:
			case NML:
			case ADVANCE:
			case REC:
			case PRINT:
			case CRITICAL:
			case CHANGE:
			case SELECT:
			case CASE:
			case DEFAULT:
			case ASSOCIATE:
			case ELSEWHERE:
			case IS:
			case RANK:
			case ELSE:
			case THEN:
			case DO:
			case CONCURRENT:
			case WHILE:
			case SHARED:
			case LOCAL:
			case LOCALINIT:
			case RECURSIVE:
			case PURE:
			case NONRECURSIVE:
			case IMPURE:
			case ELEMENTAL:
			case NOTIFY:
			case TYPEOF:
			case CLASSOF:
			case ENUMERATION:
			case DIRECT:
			case LEADINGZERO:
			case REDUCE:
			case SIMPLE:
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5251;
				dummy_arg_name();
				}
				break;
			case ASTERIK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5252;
				Match(ASTERIK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_subroutine_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBROUTINE() { return GetToken(FortranParser.SUBROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subroutine_nameContext subroutine_name() {
			return GetRuleContext<Subroutine_nameContext>(0);
		}
		public End_subroutine_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_subroutine_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_subroutine_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_subroutine_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_subroutine_stmtContext end_subroutine_stmt() {
		End_subroutine_stmtContext _localctx = new End_subroutine_stmtContext(Context, State);
		EnterRule(_localctx, 972, RULE_end_subroutine_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5255;
			Match(END);
			State = 5260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,500,Context) ) {
			case 1:
				{
				State = 5256;
				Match(SUBROUTINE);
				State = 5258;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,499,Context) ) {
				case 1:
					{
					State = 5257;
					subroutine_name();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mp_subprogram_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(FortranParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(FortranParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public Mp_subprogram_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mp_subprogram_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterMp_subprogram_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitMp_subprogram_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Mp_subprogram_stmtContext mp_subprogram_stmt() {
		Mp_subprogram_stmtContext _localctx = new Mp_subprogram_stmtContext(Context, State);
		EnterRule(_localctx, 974, RULE_mp_subprogram_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5262;
			Match(MODULE);
			State = 5263;
			Match(PROCEDURE);
			State = 5264;
			procedure_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_mp_subprogram_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(FortranParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(FortranParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public End_mp_subprogram_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_mp_subprogram_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnd_mp_subprogram_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnd_mp_subprogram_stmt(this);
		}
	}

	[RuleVersion(0)]
	public End_mp_subprogram_stmtContext end_mp_subprogram_stmt() {
		End_mp_subprogram_stmtContext _localctx = new End_mp_subprogram_stmtContext(Context, State);
		EnterRule(_localctx, 976, RULE_end_mp_subprogram_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5266;
			Match(END);
			State = 5271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PROCEDURE) {
				{
				State = 5267;
				Match(PROCEDURE);
				State = 5269;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,501,Context) ) {
				case 1:
					{
					State = 5268;
					procedure_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entry_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTRY() { return GetToken(FortranParser.ENTRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Entry_nameContext entry_name() {
			return GetRuleContext<Entry_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dummy_arg_listContext dummy_arg_list() {
			return GetRuleContext<Dummy_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuffixContext suffix() {
			return GetRuleContext<SuffixContext>(0);
		}
		public Entry_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entry_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEntry_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEntry_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Entry_stmtContext entry_stmt() {
		Entry_stmtContext _localctx = new Entry_stmtContext(Context, State);
		EnterRule(_localctx, 978, RULE_entry_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5273;
			Match(ENTRY);
			State = 5274;
			entry_name();
			State = 5283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,505,Context) ) {
			case 1:
				{
				State = 5275;
				Match(LPAREN);
				State = 5277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5664683900276032L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1019726465L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 18084526735491071L) != 0)) {
					{
					State = 5276;
					dummy_arg_list();
					}
				}

				State = 5279;
				Match(RPAREN);
				State = 5281;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,504,Context) ) {
				case 1:
					{
					State = 5280;
					suffix();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(FortranParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_int_exprContext scalar_int_expr() {
			return GetRuleContext<Scalar_int_exprContext>(0);
		}
		public Return_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterReturn_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitReturn_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Return_stmtContext return_stmt() {
		Return_stmtContext _localctx = new Return_stmtContext(Context, State);
		EnterRule(_localctx, 980, RULE_return_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5285;
			Match(RETURN);
			State = 5287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,506,Context) ) {
			case 1:
				{
				State = 5286;
				scalar_int_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Contains_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(FortranParser.CONTAINS, 0); }
		public Contains_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contains_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterContains_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitContains_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Contains_stmtContext contains_stmt() {
		Contains_stmtContext _localctx = new Contains_stmtContext(Context, State);
		EnterRule(_localctx, 982, RULE_contains_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5289;
			Match(CONTAINS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_function_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(FortranParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(FortranParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(FortranParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_exprContext scalar_expr() {
			return GetRuleContext<Scalar_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dummy_arg_name_listContext dummy_arg_name_list() {
			return GetRuleContext<Dummy_arg_name_listContext>(0);
		}
		public Stmt_function_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_function_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterStmt_function_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitStmt_function_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_function_stmtContext stmt_function_stmt() {
		Stmt_function_stmtContext _localctx = new Stmt_function_stmtContext(Context, State);
		EnterRule(_localctx, 984, RULE_stmt_function_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5291;
			function_name();
			State = 5292;
			Match(LPAREN);
			State = 5294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5664683900280128L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1019726465L) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -1L) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 18084526735491071L) != 0)) {
				{
				State = 5293;
				dummy_arg_name_list();
				}
			}

			State = 5296;
			Match(RPAREN);
			State = 5297;
			Match(ASSIGN);
			State = 5298;
			scalar_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ac_value_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ac_valueContext[] ac_value() {
			return GetRuleContexts<Ac_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ac_valueContext ac_value(int i) {
			return GetRuleContext<Ac_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Ac_value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ac_value_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAc_value_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAc_value_list(this);
		}
	}

	[RuleVersion(0)]
	public Ac_value_listContext ac_value_list() {
		Ac_value_listContext _localctx = new Ac_value_listContext(Context, State);
		EnterRule(_localctx, 986, RULE_ac_value_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5300;
			ac_value();
			State = 5305;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,508,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5301;
					Match(COMMA);
					State = 5302;
					ac_value();
					}
					} 
				}
				State = 5307;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,508,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_id_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Access_idContext[] access_id() {
			return GetRuleContexts<Access_idContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_idContext access_id(int i) {
			return GetRuleContext<Access_idContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Access_id_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_id_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAccess_id_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAccess_id_list(this);
		}
	}

	[RuleVersion(0)]
	public Access_id_listContext access_id_list() {
		Access_id_listContext _localctx = new Access_id_listContext(Context, State);
		EnterRule(_localctx, 988, RULE_access_id_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5308;
			access_id();
			State = 5313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5309;
				Match(COMMA);
				State = 5310;
				access_id();
				}
				}
				State = 5315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Actual_arg_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Actual_arg_specContext[] actual_arg_spec() {
			return GetRuleContexts<Actual_arg_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Actual_arg_specContext actual_arg_spec(int i) {
			return GetRuleContext<Actual_arg_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Actual_arg_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual_arg_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterActual_arg_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitActual_arg_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Actual_arg_spec_listContext actual_arg_spec_list() {
		Actual_arg_spec_listContext _localctx = new Actual_arg_spec_listContext(Context, State);
		EnterRule(_localctx, 990, RULE_actual_arg_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5316;
			actual_arg_spec();
			State = 5321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5317;
				Match(COMMA);
				State = 5318;
				actual_arg_spec();
				}
				}
				State = 5323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alloc_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alloc_optContext[] alloc_opt() {
			return GetRuleContexts<Alloc_optContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alloc_optContext alloc_opt(int i) {
			return GetRuleContext<Alloc_optContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Alloc_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alloc_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAlloc_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAlloc_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Alloc_opt_listContext alloc_opt_list() {
		Alloc_opt_listContext _localctx = new Alloc_opt_listContext(Context, State);
		EnterRule(_localctx, 992, RULE_alloc_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5324;
			alloc_opt();
			State = 5329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5325;
				Match(COMMA);
				State = 5326;
				alloc_opt();
				}
				}
				State = 5331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Allocatable_decl_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Allocatable_declContext[] allocatable_decl() {
			return GetRuleContexts<Allocatable_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Allocatable_declContext allocatable_decl(int i) {
			return GetRuleContext<Allocatable_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Allocatable_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocatable_decl_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAllocatable_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAllocatable_decl_list(this);
		}
	}

	[RuleVersion(0)]
	public Allocatable_decl_listContext allocatable_decl_list() {
		Allocatable_decl_listContext _localctx = new Allocatable_decl_listContext(Context, State);
		EnterRule(_localctx, 994, RULE_allocatable_decl_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5332;
			allocatable_decl();
			State = 5337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5333;
				Match(COMMA);
				State = 5334;
				allocatable_decl();
				}
				}
				State = 5339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Allocate_coshape_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Allocate_coshape_specContext[] allocate_coshape_spec() {
			return GetRuleContexts<Allocate_coshape_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Allocate_coshape_specContext allocate_coshape_spec(int i) {
			return GetRuleContext<Allocate_coshape_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Allocate_coshape_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocate_coshape_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAllocate_coshape_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAllocate_coshape_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Allocate_coshape_spec_listContext allocate_coshape_spec_list() {
		Allocate_coshape_spec_listContext _localctx = new Allocate_coshape_spec_listContext(Context, State);
		EnterRule(_localctx, 996, RULE_allocate_coshape_spec_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5340;
			allocate_coshape_spec();
			State = 5345;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,513,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5341;
					Match(COMMA);
					State = 5342;
					allocate_coshape_spec();
					}
					} 
				}
				State = 5347;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,513,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Allocate_object_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Allocate_objectContext[] allocate_object() {
			return GetRuleContexts<Allocate_objectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Allocate_objectContext allocate_object(int i) {
			return GetRuleContext<Allocate_objectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Allocate_object_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocate_object_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAllocate_object_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAllocate_object_list(this);
		}
	}

	[RuleVersion(0)]
	public Allocate_object_listContext allocate_object_list() {
		Allocate_object_listContext _localctx = new Allocate_object_listContext(Context, State);
		EnterRule(_localctx, 998, RULE_allocate_object_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5348;
			allocate_object();
			State = 5353;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,514,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5349;
					Match(COMMA);
					State = 5350;
					allocate_object();
					}
					} 
				}
				State = 5355;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,514,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Allocate_shape_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Allocate_shape_specContext[] allocate_shape_spec() {
			return GetRuleContexts<Allocate_shape_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Allocate_shape_specContext allocate_shape_spec(int i) {
			return GetRuleContext<Allocate_shape_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Allocate_shape_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocate_shape_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAllocate_shape_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAllocate_shape_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Allocate_shape_spec_listContext allocate_shape_spec_list() {
		Allocate_shape_spec_listContext _localctx = new Allocate_shape_spec_listContext(Context, State);
		EnterRule(_localctx, 1000, RULE_allocate_shape_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5356;
			allocate_shape_spec();
			State = 5361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5357;
				Match(COMMA);
				State = 5358;
				allocate_shape_spec();
				}
				}
				State = 5363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Allocation_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AllocationContext[] allocation() {
			return GetRuleContexts<AllocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllocationContext allocation(int i) {
			return GetRuleContext<AllocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Allocation_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocation_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAllocation_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAllocation_list(this);
		}
	}

	[RuleVersion(0)]
	public Allocation_listContext allocation_list() {
		Allocation_listContext _localctx = new Allocation_listContext(Context, State);
		EnterRule(_localctx, 1002, RULE_allocation_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5364;
			allocation();
			State = 5369;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,516,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5365;
					Match(COMMA);
					State = 5366;
					allocation();
					}
					} 
				}
				State = 5371;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,516,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Association_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssociationContext[] association() {
			return GetRuleContexts<AssociationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssociationContext association(int i) {
			return GetRuleContext<AssociationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Association_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_association_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAssociation_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAssociation_list(this);
		}
	}

	[RuleVersion(0)]
	public Association_listContext association_list() {
		Association_listContext _localctx = new Association_listContext(Context, State);
		EnterRule(_localctx, 1004, RULE_association_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5372;
			association();
			State = 5377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5373;
				Match(COMMA);
				State = 5374;
				association();
				}
				}
				State = 5379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assumed_implied_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assumed_implied_specContext[] assumed_implied_spec() {
			return GetRuleContexts<Assumed_implied_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assumed_implied_specContext assumed_implied_spec(int i) {
			return GetRuleContext<Assumed_implied_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Assumed_implied_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assumed_implied_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAssumed_implied_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAssumed_implied_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Assumed_implied_spec_listContext assumed_implied_spec_list() {
		Assumed_implied_spec_listContext _localctx = new Assumed_implied_spec_listContext(Context, State);
		EnterRule(_localctx, 1006, RULE_assumed_implied_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5380;
			assumed_implied_spec();
			State = 5385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5381;
				Match(COMMA);
				State = 5382;
				assumed_implied_spec();
				}
				}
				State = 5387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assumed_shape_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assumed_shape_specContext[] assumed_shape_spec() {
			return GetRuleContexts<Assumed_shape_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assumed_shape_specContext assumed_shape_spec(int i) {
			return GetRuleContext<Assumed_shape_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Assumed_shape_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assumed_shape_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAssumed_shape_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAssumed_shape_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Assumed_shape_spec_listContext assumed_shape_spec_list() {
		Assumed_shape_spec_listContext _localctx = new Assumed_shape_spec_listContext(Context, State);
		EnterRule(_localctx, 1008, RULE_assumed_shape_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5388;
			assumed_shape_spec();
			State = 5393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5389;
				Match(COMMA);
				State = 5390;
				assumed_shape_spec();
				}
				}
				State = 5395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bind_entity_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bind_entityContext[] bind_entity() {
			return GetRuleContexts<Bind_entityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bind_entityContext bind_entity(int i) {
			return GetRuleContext<Bind_entityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Bind_entity_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind_entity_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBind_entity_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBind_entity_list(this);
		}
	}

	[RuleVersion(0)]
	public Bind_entity_listContext bind_entity_list() {
		Bind_entity_listContext _localctx = new Bind_entity_listContext(Context, State);
		EnterRule(_localctx, 1010, RULE_bind_entity_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5396;
			bind_entity();
			State = 5401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5397;
				Match(COMMA);
				State = 5398;
				bind_entity();
				}
				}
				State = 5403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binding_attr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Binding_attrContext[] binding_attr() {
			return GetRuleContexts<Binding_attrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binding_attrContext binding_attr(int i) {
			return GetRuleContext<Binding_attrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Binding_attr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding_attr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBinding_attr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBinding_attr_list(this);
		}
	}

	[RuleVersion(0)]
	public Binding_attr_listContext binding_attr_list() {
		Binding_attr_listContext _localctx = new Binding_attr_listContext(Context, State);
		EnterRule(_localctx, 1012, RULE_binding_attr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5404;
			binding_attr();
			State = 5409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5405;
				Match(COMMA);
				State = 5406;
				binding_attr();
				}
				}
				State = 5411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binding_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Binding_nameContext[] binding_name() {
			return GetRuleContexts<Binding_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binding_nameContext binding_name(int i) {
			return GetRuleContext<Binding_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Binding_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBinding_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBinding_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Binding_name_listContext binding_name_list() {
		Binding_name_listContext _localctx = new Binding_name_listContext(Context, State);
		EnterRule(_localctx, 1014, RULE_binding_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5412;
			binding_name();
			State = 5417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5413;
				Match(COMMA);
				State = 5414;
				binding_name();
				}
				}
				State = 5419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bounds_remapping_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bounds_remappingContext[] bounds_remapping() {
			return GetRuleContexts<Bounds_remappingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bounds_remappingContext bounds_remapping(int i) {
			return GetRuleContext<Bounds_remappingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Bounds_remapping_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bounds_remapping_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBounds_remapping_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBounds_remapping_list(this);
		}
	}

	[RuleVersion(0)]
	public Bounds_remapping_listContext bounds_remapping_list() {
		Bounds_remapping_listContext _localctx = new Bounds_remapping_listContext(Context, State);
		EnterRule(_localctx, 1016, RULE_bounds_remapping_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5420;
			bounds_remapping();
			State = 5425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5421;
				Match(COMMA);
				State = 5422;
				bounds_remapping();
				}
				}
				State = 5427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bounds_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bounds_specContext[] bounds_spec() {
			return GetRuleContexts<Bounds_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bounds_specContext bounds_spec(int i) {
			return GetRuleContext<Bounds_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Bounds_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bounds_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBounds_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBounds_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Bounds_spec_listContext bounds_spec_list() {
		Bounds_spec_listContext _localctx = new Bounds_spec_listContext(Context, State);
		EnterRule(_localctx, 1018, RULE_bounds_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5428;
			bounds_spec();
			State = 5433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5429;
				Match(COMMA);
				State = 5430;
				bounds_spec();
				}
				}
				State = 5435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_value_range_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Case_value_rangeContext[] case_value_range() {
			return GetRuleContexts<Case_value_rangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_value_rangeContext case_value_range(int i) {
			return GetRuleContext<Case_value_rangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Case_value_range_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_value_range_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCase_value_range_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCase_value_range_list(this);
		}
	}

	[RuleVersion(0)]
	public Case_value_range_listContext case_value_range_list() {
		Case_value_range_listContext _localctx = new Case_value_range_listContext(Context, State);
		EnterRule(_localctx, 1020, RULE_case_value_range_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5436;
			case_value_range();
			State = 5441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5437;
				Match(COMMA);
				State = 5438;
				case_value_range();
				}
				}
				State = 5443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Close_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Close_specContext[] close_spec() {
			return GetRuleContexts<Close_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Close_specContext close_spec(int i) {
			return GetRuleContext<Close_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Close_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterClose_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitClose_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Close_spec_listContext close_spec_list() {
		Close_spec_listContext _localctx = new Close_spec_listContext(Context, State);
		EnterRule(_localctx, 1022, RULE_close_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5444;
			close_spec();
			State = 5449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5445;
				Match(COMMA);
				State = 5446;
				close_spec();
				}
				}
				State = 5451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Coarray_association_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Coarray_associationContext[] coarray_association() {
			return GetRuleContexts<Coarray_associationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Coarray_associationContext coarray_association(int i) {
			return GetRuleContext<Coarray_associationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Coarray_association_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coarray_association_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCoarray_association_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCoarray_association_list(this);
		}
	}

	[RuleVersion(0)]
	public Coarray_association_listContext coarray_association_list() {
		Coarray_association_listContext _localctx = new Coarray_association_listContext(Context, State);
		EnterRule(_localctx, 1024, RULE_coarray_association_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5452;
			coarray_association();
			State = 5457;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,527,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5453;
					Match(COMMA);
					State = 5454;
					coarray_association();
					}
					} 
				}
				State = 5459;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,527,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Codimension_decl_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Codimension_declContext[] codimension_decl() {
			return GetRuleContexts<Codimension_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Codimension_declContext codimension_decl(int i) {
			return GetRuleContext<Codimension_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Codimension_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codimension_decl_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCodimension_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCodimension_decl_list(this);
		}
	}

	[RuleVersion(0)]
	public Codimension_decl_listContext codimension_decl_list() {
		Codimension_decl_listContext _localctx = new Codimension_decl_listContext(Context, State);
		EnterRule(_localctx, 1026, RULE_codimension_decl_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5460;
			codimension_decl();
			State = 5465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5461;
				Match(COMMA);
				State = 5462;
				codimension_decl();
				}
				}
				State = 5467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_block_object_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Common_block_objectContext[] common_block_object() {
			return GetRuleContexts<Common_block_objectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_block_objectContext common_block_object(int i) {
			return GetRuleContext<Common_block_objectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Common_block_object_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_block_object_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCommon_block_object_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCommon_block_object_list(this);
		}
	}

	[RuleVersion(0)]
	public Common_block_object_listContext common_block_object_list() {
		Common_block_object_listContext _localctx = new Common_block_object_listContext(Context, State);
		EnterRule(_localctx, 1028, RULE_common_block_object_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5468;
			common_block_object();
			State = 5473;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,529,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5469;
					Match(COMMA);
					State = 5470;
					common_block_object();
					}
					} 
				}
				State = 5475;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,529,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_attr_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Component_attr_specContext[] component_attr_spec() {
			return GetRuleContexts<Component_attr_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_attr_specContext component_attr_spec(int i) {
			return GetRuleContext<Component_attr_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Component_attr_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_attr_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterComponent_attr_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitComponent_attr_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Component_attr_spec_listContext component_attr_spec_list() {
		Component_attr_spec_listContext _localctx = new Component_attr_spec_listContext(Context, State);
		EnterRule(_localctx, 1030, RULE_component_attr_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5476;
			component_attr_spec();
			State = 5481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5477;
				Match(COMMA);
				State = 5478;
				component_attr_spec();
				}
				}
				State = 5483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_decl_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Component_declContext[] component_decl() {
			return GetRuleContexts<Component_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_declContext component_decl(int i) {
			return GetRuleContext<Component_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Component_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_decl_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterComponent_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitComponent_decl_list(this);
		}
	}

	[RuleVersion(0)]
	public Component_decl_listContext component_decl_list() {
		Component_decl_listContext _localctx = new Component_decl_listContext(Context, State);
		EnterRule(_localctx, 1032, RULE_component_decl_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5484;
			component_decl();
			State = 5489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5485;
				Match(COMMA);
				State = 5486;
				component_decl();
				}
				}
				State = 5491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Component_specContext[] component_spec() {
			return GetRuleContexts<Component_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_specContext component_spec(int i) {
			return GetRuleContext<Component_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Component_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterComponent_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitComponent_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Component_spec_listContext component_spec_list() {
		Component_spec_listContext _localctx = new Component_spec_listContext(Context, State);
		EnterRule(_localctx, 1034, RULE_component_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5492;
			component_spec();
			State = 5497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5493;
				Match(COMMA);
				State = 5494;
				component_spec();
				}
				}
				State = 5499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_control_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_controlContext[] concurrent_control() {
			return GetRuleContexts<Concurrent_controlContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_controlContext concurrent_control(int i) {
			return GetRuleContext<Concurrent_controlContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Concurrent_control_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_control_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConcurrent_control_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConcurrent_control_list(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_control_listContext concurrent_control_list() {
		Concurrent_control_listContext _localctx = new Concurrent_control_listContext(Context, State);
		EnterRule(_localctx, 1036, RULE_concurrent_control_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5500;
			concurrent_control();
			State = 5505;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,533,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5501;
					Match(COMMA);
					State = 5502;
					concurrent_control();
					}
					} 
				}
				State = 5507;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,533,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Connect_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Connect_specContext[] connect_spec() {
			return GetRuleContexts<Connect_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Connect_specContext connect_spec(int i) {
			return GetRuleContext<Connect_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Connect_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connect_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConnect_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConnect_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Connect_spec_listContext connect_spec_list() {
		Connect_spec_listContext _localctx = new Connect_spec_listContext(Context, State);
		EnterRule(_localctx, 1038, RULE_connect_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5508;
			connect_spec();
			State = 5513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5509;
				Match(COMMA);
				State = 5510;
				connect_spec();
				}
				}
				State = 5515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cosubscript_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CosubscriptContext[] cosubscript() {
			return GetRuleContexts<CosubscriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CosubscriptContext cosubscript(int i) {
			return GetRuleContext<CosubscriptContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Cosubscript_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cosubscript_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCosubscript_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCosubscript_list(this);
		}
	}

	[RuleVersion(0)]
	public Cosubscript_listContext cosubscript_list() {
		Cosubscript_listContext _localctx = new Cosubscript_listContext(Context, State);
		EnterRule(_localctx, 1040, RULE_cosubscript_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5516;
			cosubscript();
			State = 5521;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,535,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5517;
					Match(COMMA);
					State = 5518;
					cosubscript();
					}
					} 
				}
				State = 5523;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,535,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_i_do_object_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_i_do_objectContext[] data_i_do_object() {
			return GetRuleContexts<Data_i_do_objectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_i_do_objectContext data_i_do_object(int i) {
			return GetRuleContext<Data_i_do_objectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Data_i_do_object_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_i_do_object_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_i_do_object_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_i_do_object_list(this);
		}
	}

	[RuleVersion(0)]
	public Data_i_do_object_listContext data_i_do_object_list() {
		Data_i_do_object_listContext _localctx = new Data_i_do_object_listContext(Context, State);
		EnterRule(_localctx, 1042, RULE_data_i_do_object_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5524;
			data_i_do_object();
			State = 5529;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,536,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5525;
					Match(COMMA);
					State = 5526;
					data_i_do_object();
					}
					} 
				}
				State = 5531;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,536,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_stmt_object_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_stmt_objectContext[] data_stmt_object() {
			return GetRuleContexts<Data_stmt_objectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_stmt_objectContext data_stmt_object(int i) {
			return GetRuleContext<Data_stmt_objectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Data_stmt_object_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_stmt_object_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_stmt_object_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_stmt_object_list(this);
		}
	}

	[RuleVersion(0)]
	public Data_stmt_object_listContext data_stmt_object_list() {
		Data_stmt_object_listContext _localctx = new Data_stmt_object_listContext(Context, State);
		EnterRule(_localctx, 1044, RULE_data_stmt_object_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5532;
			data_stmt_object();
			State = 5537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5533;
				Match(COMMA);
				State = 5534;
				data_stmt_object();
				}
				}
				State = 5539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_stmt_value_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Data_stmt_valueContext[] data_stmt_value() {
			return GetRuleContexts<Data_stmt_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Data_stmt_valueContext data_stmt_value(int i) {
			return GetRuleContext<Data_stmt_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Data_stmt_value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_stmt_value_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_stmt_value_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_stmt_value_list(this);
		}
	}

	[RuleVersion(0)]
	public Data_stmt_value_listContext data_stmt_value_list() {
		Data_stmt_value_listContext _localctx = new Data_stmt_value_listContext(Context, State);
		EnterRule(_localctx, 1046, RULE_data_stmt_value_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5540;
			data_stmt_value();
			State = 5545;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5541;
				Match(COMMA);
				State = 5542;
				data_stmt_value();
				}
				}
				State = 5547;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dealloc_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dealloc_optContext[] dealloc_opt() {
			return GetRuleContexts<Dealloc_optContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dealloc_optContext dealloc_opt(int i) {
			return GetRuleContext<Dealloc_optContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Dealloc_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dealloc_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDealloc_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDealloc_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Dealloc_opt_listContext dealloc_opt_list() {
		Dealloc_opt_listContext _localctx = new Dealloc_opt_listContext(Context, State);
		EnterRule(_localctx, 1048, RULE_dealloc_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5548;
			dealloc_opt();
			State = 5553;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5549;
				Match(COMMA);
				State = 5550;
				dealloc_opt();
				}
				}
				State = 5555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Deferred_coshape_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Deferred_coshape_specContext[] deferred_coshape_spec() {
			return GetRuleContexts<Deferred_coshape_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Deferred_coshape_specContext deferred_coshape_spec(int i) {
			return GetRuleContext<Deferred_coshape_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Deferred_coshape_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deferred_coshape_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDeferred_coshape_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDeferred_coshape_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Deferred_coshape_spec_listContext deferred_coshape_spec_list() {
		Deferred_coshape_spec_listContext _localctx = new Deferred_coshape_spec_listContext(Context, State);
		EnterRule(_localctx, 1050, RULE_deferred_coshape_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5556;
			deferred_coshape_spec();
			State = 5561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5557;
				Match(COMMA);
				State = 5558;
				deferred_coshape_spec();
				}
				}
				State = 5563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Deferred_shape_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Deferred_shape_specContext[] deferred_shape_spec() {
			return GetRuleContexts<Deferred_shape_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Deferred_shape_specContext deferred_shape_spec(int i) {
			return GetRuleContext<Deferred_shape_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Deferred_shape_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deferred_shape_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDeferred_shape_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDeferred_shape_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Deferred_shape_spec_listContext deferred_shape_spec_list() {
		Deferred_shape_spec_listContext _localctx = new Deferred_shape_spec_listContext(Context, State);
		EnterRule(_localctx, 1052, RULE_deferred_shape_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5564;
			deferred_shape_spec();
			State = 5569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5565;
				Match(COMMA);
				State = 5566;
				deferred_shape_spec();
				}
				}
				State = 5571;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dummy_arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dummy_argContext[] dummy_arg() {
			return GetRuleContexts<Dummy_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dummy_argContext dummy_arg(int i) {
			return GetRuleContext<Dummy_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Dummy_arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dummy_arg_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDummy_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDummy_arg_list(this);
		}
	}

	[RuleVersion(0)]
	public Dummy_arg_listContext dummy_arg_list() {
		Dummy_arg_listContext _localctx = new Dummy_arg_listContext(Context, State);
		EnterRule(_localctx, 1054, RULE_dummy_arg_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5572;
			dummy_arg();
			State = 5577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5573;
				Match(COMMA);
				State = 5574;
				dummy_arg();
				}
				}
				State = 5579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dummy_arg_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dummy_arg_nameContext[] dummy_arg_name() {
			return GetRuleContexts<Dummy_arg_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dummy_arg_nameContext dummy_arg_name(int i) {
			return GetRuleContext<Dummy_arg_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Dummy_arg_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dummy_arg_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDummy_arg_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDummy_arg_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Dummy_arg_name_listContext dummy_arg_name_list() {
		Dummy_arg_name_listContext _localctx = new Dummy_arg_name_listContext(Context, State);
		EnterRule(_localctx, 1056, RULE_dummy_arg_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5580;
			dummy_arg_name();
			State = 5585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5581;
				Match(COMMA);
				State = 5582;
				dummy_arg_name();
				}
				}
				State = 5587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_decl_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_declContext[] entity_decl() {
			return GetRuleContexts<Entity_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_declContext entity_decl(int i) {
			return GetRuleContext<Entity_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Entity_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_decl_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEntity_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEntity_decl_list(this);
		}
	}

	[RuleVersion(0)]
	public Entity_decl_listContext entity_decl_list() {
		Entity_decl_listContext _localctx = new Entity_decl_listContext(Context, State);
		EnterRule(_localctx, 1058, RULE_entity_decl_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5588;
			entity_decl();
			State = 5593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5589;
				Match(COMMA);
				State = 5590;
				entity_decl();
				}
				}
				State = 5595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_nameContext[] entity_name() {
			return GetRuleContexts<Entity_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_nameContext entity_name(int i) {
			return GetRuleContext<Entity_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Entity_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEntity_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEntity_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_listContext entity_name_list() {
		Entity_name_listContext _localctx = new Entity_name_listContext(Context, State);
		EnterRule(_localctx, 1060, RULE_entity_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5596;
			entity_name();
			State = 5601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5597;
				Match(COMMA);
				State = 5598;
				entity_name();
				}
				}
				State = 5603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumerator_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext[] enumerator() {
			return GetRuleContexts<EnumeratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext enumerator(int i) {
			return GetRuleContext<EnumeratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Enumerator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnumerator_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnumerator_list(this);
		}
	}

	[RuleVersion(0)]
	public Enumerator_listContext enumerator_list() {
		Enumerator_listContext _localctx = new Enumerator_listContext(Context, State);
		EnterRule(_localctx, 1062, RULE_enumerator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5604;
			enumerator();
			State = 5609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5605;
				Match(COMMA);
				State = 5606;
				enumerator();
				}
				}
				State = 5611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumerator_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enumerator_nameContext[] enumerator_name() {
			return GetRuleContexts<Enumerator_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumerator_nameContext enumerator_name(int i) {
			return GetRuleContext<Enumerator_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Enumerator_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnumerator_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnumerator_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Enumerator_name_listContext enumerator_name_list() {
		Enumerator_name_listContext _localctx = new Enumerator_name_listContext(Context, State);
		EnterRule(_localctx, 1064, RULE_enumerator_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5612;
			enumerator_name();
			State = 5617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5613;
				Match(COMMA);
				State = 5614;
				enumerator_name();
				}
				}
				State = 5619;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equivalence_object_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Equivalence_objectContext[] equivalence_object() {
			return GetRuleContexts<Equivalence_objectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equivalence_objectContext equivalence_object(int i) {
			return GetRuleContext<Equivalence_objectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Equivalence_object_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalence_object_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEquivalence_object_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEquivalence_object_list(this);
		}
	}

	[RuleVersion(0)]
	public Equivalence_object_listContext equivalence_object_list() {
		Equivalence_object_listContext _localctx = new Equivalence_object_listContext(Context, State);
		EnterRule(_localctx, 1066, RULE_equivalence_object_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5620;
			equivalence_object();
			State = 5625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5621;
				Match(COMMA);
				State = 5622;
				equivalence_object();
				}
				}
				State = 5627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equivalence_set_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Equivalence_setContext[] equivalence_set() {
			return GetRuleContexts<Equivalence_setContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equivalence_setContext equivalence_set(int i) {
			return GetRuleContext<Equivalence_setContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Equivalence_set_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalence_set_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEquivalence_set_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEquivalence_set_list(this);
		}
	}

	[RuleVersion(0)]
	public Equivalence_set_listContext equivalence_set_list() {
		Equivalence_set_listContext _localctx = new Equivalence_set_listContext(Context, State);
		EnterRule(_localctx, 1068, RULE_equivalence_set_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5628;
			equivalence_set();
			State = 5633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5629;
				Match(COMMA);
				State = 5630;
				equivalence_set();
				}
				}
				State = 5635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_wait_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Event_wait_specContext[] event_wait_spec() {
			return GetRuleContexts<Event_wait_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_wait_specContext event_wait_spec(int i) {
			return GetRuleContext<Event_wait_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Event_wait_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_wait_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEvent_wait_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEvent_wait_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Event_wait_spec_listContext event_wait_spec_list() {
		Event_wait_spec_listContext _localctx = new Event_wait_spec_listContext(Context, State);
		EnterRule(_localctx, 1070, RULE_event_wait_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5636;
			event_wait_spec();
			State = 5641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5637;
				Match(COMMA);
				State = 5638;
				event_wait_spec();
				}
				}
				State = 5643;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_shape_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_shape_specContext[] explicit_shape_spec() {
			return GetRuleContexts<Explicit_shape_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_shape_specContext explicit_shape_spec(int i) {
			return GetRuleContext<Explicit_shape_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Explicit_shape_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_shape_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExplicit_shape_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExplicit_shape_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_shape_spec_listContext explicit_shape_spec_list() {
		Explicit_shape_spec_listContext _localctx = new Explicit_shape_spec_listContext(Context, State);
		EnterRule(_localctx, 1072, RULE_explicit_shape_spec_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5644;
			explicit_shape_spec();
			State = 5649;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,551,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5645;
					Match(COMMA);
					State = 5646;
					explicit_shape_spec();
					}
					} 
				}
				State = 5651;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,551,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public External_nameContext[] external_name() {
			return GetRuleContexts<External_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public External_nameContext external_name(int i) {
			return GetRuleContext<External_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public External_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExternal_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExternal_name_list(this);
		}
	}

	[RuleVersion(0)]
	public External_name_listContext external_name_list() {
		External_name_listContext _localctx = new External_name_listContext(Context, State);
		EnterRule(_localctx, 1074, RULE_external_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5652;
			external_name();
			State = 5657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5653;
				Match(COMMA);
				State = 5654;
				external_name();
				}
				}
				State = 5659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Final_subroutine_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Final_subroutine_nameContext[] final_subroutine_name() {
			return GetRuleContexts<Final_subroutine_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Final_subroutine_nameContext final_subroutine_name(int i) {
			return GetRuleContext<Final_subroutine_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Final_subroutine_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_final_subroutine_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFinal_subroutine_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFinal_subroutine_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Final_subroutine_name_listContext final_subroutine_name_list() {
		Final_subroutine_name_listContext _localctx = new Final_subroutine_name_listContext(Context, State);
		EnterRule(_localctx, 1076, RULE_final_subroutine_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5660;
			final_subroutine_name();
			State = 5665;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5661;
				Match(COMMA);
				State = 5662;
				final_subroutine_name();
				}
				}
				State = 5667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flush_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Flush_specContext[] flush_spec() {
			return GetRuleContexts<Flush_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Flush_specContext flush_spec(int i) {
			return GetRuleContext<Flush_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Flush_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flush_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFlush_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFlush_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Flush_spec_listContext flush_spec_list() {
		Flush_spec_listContext _localctx = new Flush_spec_listContext(Context, State);
		EnterRule(_localctx, 1078, RULE_flush_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5668;
			flush_spec();
			State = 5673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5669;
				Match(COMMA);
				State = 5670;
				flush_spec();
				}
				}
				State = 5675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Form_team_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Form_team_specContext[] form_team_spec() {
			return GetRuleContexts<Form_team_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Form_team_specContext form_team_spec(int i) {
			return GetRuleContext<Form_team_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Form_team_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form_team_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterForm_team_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitForm_team_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Form_team_spec_listContext form_team_spec_list() {
		Form_team_spec_listContext _localctx = new Form_team_spec_listContext(Context, State);
		EnterRule(_localctx, 1080, RULE_form_team_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5676;
			form_team_spec();
			State = 5681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5677;
				Match(COMMA);
				State = 5678;
				form_team_spec();
				}
				}
				State = 5683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Image_selector_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Image_selector_specContext[] image_selector_spec() {
			return GetRuleContexts<Image_selector_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Image_selector_specContext image_selector_spec(int i) {
			return GetRuleContext<Image_selector_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Image_selector_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_image_selector_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImage_selector_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImage_selector_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Image_selector_spec_listContext image_selector_spec_list() {
		Image_selector_spec_listContext _localctx = new Image_selector_spec_listContext(Context, State);
		EnterRule(_localctx, 1082, RULE_image_selector_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5684;
			image_selector_spec();
			State = 5689;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5685;
				Match(COMMA);
				State = 5686;
				image_selector_spec();
				}
				}
				State = 5691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_none_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_none_specContext[] implicit_none_spec() {
			return GetRuleContexts<Implicit_none_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_none_specContext implicit_none_spec(int i) {
			return GetRuleContext<Implicit_none_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Implicit_none_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_none_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImplicit_none_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImplicit_none_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_none_spec_listContext implicit_none_spec_list() {
		Implicit_none_spec_listContext _localctx = new Implicit_none_spec_listContext(Context, State);
		EnterRule(_localctx, 1084, RULE_implicit_none_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5692;
			implicit_none_spec();
			State = 5697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5693;
				Match(COMMA);
				State = 5694;
				implicit_none_spec();
				}
				}
				State = 5699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_specContext[] implicit_spec() {
			return GetRuleContexts<Implicit_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_specContext implicit_spec(int i) {
			return GetRuleContext<Implicit_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Implicit_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImplicit_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImplicit_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_spec_listContext implicit_spec_list() {
		Implicit_spec_listContext _localctx = new Implicit_spec_listContext(Context, State);
		EnterRule(_localctx, 1086, RULE_implicit_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5700;
			implicit_spec();
			State = 5705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5701;
				Match(COMMA);
				State = 5702;
				implicit_spec();
				}
				}
				State = 5707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_nameContext[] import_name() {
			return GetRuleContexts<Import_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_nameContext import_name(int i) {
			return GetRuleContext<Import_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Import_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImport_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImport_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Import_name_listContext import_name_list() {
		Import_name_listContext _localctx = new Import_name_listContext(Context, State);
		EnterRule(_localctx, 1088, RULE_import_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5708;
			import_name();
			State = 5713;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5709;
				Match(COMMA);
				State = 5710;
				import_name();
				}
				}
				State = 5715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_item_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Input_itemContext[] input_item() {
			return GetRuleContexts<Input_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Input_itemContext input_item(int i) {
			return GetRuleContext<Input_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Input_item_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_item_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInput_item_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInput_item_list(this);
		}
	}

	[RuleVersion(0)]
	public Input_item_listContext input_item_list() {
		Input_item_listContext _localctx = new Input_item_listContext(Context, State);
		EnterRule(_localctx, 1090, RULE_input_item_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5716;
			input_item();
			State = 5721;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5717;
				Match(COMMA);
				State = 5718;
				input_item();
				}
				}
				State = 5723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inquire_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inquire_specContext[] inquire_spec() {
			return GetRuleContexts<Inquire_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inquire_specContext inquire_spec(int i) {
			return GetRuleContext<Inquire_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Inquire_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inquire_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInquire_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInquire_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Inquire_spec_listContext inquire_spec_list() {
		Inquire_spec_listContext _localctx = new Inquire_spec_listContext(Context, State);
		EnterRule(_localctx, 1092, RULE_inquire_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5724;
			inquire_spec();
			State = 5729;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5725;
				Match(COMMA);
				State = 5726;
				inquire_spec();
				}
				}
				State = 5731;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Intrinsic_procedure_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Intrinsic_procedure_nameContext[] intrinsic_procedure_name() {
			return GetRuleContexts<Intrinsic_procedure_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Intrinsic_procedure_nameContext intrinsic_procedure_name(int i) {
			return GetRuleContext<Intrinsic_procedure_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Intrinsic_procedure_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intrinsic_procedure_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIntrinsic_procedure_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIntrinsic_procedure_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Intrinsic_procedure_name_listContext intrinsic_procedure_name_list() {
		Intrinsic_procedure_name_listContext _localctx = new Intrinsic_procedure_name_listContext(Context, State);
		EnterRule(_localctx, 1094, RULE_intrinsic_procedure_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5732;
			intrinsic_procedure_name();
			State = 5737;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5733;
				Match(COMMA);
				State = 5734;
				intrinsic_procedure_name();
				}
				}
				State = 5739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Io_control_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Io_control_specContext[] io_control_spec() {
			return GetRuleContexts<Io_control_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Io_control_specContext io_control_spec(int i) {
			return GetRuleContext<Io_control_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Io_control_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_io_control_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIo_control_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIo_control_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Io_control_spec_listContext io_control_spec_list() {
		Io_control_spec_listContext _localctx = new Io_control_spec_listContext(Context, State);
		EnterRule(_localctx, 1096, RULE_io_control_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5740;
			io_control_spec();
			State = 5745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5741;
				Match(COMMA);
				State = 5742;
				io_control_spec();
				}
				}
				State = 5747;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Io_implied_do_object_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Io_implied_do_objectContext io_implied_do_object() {
			return GetRuleContext<Io_implied_do_objectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Io_implied_doContext[] io_implied_do() {
			return GetRuleContexts<Io_implied_doContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Io_implied_doContext io_implied_do(int i) {
			return GetRuleContext<Io_implied_doContext>(i);
		}
		public Io_implied_do_object_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_io_implied_do_object_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIo_implied_do_object_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIo_implied_do_object_list(this);
		}
	}

	[RuleVersion(0)]
	public Io_implied_do_object_listContext io_implied_do_object_list() {
		Io_implied_do_object_listContext _localctx = new Io_implied_do_object_listContext(Context, State);
		EnterRule(_localctx, 1098, RULE_io_implied_do_object_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5748;
			io_implied_do_object();
			State = 5753;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,564,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5749;
					Match(COMMA);
					State = 5750;
					io_implied_do();
					}
					} 
				}
				State = 5755;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,564,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext[] label() {
			return GetRuleContexts<LabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label(int i) {
			return GetRuleContext<LabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Label_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLabel_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLabel_list(this);
		}
	}

	[RuleVersion(0)]
	public Label_listContext label_list() {
		Label_listContext _localctx = new Label_listContext(Context, State);
		EnterRule(_localctx, 1100, RULE_label_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5756;
			label();
			State = 5761;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5757;
				Match(COMMA);
				State = 5758;
				label();
				}
				}
				State = 5763;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Letter_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER_SPEC() { return GetTokens(FortranParser.LETTER_SPEC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER_SPEC(int i) {
			return GetToken(FortranParser.LETTER_SPEC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Letter_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letter_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLetter_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLetter_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Letter_spec_listContext letter_spec_list() {
		Letter_spec_listContext _localctx = new Letter_spec_listContext(Context, State);
		EnterRule(_localctx, 1102, RULE_letter_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5764;
			Match(LETTER_SPEC);
			State = 5769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5765;
				Match(COMMA);
				State = 5766;
				Match(LETTER_SPEC);
				}
				}
				State = 5771;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_stat_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Lock_statContext[] lock_stat() {
			return GetRuleContexts<Lock_statContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lock_statContext lock_stat(int i) {
			return GetRuleContext<Lock_statContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Lock_stat_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_stat_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLock_stat_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLock_stat_list(this);
		}
	}

	[RuleVersion(0)]
	public Lock_stat_listContext lock_stat_list() {
		Lock_stat_listContext _localctx = new Lock_stat_listContext(Context, State);
		EnterRule(_localctx, 1104, RULE_lock_stat_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5772;
			lock_stat();
			State = 5777;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5773;
				Match(COMMA);
				State = 5774;
				lock_stat();
				}
				}
				State = 5779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_constant_def_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_constant_defContext[] named_constant_def() {
			return GetRuleContexts<Named_constant_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_constant_defContext named_constant_def(int i) {
			return GetRuleContext<Named_constant_defContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Named_constant_def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_constant_def_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterNamed_constant_def_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitNamed_constant_def_list(this);
		}
	}

	[RuleVersion(0)]
	public Named_constant_def_listContext named_constant_def_list() {
		Named_constant_def_listContext _localctx = new Named_constant_def_listContext(Context, State);
		EnterRule(_localctx, 1106, RULE_named_constant_def_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5780;
			named_constant_def();
			State = 5785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5781;
				Match(COMMA);
				State = 5782;
				named_constant_def();
				}
				}
				State = 5787;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namelist_group_object_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namelist_group_objectContext[] namelist_group_object() {
			return GetRuleContexts<Namelist_group_objectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namelist_group_objectContext namelist_group_object(int i) {
			return GetRuleContext<Namelist_group_objectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Namelist_group_object_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist_group_object_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterNamelist_group_object_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitNamelist_group_object_list(this);
		}
	}

	[RuleVersion(0)]
	public Namelist_group_object_listContext namelist_group_object_list() {
		Namelist_group_object_listContext _localctx = new Namelist_group_object_listContext(Context, State);
		EnterRule(_localctx, 1108, RULE_namelist_group_object_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5788;
			namelist_group_object();
			State = 5793;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,569,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5789;
					Match(COMMA);
					State = 5790;
					namelist_group_object();
					}
					} 
				}
				State = 5795;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,569,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_nameContext[] object_name() {
			return GetRuleContexts<Object_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_nameContext object_name(int i) {
			return GetRuleContext<Object_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Object_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterObject_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitObject_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Object_name_listContext object_name_list() {
		Object_name_listContext _localctx = new Object_name_listContext(Context, State);
		EnterRule(_localctx, 1110, RULE_object_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5796;
			object_name();
			State = 5801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5797;
				Match(COMMA);
				State = 5798;
				object_name();
				}
				}
				State = 5803;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Only_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OnlyContext[] only() {
			return GetRuleContexts<OnlyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnlyContext only(int i) {
			return GetRuleContext<OnlyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Only_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_only_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterOnly_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitOnly_list(this);
		}
	}

	[RuleVersion(0)]
	public Only_listContext only_list() {
		Only_listContext _localctx = new Only_listContext(Context, State);
		EnterRule(_localctx, 1112, RULE_only_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5804;
			only();
			State = 5809;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5805;
				Match(COMMA);
				State = 5806;
				only();
				}
				}
				State = 5811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Output_item_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Output_itemContext[] output_item() {
			return GetRuleContexts<Output_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Output_itemContext output_item(int i) {
			return GetRuleContext<Output_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Output_item_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output_item_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterOutput_item_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitOutput_item_list(this);
		}
	}

	[RuleVersion(0)]
	public Output_item_listContext output_item_list() {
		Output_item_listContext _localctx = new Output_item_listContext(Context, State);
		EnterRule(_localctx, 1114, RULE_output_item_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5812;
			output_item();
			State = 5817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5813;
				Match(COMMA);
				State = 5814;
				output_item();
				}
				}
				State = 5819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_decl_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pointer_declContext[] pointer_decl() {
			return GetRuleContexts<Pointer_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pointer_declContext pointer_decl(int i) {
			return GetRuleContext<Pointer_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Pointer_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_decl_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPointer_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPointer_decl_list(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_decl_listContext pointer_decl_list() {
		Pointer_decl_listContext _localctx = new Pointer_decl_listContext(Context, State);
		EnterRule(_localctx, 1116, RULE_pointer_decl_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5820;
			pointer_decl();
			State = 5825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5821;
				Match(COMMA);
				State = 5822;
				pointer_decl();
				}
				}
				State = 5827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_object_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pointer_objectContext[] pointer_object() {
			return GetRuleContexts<Pointer_objectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pointer_objectContext pointer_object(int i) {
			return GetRuleContext<Pointer_objectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Pointer_object_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_object_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPointer_object_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPointer_object_list(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_object_listContext pointer_object_list() {
		Pointer_object_listContext _localctx = new Pointer_object_listContext(Context, State);
		EnterRule(_localctx, 1118, RULE_pointer_object_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5828;
			pointer_object();
			State = 5833;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5829;
				Match(COMMA);
				State = 5830;
				pointer_object();
				}
				}
				State = 5835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Position_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Position_specContext[] position_spec() {
			return GetRuleContexts<Position_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Position_specContext position_spec(int i) {
			return GetRuleContext<Position_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Position_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_position_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPosition_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPosition_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Position_spec_listContext position_spec_list() {
		Position_spec_listContext _localctx = new Position_spec_listContext(Context, State);
		EnterRule(_localctx, 1120, RULE_position_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5836;
			position_spec();
			State = 5841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5837;
				Match(COMMA);
				State = 5838;
				position_spec();
				}
				}
				State = 5843;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_component_attr_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Proc_component_attr_specContext[] proc_component_attr_spec() {
			return GetRuleContexts<Proc_component_attr_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_component_attr_specContext proc_component_attr_spec(int i) {
			return GetRuleContext<Proc_component_attr_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Proc_component_attr_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_component_attr_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProc_component_attr_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProc_component_attr_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Proc_component_attr_spec_listContext proc_component_attr_spec_list() {
		Proc_component_attr_spec_listContext _localctx = new Proc_component_attr_spec_listContext(Context, State);
		EnterRule(_localctx, 1122, RULE_proc_component_attr_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5844;
			proc_component_attr_spec();
			State = 5849;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5845;
				Match(COMMA);
				State = 5846;
				proc_component_attr_spec();
				}
				}
				State = 5851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_decl_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Proc_declContext[] proc_decl() {
			return GetRuleContexts<Proc_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_declContext proc_decl(int i) {
			return GetRuleContext<Proc_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Proc_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_decl_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProc_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProc_decl_list(this);
		}
	}

	[RuleVersion(0)]
	public Proc_decl_listContext proc_decl_list() {
		Proc_decl_listContext _localctx = new Proc_decl_listContext(Context, State);
		EnterRule(_localctx, 1124, RULE_proc_decl_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5852;
			proc_decl();
			State = 5857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5853;
				Match(COMMA);
				State = 5854;
				proc_decl();
				}
				}
				State = 5859;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rename_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RenameContext[] rename() {
			return GetRuleContexts<RenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameContext rename(int i) {
			return GetRuleContext<RenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Rename_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rename_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterRename_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitRename_list(this);
		}
	}

	[RuleVersion(0)]
	public Rename_listContext rename_list() {
		Rename_listContext _localctx = new Rename_listContext(Context, State);
		EnterRule(_localctx, 1126, RULE_rename_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5860;
			rename();
			State = 5865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5861;
				Match(COMMA);
				State = 5862;
				rename();
				}
				}
				State = 5867;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Saved_entity_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Saved_entityContext[] saved_entity() {
			return GetRuleContexts<Saved_entityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Saved_entityContext saved_entity(int i) {
			return GetRuleContext<Saved_entityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Saved_entity_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saved_entity_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSaved_entity_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSaved_entity_list(this);
		}
	}

	[RuleVersion(0)]
	public Saved_entity_listContext saved_entity_list() {
		Saved_entity_listContext _localctx = new Saved_entity_listContext(Context, State);
		EnterRule(_localctx, 1128, RULE_saved_entity_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5868;
			saved_entity();
			State = 5873;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5869;
				Match(COMMA);
				State = 5870;
				saved_entity();
				}
				}
				State = 5875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Section_subscript_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Section_subscriptContext[] section_subscript() {
			return GetRuleContexts<Section_subscriptContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Section_subscriptContext section_subscript(int i) {
			return GetRuleContext<Section_subscriptContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Section_subscript_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section_subscript_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSection_subscript_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSection_subscript_list(this);
		}
	}

	[RuleVersion(0)]
	public Section_subscript_listContext section_subscript_list() {
		Section_subscript_listContext _localctx = new Section_subscript_listContext(Context, State);
		EnterRule(_localctx, 1130, RULE_section_subscript_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5876;
			section_subscript();
			State = 5881;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5877;
				Match(COMMA);
				State = 5878;
				section_subscript();
				}
				}
				State = 5883;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_procedure_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Specific_procedureContext[] specific_procedure() {
			return GetRuleContexts<Specific_procedureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Specific_procedureContext specific_procedure(int i) {
			return GetRuleContext<Specific_procedureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Specific_procedure_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_procedure_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSpecific_procedure_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSpecific_procedure_list(this);
		}
	}

	[RuleVersion(0)]
	public Specific_procedure_listContext specific_procedure_list() {
		Specific_procedure_listContext _localctx = new Specific_procedure_listContext(Context, State);
		EnterRule(_localctx, 1132, RULE_specific_procedure_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5884;
			specific_procedure();
			State = 5889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5885;
				Match(COMMA);
				State = 5886;
				specific_procedure();
				}
				}
				State = 5891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sync_stat_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sync_statContext[] sync_stat() {
			return GetRuleContexts<Sync_statContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sync_statContext sync_stat(int i) {
			return GetRuleContext<Sync_statContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Sync_stat_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sync_stat_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSync_stat_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSync_stat_list(this);
		}
	}

	[RuleVersion(0)]
	public Sync_stat_listContext sync_stat_list() {
		Sync_stat_listContext _localctx = new Sync_stat_listContext(Context, State);
		EnterRule(_localctx, 1134, RULE_sync_stat_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5892;
			sync_stat();
			State = 5897;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5893;
				Match(COMMA);
				State = 5894;
				sync_stat();
				}
				}
				State = 5899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_decl_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Target_declContext[] target_decl() {
			return GetRuleContexts<Target_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_declContext target_decl(int i) {
			return GetRuleContext<Target_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Target_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_decl_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterTarget_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitTarget_decl_list(this);
		}
	}

	[RuleVersion(0)]
	public Target_decl_listContext target_decl_list() {
		Target_decl_listContext _localctx = new Target_decl_listContext(Context, State);
		EnterRule(_localctx, 1136, RULE_target_decl_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5900;
			target_decl();
			State = 5905;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5901;
				Match(COMMA);
				State = 5902;
				target_decl();
				}
				}
				State = 5907;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_attr_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_attr_specContext[] type_attr_spec() {
			return GetRuleContexts<Type_attr_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_attr_specContext type_attr_spec(int i) {
			return GetRuleContext<Type_attr_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Type_attr_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_attr_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_attr_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_attr_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_attr_spec_listContext type_attr_spec_list() {
		Type_attr_spec_listContext _localctx = new Type_attr_spec_listContext(Context, State);
		EnterRule(_localctx, 1138, RULE_type_attr_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5908;
			type_attr_spec();
			State = 5913;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5909;
				Match(COMMA);
				State = 5910;
				type_attr_spec();
				}
				}
				State = 5915;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_bound_proc_decl_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_bound_proc_declContext[] type_bound_proc_decl() {
			return GetRuleContexts<Type_bound_proc_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_bound_proc_declContext type_bound_proc_decl(int i) {
			return GetRuleContext<Type_bound_proc_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Type_bound_proc_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_bound_proc_decl_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_bound_proc_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_bound_proc_decl_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_bound_proc_decl_listContext type_bound_proc_decl_list() {
		Type_bound_proc_decl_listContext _localctx = new Type_bound_proc_decl_listContext(Context, State);
		EnterRule(_localctx, 1140, RULE_type_bound_proc_decl_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5916;
			type_bound_proc_decl();
			State = 5921;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5917;
				Match(COMMA);
				State = 5918;
				type_bound_proc_decl();
				}
				}
				State = 5923;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_param_decl_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_declContext[] type_param_decl() {
			return GetRuleContexts<Type_param_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_declContext type_param_decl(int i) {
			return GetRuleContext<Type_param_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Type_param_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_param_decl_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_param_decl_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_param_decl_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_param_decl_listContext type_param_decl_list() {
		Type_param_decl_listContext _localctx = new Type_param_decl_listContext(Context, State);
		EnterRule(_localctx, 1142, RULE_type_param_decl_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5924;
			type_param_decl();
			State = 5929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5925;
				Match(COMMA);
				State = 5926;
				type_param_decl();
				}
				}
				State = 5931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_param_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_nameContext[] type_param_name() {
			return GetRuleContexts<Type_param_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_nameContext type_param_name(int i) {
			return GetRuleContext<Type_param_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Type_param_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_param_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_param_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_param_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_param_name_listContext type_param_name_list() {
		Type_param_name_listContext _localctx = new Type_param_name_listContext(Context, State);
		EnterRule(_localctx, 1144, RULE_type_param_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5932;
			type_param_name();
			State = 5937;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5933;
				Match(COMMA);
				State = 5934;
				type_param_name();
				}
				}
				State = 5939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_param_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_specContext[] type_param_spec() {
			return GetRuleContexts<Type_param_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_specContext type_param_spec(int i) {
			return GetRuleContext<Type_param_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Type_param_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_param_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_param_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_param_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_param_spec_listContext type_param_spec_list() {
		Type_param_spec_listContext _localctx = new Type_param_spec_listContext(Context, State);
		EnterRule(_localctx, 1146, RULE_type_param_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5940;
			type_param_spec();
			State = 5945;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5941;
				Match(COMMA);
				State = 5942;
				type_param_spec();
				}
				}
				State = 5947;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class V_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VContext[] v() {
			return GetRuleContexts<VContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VContext v(int i) {
			return GetRuleContext<VContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public V_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_v_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterV_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitV_list(this);
		}
	}

	[RuleVersion(0)]
	public V_listContext v_list() {
		V_listContext _localctx = new V_listContext(Context, State);
		EnterRule(_localctx, 1148, RULE_v_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5948;
			v();
			State = 5953;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5949;
				Match(COMMA);
				State = 5950;
				v();
				}
				}
				State = 5955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext[] variable_name() {
			return GetRuleContexts<Variable_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name(int i) {
			return GetRuleContext<Variable_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Variable_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterVariable_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitVariable_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Variable_name_listContext variable_name_list() {
		Variable_name_listContext _localctx = new Variable_name_listContext(Context, State);
		EnterRule(_localctx, 1150, RULE_variable_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5956;
			variable_name();
			State = 5961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5957;
				Match(COMMA);
				State = 5958;
				variable_name();
				}
				}
				State = 5963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wait_spec_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Wait_specContext[] wait_spec() {
			return GetRuleContexts<Wait_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wait_specContext wait_spec(int i) {
			return GetRuleContext<Wait_specContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(FortranParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(FortranParser.COMMA, i);
		}
		public Wait_spec_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wait_spec_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterWait_spec_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitWait_spec_list(this);
		}
	}

	[RuleVersion(0)]
	public Wait_spec_listContext wait_spec_list() {
		Wait_spec_listContext _localctx = new Wait_spec_listContext(Context, State);
		EnterRule(_localctx, 1152, RULE_wait_spec_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5964;
			wait_spec();
			State = 5969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5965;
				Match(COMMA);
				State = 5966;
				wait_spec();
				}
				}
				State = 5971;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Access_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAccess_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAccess_name(this);
		}
	}

	[RuleVersion(0)]
	public Access_nameContext access_name() {
		Access_nameContext _localctx = new Access_nameContext(Context, State);
		EnterRule(_localctx, 1154, RULE_access_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5972;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ancestor_module_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Ancestor_module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ancestor_module_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAncestor_module_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAncestor_module_name(this);
		}
	}

	[RuleVersion(0)]
	public Ancestor_module_nameContext ancestor_module_name() {
		Ancestor_module_nameContext _localctx = new Ancestor_module_nameContext(Context, State);
		EnterRule(_localctx, 1156, RULE_ancestor_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5974;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Arg_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterArg_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitArg_name(this);
		}
	}

	[RuleVersion(0)]
	public Arg_nameContext arg_name() {
		Arg_nameContext _localctx = new Arg_nameContext(Context, State);
		EnterRule(_localctx, 1158, RULE_arg_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5976;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Array_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterArray_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitArray_name(this);
		}
	}

	[RuleVersion(0)]
	public Array_nameContext array_name() {
		Array_nameContext _localctx = new Array_nameContext(Context, State);
		EnterRule(_localctx, 1160, RULE_array_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5978;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Associate_construct_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Associate_construct_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associate_construct_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAssociate_construct_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAssociate_construct_name(this);
		}
	}

	[RuleVersion(0)]
	public Associate_construct_nameContext associate_construct_name() {
		Associate_construct_nameContext _localctx = new Associate_construct_nameContext(Context, State);
		EnterRule(_localctx, 1162, RULE_associate_construct_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5980;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Associate_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Associate_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associate_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterAssociate_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitAssociate_name(this);
		}
	}

	[RuleVersion(0)]
	public Associate_nameContext associate_name() {
		Associate_nameContext _localctx = new Associate_nameContext(Context, State);
		EnterRule(_localctx, 1164, RULE_associate_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5982;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binding_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Binding_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBinding_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBinding_name(this);
		}
	}

	[RuleVersion(0)]
	public Binding_nameContext binding_name() {
		Binding_nameContext _localctx = new Binding_nameContext(Context, State);
		EnterRule(_localctx, 1166, RULE_binding_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5984;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_construct_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Block_construct_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_construct_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBlock_construct_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBlock_construct_name(this);
		}
	}

	[RuleVersion(0)]
	public Block_construct_nameContext block_construct_name() {
		Block_construct_nameContext _localctx = new Block_construct_nameContext(Context, State);
		EnterRule(_localctx, 1168, RULE_block_construct_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5986;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_data_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Block_data_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_data_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterBlock_data_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitBlock_data_name(this);
		}
	}

	[RuleVersion(0)]
	public Block_data_nameContext block_data_name() {
		Block_data_nameContext _localctx = new Block_data_nameContext(Context, State);
		EnterRule(_localctx, 1170, RULE_block_data_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5988;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_construct_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Case_construct_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_construct_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCase_construct_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCase_construct_name(this);
		}
	}

	[RuleVersion(0)]
	public Case_construct_nameContext case_construct_name() {
		Case_construct_nameContext _localctx = new Case_construct_nameContext(Context, State);
		EnterRule(_localctx, 1172, RULE_case_construct_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5990;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Coarray_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Coarray_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coarray_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCoarray_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCoarray_name(this);
		}
	}

	[RuleVersion(0)]
	public Coarray_nameContext coarray_name() {
		Coarray_nameContext _localctx = new Coarray_nameContext(Context, State);
		EnterRule(_localctx, 1174, RULE_coarray_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5992;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_block_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Common_block_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_block_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCommon_block_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCommon_block_name(this);
		}
	}

	[RuleVersion(0)]
	public Common_block_nameContext common_block_name() {
		Common_block_nameContext _localctx = new Common_block_nameContext(Context, State);
		EnterRule(_localctx, 1176, RULE_common_block_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5994;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Component_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterComponent_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitComponent_name(this);
		}
	}

	[RuleVersion(0)]
	public Component_nameContext component_name() {
		Component_nameContext _localctx = new Component_nameContext(Context, State);
		EnterRule(_localctx, 1178, RULE_component_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5996;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Construct_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Construct_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_construct_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterConstruct_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitConstruct_name(this);
		}
	}

	[RuleVersion(0)]
	public Construct_nameContext construct_name() {
		Construct_nameContext _localctx = new Construct_nameContext(Context, State);
		EnterRule(_localctx, 1180, RULE_construct_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5998;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Critical_construct_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Critical_construct_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_critical_construct_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterCritical_construct_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitCritical_construct_name(this);
		}
	}

	[RuleVersion(0)]
	public Critical_construct_nameContext critical_construct_name() {
		Critical_construct_nameContext _localctx = new Critical_construct_nameContext(Context, State);
		EnterRule(_localctx, 1182, RULE_critical_construct_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6000;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_pointer_component_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Data_pointer_component_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_pointer_component_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterData_pointer_component_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitData_pointer_component_name(this);
		}
	}

	[RuleVersion(0)]
	public Data_pointer_component_nameContext data_pointer_component_name() {
		Data_pointer_component_nameContext _localctx = new Data_pointer_component_nameContext(Context, State);
		EnterRule(_localctx, 1184, RULE_data_pointer_component_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6002;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_construct_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Do_construct_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_construct_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterDo_construct_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitDo_construct_name(this);
		}
	}

	[RuleVersion(0)]
	public Do_construct_nameContext do_construct_name() {
		Do_construct_nameContext _localctx = new Do_construct_nameContext(Context, State);
		EnterRule(_localctx, 1186, RULE_do_construct_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6004;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Entity_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEntity_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEntity_name(this);
		}
	}

	[RuleVersion(0)]
	public Entity_nameContext entity_name() {
		Entity_nameContext _localctx = new Entity_nameContext(Context, State);
		EnterRule(_localctx, 1188, RULE_entity_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6006;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entry_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Entry_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entry_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEntry_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEntry_name(this);
		}
	}

	[RuleVersion(0)]
	public Entry_nameContext entry_name() {
		Entry_nameContext _localctx = new Entry_nameContext(Context, State);
		EnterRule(_localctx, 1190, RULE_entry_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6008;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Enum_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnum_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnum_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Enum_type_nameContext enum_type_name() {
		Enum_type_nameContext _localctx = new Enum_type_nameContext(Context, State);
		EnterRule(_localctx, 1192, RULE_enum_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6010;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumeration_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Enumeration_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnumeration_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnumeration_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Enumeration_type_nameContext enumeration_type_name() {
		Enumeration_type_nameContext _localctx = new Enumeration_type_nameContext(Context, State);
		EnterRule(_localctx, 1194, RULE_enumeration_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6012;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumerator_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Enumerator_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterEnumerator_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitEnumerator_name(this);
		}
	}

	[RuleVersion(0)]
	public Enumerator_nameContext enumerator_name() {
		Enumerator_nameContext _localctx = new Enumerator_nameContext(Context, State);
		EnterRule(_localctx, 1196, RULE_enumerator_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6014;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public External_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterExternal_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitExternal_name(this);
		}
	}

	[RuleVersion(0)]
	public External_nameContext external_name() {
		External_nameContext _localctx = new External_nameContext(Context, State);
		EnterRule(_localctx, 1198, RULE_external_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6016;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Final_subroutine_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Final_subroutine_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_final_subroutine_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFinal_subroutine_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFinal_subroutine_name(this);
		}
	}

	[RuleVersion(0)]
	public Final_subroutine_nameContext final_subroutine_name() {
		Final_subroutine_nameContext _localctx = new Final_subroutine_nameContext(Context, State);
		EnterRule(_localctx, 1200, RULE_final_subroutine_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6018;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Forall_construct_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Forall_construct_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forall_construct_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterForall_construct_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitForall_construct_name(this);
		}
	}

	[RuleVersion(0)]
	public Forall_construct_nameContext forall_construct_name() {
		Forall_construct_nameContext _localctx = new Forall_construct_nameContext(Context, State);
		EnterRule(_localctx, 1202, RULE_forall_construct_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6020;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 1204, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6022;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_reduction_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Function_reduction_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_reduction_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterFunction_reduction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitFunction_reduction_name(this);
		}
	}

	[RuleVersion(0)]
	public Function_reduction_nameContext function_reduction_name() {
		Function_reduction_nameContext _localctx = new Function_reduction_nameContext(Context, State);
		EnterRule(_localctx, 1206, RULE_function_reduction_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6024;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Generic_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterGeneric_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitGeneric_name(this);
		}
	}

	[RuleVersion(0)]
	public Generic_nameContext generic_name() {
		Generic_nameContext _localctx = new Generic_nameContext(Context, State);
		EnterRule(_localctx, 1208, RULE_generic_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6026;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_construct_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public If_construct_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_construct_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIf_construct_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIf_construct_name(this);
		}
	}

	[RuleVersion(0)]
	public If_construct_nameContext if_construct_name() {
		If_construct_nameContext _localctx = new If_construct_nameContext(Context, State);
		EnterRule(_localctx, 1210, RULE_if_construct_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6028;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Import_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterImport_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitImport_name(this);
		}
	}

	[RuleVersion(0)]
	public Import_nameContext import_name() {
		Import_nameContext _localctx = new Import_nameContext(Context, State);
		EnterRule(_localctx, 1212, RULE_import_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6030;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIndex_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIndex_name(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(Context, State);
		EnterRule(_localctx, 1214, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6032;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_constant_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Int_constant_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_constant_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInt_constant_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInt_constant_name(this);
		}
	}

	[RuleVersion(0)]
	public Int_constant_nameContext int_constant_name() {
		Int_constant_nameContext _localctx = new Int_constant_nameContext(Context, State);
		EnterRule(_localctx, 1216, RULE_int_constant_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6034;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Int_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterInt_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitInt_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Int_variable_nameContext int_variable_name() {
		Int_variable_nameContext _localctx = new Int_variable_nameContext(Context, State);
		EnterRule(_localctx, 1218, RULE_int_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6036;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Intrinsic_procedure_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Intrinsic_procedure_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intrinsic_procedure_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterIntrinsic_procedure_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitIntrinsic_procedure_name(this);
		}
	}

	[RuleVersion(0)]
	public Intrinsic_procedure_nameContext intrinsic_procedure_name() {
		Intrinsic_procedure_nameContext _localctx = new Intrinsic_procedure_nameContext(Context, State);
		EnterRule(_localctx, 1220, RULE_intrinsic_procedure_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6038;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Local_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterLocal_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitLocal_name(this);
		}
	}

	[RuleVersion(0)]
	public Local_nameContext local_name() {
		Local_nameContext _localctx = new Local_nameContext(Context, State);
		EnterRule(_localctx, 1222, RULE_local_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6040;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(Context, State);
		EnterRule(_localctx, 1224, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6042;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namelist_group_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Namelist_group_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist_group_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterNamelist_group_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitNamelist_group_name(this);
		}
	}

	[RuleVersion(0)]
	public Namelist_group_nameContext namelist_group_name() {
		Namelist_group_nameContext _localctx = new Namelist_group_nameContext(Context, State);
		EnterRule(_localctx, 1226, RULE_namelist_group_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6044;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parent_submodule_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Parent_submodule_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parent_submodule_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterParent_submodule_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitParent_submodule_name(this);
		}
	}

	[RuleVersion(0)]
	public Parent_submodule_nameContext parent_submodule_name() {
		Parent_submodule_nameContext _localctx = new Parent_submodule_nameContext(Context, State);
		EnterRule(_localctx, 1228, RULE_parent_submodule_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6046;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parent_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Parent_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parent_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterParent_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitParent_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Parent_type_nameContext parent_type_name() {
		Parent_type_nameContext _localctx = new Parent_type_nameContext(Context, State);
		EnterRule(_localctx, 1230, RULE_parent_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6048;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Part_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Part_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_part_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterPart_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitPart_name(this);
		}
	}

	[RuleVersion(0)]
	public Part_nameContext part_name() {
		Part_nameContext _localctx = new Part_nameContext(Context, State);
		EnterRule(_localctx, 1232, RULE_part_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6050;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_component_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Procedure_component_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_component_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProcedure_component_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProcedure_component_name(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_component_nameContext procedure_component_name() {
		Procedure_component_nameContext _localctx = new Procedure_component_nameContext(Context, State);
		EnterRule(_localctx, 1234, RULE_procedure_component_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6052;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_entity_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Procedure_entity_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_entity_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProcedure_entity_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProcedure_entity_name(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_entity_nameContext procedure_entity_name() {
		Procedure_entity_nameContext _localctx = new Procedure_entity_nameContext(Context, State);
		EnterRule(_localctx, 1236, RULE_procedure_entity_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6054;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProcedure_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProcedure_name(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_nameContext procedure_name() {
		Procedure_nameContext _localctx = new Procedure_nameContext(Context, State);
		EnterRule(_localctx, 1238, RULE_procedure_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6056;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procptr_entity_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Procptr_entity_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procptr_entity_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProcptr_entity_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProcptr_entity_name(this);
		}
	}

	[RuleVersion(0)]
	public Procptr_entity_nameContext procptr_entity_name() {
		Procptr_entity_nameContext _localctx = new Procptr_entity_nameContext(Context, State);
		EnterRule(_localctx, 1240, RULE_procptr_entity_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6058;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Program_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Program_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterProgram_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitProgram_name(this);
		}
	}

	[RuleVersion(0)]
	public Program_nameContext program_name() {
		Program_nameContext _localctx = new Program_nameContext(Context, State);
		EnterRule(_localctx, 1242, RULE_program_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6060;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Result_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterResult_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitResult_name(this);
		}
	}

	[RuleVersion(0)]
	public Result_nameContext result_name() {
		Result_nameContext _localctx = new Result_nameContext(Context, State);
		EnterRule(_localctx, 1244, RULE_result_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6062;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_constant_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constant_exprContext constant_expr() {
			return GetRuleContext<Constant_exprContext>(0);
		}
		public Scalar_constant_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_constant_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_constant_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_constant_expr(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_constant_exprContext scalar_constant_expr() {
		Scalar_constant_exprContext _localctx = new Scalar_constant_exprContext(Context, State);
		EnterRule(_localctx, 1246, RULE_scalar_constant_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6064;
			constant_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_constant_subobjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constant_subobjectContext constant_subobject() {
			return GetRuleContext<Constant_subobjectContext>(0);
		}
		public Scalar_constant_subobjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_constant_subobject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_constant_subobject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_constant_subobject(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_constant_subobjectContext scalar_constant_subobject() {
		Scalar_constant_subobjectContext _localctx = new Scalar_constant_subobjectContext(Context, State);
		EnterRule(_localctx, 1248, RULE_scalar_constant_subobject);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6066;
			constant_subobject();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Scalar_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_constant(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_constantContext scalar_constant() {
		Scalar_constantContext _localctx = new Scalar_constantContext(Context, State);
		EnterRule(_localctx, 1250, RULE_scalar_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6068;
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_default_char_constant_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Default_char_constant_exprContext default_char_constant_expr() {
			return GetRuleContext<Default_char_constant_exprContext>(0);
		}
		public Scalar_default_char_constant_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_default_char_constant_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_default_char_constant_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_default_char_constant_expr(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_default_char_constant_exprContext scalar_default_char_constant_expr() {
		Scalar_default_char_constant_exprContext _localctx = new Scalar_default_char_constant_exprContext(Context, State);
		EnterRule(_localctx, 1252, RULE_scalar_default_char_constant_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6070;
			default_char_constant_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_default_char_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Default_char_exprContext default_char_expr() {
			return GetRuleContext<Default_char_exprContext>(0);
		}
		public Scalar_default_char_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_default_char_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_default_char_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_default_char_expr(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_default_char_exprContext scalar_default_char_expr() {
		Scalar_default_char_exprContext _localctx = new Scalar_default_char_exprContext(Context, State);
		EnterRule(_localctx, 1254, RULE_scalar_default_char_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6072;
			default_char_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_default_char_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Default_char_variableContext default_char_variable() {
			return GetRuleContext<Default_char_variableContext>(0);
		}
		public Scalar_default_char_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_default_char_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_default_char_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_default_char_variable(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_default_char_variableContext scalar_default_char_variable() {
		Scalar_default_char_variableContext _localctx = new Scalar_default_char_variableContext(Context, State);
		EnterRule(_localctx, 1256, RULE_scalar_default_char_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6074;
			default_char_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Scalar_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_expr(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_exprContext scalar_expr() {
		Scalar_exprContext _localctx = new Scalar_exprContext(Context, State);
		EnterRule(_localctx, 1258, RULE_scalar_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6076;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_int_constant_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_constant_exprContext int_constant_expr() {
			return GetRuleContext<Int_constant_exprContext>(0);
		}
		public Scalar_int_constant_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_int_constant_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_int_constant_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_int_constant_expr(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_int_constant_exprContext scalar_int_constant_expr() {
		Scalar_int_constant_exprContext _localctx = new Scalar_int_constant_exprContext(Context, State);
		EnterRule(_localctx, 1260, RULE_scalar_int_constant_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6078;
			int_constant_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_int_constant_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_constant_nameContext int_constant_name() {
			return GetRuleContext<Int_constant_nameContext>(0);
		}
		public Scalar_int_constant_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_int_constant_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_int_constant_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_int_constant_name(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_int_constant_nameContext scalar_int_constant_name() {
		Scalar_int_constant_nameContext _localctx = new Scalar_int_constant_nameContext(Context, State);
		EnterRule(_localctx, 1262, RULE_scalar_int_constant_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6080;
			int_constant_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_int_constant_subobjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_constant_subobjectContext int_constant_subobject() {
			return GetRuleContext<Int_constant_subobjectContext>(0);
		}
		public Scalar_int_constant_subobjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_int_constant_subobject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_int_constant_subobject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_int_constant_subobject(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_int_constant_subobjectContext scalar_int_constant_subobject() {
		Scalar_int_constant_subobjectContext _localctx = new Scalar_int_constant_subobjectContext(Context, State);
		EnterRule(_localctx, 1264, RULE_scalar_int_constant_subobject);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6082;
			int_constant_subobject();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_int_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_constantContext int_constant() {
			return GetRuleContext<Int_constantContext>(0);
		}
		public Scalar_int_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_int_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_int_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_int_constant(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_int_constantContext scalar_int_constant() {
		Scalar_int_constantContext _localctx = new Scalar_int_constantContext(Context, State);
		EnterRule(_localctx, 1266, RULE_scalar_int_constant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6084;
			int_constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_int_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_exprContext int_expr() {
			return GetRuleContext<Int_exprContext>(0);
		}
		public Scalar_int_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_int_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_int_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_int_expr(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_int_exprContext scalar_int_expr() {
		Scalar_int_exprContext _localctx = new Scalar_int_exprContext(Context, State);
		EnterRule(_localctx, 1268, RULE_scalar_int_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6086;
			int_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_int_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_variable_nameContext int_variable_name() {
			return GetRuleContext<Int_variable_nameContext>(0);
		}
		public Scalar_int_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_int_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_int_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_int_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_int_variable_nameContext scalar_int_variable_name() {
		Scalar_int_variable_nameContext _localctx = new Scalar_int_variable_nameContext(Context, State);
		EnterRule(_localctx, 1270, RULE_scalar_int_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6088;
			int_variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_int_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int_variableContext int_variable() {
			return GetRuleContext<Int_variableContext>(0);
		}
		public Scalar_int_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_int_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_int_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_int_variable(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_int_variableContext scalar_int_variable() {
		Scalar_int_variableContext _localctx = new Scalar_int_variableContext(Context, State);
		EnterRule(_localctx, 1272, RULE_scalar_int_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6090;
			int_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_logical_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_exprContext logical_expr() {
			return GetRuleContext<Logical_exprContext>(0);
		}
		public Scalar_logical_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_logical_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_logical_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_logical_expr(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_logical_exprContext scalar_logical_expr() {
		Scalar_logical_exprContext _localctx = new Scalar_logical_exprContext(Context, State);
		EnterRule(_localctx, 1274, RULE_scalar_logical_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6092;
			logical_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_logical_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_variableContext logical_variable() {
			return GetRuleContext<Logical_variableContext>(0);
		}
		public Scalar_logical_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_logical_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_logical_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_logical_variable(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_logical_variableContext scalar_logical_variable() {
		Scalar_logical_variableContext _localctx = new Scalar_logical_variableContext(Context, State);
		EnterRule(_localctx, 1276, RULE_scalar_logical_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6094;
			logical_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_mask_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mask_exprContext mask_expr() {
			return GetRuleContext<Mask_exprContext>(0);
		}
		public Scalar_mask_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_mask_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_mask_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_mask_expr(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_mask_exprContext scalar_mask_expr() {
		Scalar_mask_exprContext _localctx = new Scalar_mask_exprContext(Context, State);
		EnterRule(_localctx, 1278, RULE_scalar_mask_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6096;
			mask_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_structure_componentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Structure_componentContext structure_component() {
			return GetRuleContext<Structure_componentContext>(0);
		}
		public Scalar_structure_componentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_structure_component; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_structure_component(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_structure_component(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_structure_componentContext scalar_structure_component() {
		Scalar_structure_componentContext _localctx = new Scalar_structure_componentContext(Context, State);
		EnterRule(_localctx, 1280, RULE_scalar_structure_component);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6098;
			structure_component();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		public Scalar_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_variable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_variable_nameContext scalar_variable_name() {
		Scalar_variable_nameContext _localctx = new Scalar_variable_nameContext(Context, State);
		EnterRule(_localctx, 1282, RULE_scalar_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6100;
			variable_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Scalar_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterScalar_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitScalar_variable(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_variableContext scalar_variable() {
		Scalar_variableContext _localctx = new Scalar_variableContext(Context, State);
		EnterRule(_localctx, 1284, RULE_scalar_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6102;
			variable(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_construct_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Select_construct_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_construct_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSelect_construct_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSelect_construct_name(this);
		}
	}

	[RuleVersion(0)]
	public Select_construct_nameContext select_construct_name() {
		Select_construct_nameContext _localctx = new Select_construct_nameContext(Context, State);
		EnterRule(_localctx, 1286, RULE_select_construct_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6104;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Submodule_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Submodule_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_submodule_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSubmodule_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSubmodule_name(this);
		}
	}

	[RuleVersion(0)]
	public Submodule_nameContext submodule_name() {
		Submodule_nameContext _localctx = new Submodule_nameContext(Context, State);
		EnterRule(_localctx, 1288, RULE_submodule_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6106;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subroutine_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Subroutine_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subroutine_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterSubroutine_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitSubroutine_name(this);
		}
	}

	[RuleVersion(0)]
	public Subroutine_nameContext subroutine_name() {
		Subroutine_nameContext _localctx = new Subroutine_nameContext(Context, State);
		EnterRule(_localctx, 1290, RULE_subroutine_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6108;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Team_construct_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Team_construct_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_team_construct_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterTeam_construct_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitTeam_construct_name(this);
		}
	}

	[RuleVersion(0)]
	public Team_construct_nameContext team_construct_name() {
		Team_construct_nameContext _localctx = new Team_construct_nameContext(Context, State);
		EnterRule(_localctx, 1292, RULE_team_construct_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6110;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 1294, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6112;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_param_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Type_param_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_param_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterType_param_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitType_param_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_param_nameContext type_param_name() {
		Type_param_nameContext _localctx = new Type_param_nameContext(Context, State);
		EnterRule(_localctx, 1296, RULE_type_param_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6114;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Use_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterUse_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitUse_name(this);
		}
	}

	[RuleVersion(0)]
	public Use_nameContext use_name() {
		Use_nameContext _localctx = new Use_nameContext(Context, State);
		EnterRule(_localctx, 1298, RULE_use_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6116;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_construct_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Where_construct_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_construct_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.EnterWhere_construct_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFortranParserListener typedListener = listener as IFortranParserListener;
			if (typedListener != null) typedListener.ExitWhere_construct_name(this);
		}
	}

	[RuleVersion(0)]
	public Where_construct_nameContext where_construct_name() {
		Where_construct_nameContext _localctx = new Where_construct_nameContext(Context, State);
		EnterRule(_localctx, 1300, RULE_where_construct_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6118;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 203: return designator_sempred((DesignatorContext)_localctx, predIndex);
		case 204: return variable_sempred((VariableContext)_localctx, predIndex);
		}
		return true;
	}
	private bool designator_sempred(DesignatorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}
	private bool variable_sempred(VariableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,291,6121,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,
		2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,
		2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,
		2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
		2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
		2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,
		2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,
		2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,
		2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,
		2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,
		2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,
		2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,
		2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,
		2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,
		2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
		2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
		2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,
		2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,
		2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,
		2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,
		2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,
		2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,
		2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,
		2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,
		2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,
		2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,
		2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
		2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,
		2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,
		2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,
		2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,
		2,447,7,447,2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,
		2,453,7,453,2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,
		2,459,7,459,2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,
		2,465,7,465,2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,
		2,471,7,471,2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,
		2,477,7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,
		2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
		2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,
		2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,
		2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,
		2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,
		2,513,7,513,2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,7,518,
		2,519,7,519,2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,7,524,
		2,525,7,525,2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,
		2,531,7,531,2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,
		2,537,7,537,2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,
		2,543,7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,
		2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,
		2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,7,560,
		2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,7,566,
		2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,7,572,
		2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,2,577,7,577,2,578,7,578,
		2,579,7,579,2,580,7,580,2,581,7,581,2,582,7,582,2,583,7,583,2,584,7,584,
		2,585,7,585,2,586,7,586,2,587,7,587,2,588,7,588,2,589,7,589,2,590,7,590,
		2,591,7,591,2,592,7,592,2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,
		2,597,7,597,2,598,7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,
		2,603,7,603,2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,
		2,609,7,609,2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,
		2,615,7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,7,620,
		2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,2,626,7,626,
		2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,7,631,2,632,7,632,
		2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,2,637,7,637,2,638,7,638,
		2,639,7,639,2,640,7,640,2,641,7,641,2,642,7,642,2,643,7,643,2,644,7,644,
		2,645,7,645,2,646,7,646,2,647,7,647,2,648,7,648,2,649,7,649,2,650,7,650,
		1,0,1,0,1,1,1,1,5,1,1307,8,1,10,1,12,1,1310,9,1,1,2,1,2,1,2,1,2,1,2,3,
		2,1317,8,2,1,3,3,3,1320,8,3,1,3,3,3,1323,8,3,1,3,3,3,1326,8,3,1,3,3,3,
		1329,8,3,1,3,1,3,1,4,1,4,3,4,1335,8,4,1,5,1,5,3,5,1339,8,5,1,5,3,5,1342,
		8,5,1,5,3,5,1345,8,5,1,5,1,5,1,6,1,6,3,6,1351,8,6,1,6,3,6,1354,8,6,1,6,
		3,6,1357,8,6,1,6,1,6,1,7,1,7,3,7,1363,8,7,1,7,3,7,1366,8,7,1,7,1,7,1,8,
		1,8,3,8,1372,8,8,1,8,3,8,1375,8,8,1,8,1,8,1,9,1,9,3,9,1381,8,9,1,9,1,9,
		1,10,5,10,1386,8,10,10,10,12,10,1389,9,10,1,10,5,10,1392,8,10,10,10,12,
		10,1395,9,10,1,10,3,10,1398,8,10,1,10,5,10,1401,8,10,10,10,12,10,1404,
		9,10,1,11,5,11,1407,8,11,10,11,12,11,1410,9,11,1,11,1,11,1,12,1,12,1,12,
		1,12,3,12,1418,8,12,1,13,1,13,1,13,1,13,1,13,3,13,1425,8,13,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,1436,8,14,1,15,1,15,5,15,1440,
		8,15,10,15,12,15,1443,9,15,1,16,1,16,1,16,1,16,3,16,1449,8,16,1,17,1,17,
		5,17,1453,8,17,10,17,12,17,1456,9,17,1,18,1,18,3,18,1460,8,18,1,19,1,19,
		5,19,1464,8,19,10,19,12,19,1467,9,19,1,20,1,20,1,20,3,20,1472,8,20,1,21,
		1,21,3,21,1476,8,21,1,21,3,21,1479,8,21,1,21,3,21,1482,8,21,1,21,1,21,
		1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,3,22,1506,8,22,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,1520,8,23,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1561,8,24,1,25,1,25,1,26,1,26,
		1,27,1,27,3,27,1569,8,27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,1577,8,28,
		1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,
		1592,8,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,
		1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,3,41,1615,8,41,1,42,1,42,
		1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,46,3,46,1628,8,46,1,47,1,47,
		1,47,1,47,3,47,1634,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1680,8,48,1,49,1,49,1,49,3,49,
		1685,8,49,1,49,1,49,1,49,1,49,3,49,1691,8,49,1,49,1,49,3,49,1695,8,49,
		1,49,1,49,3,49,1699,8,49,3,49,1701,8,49,1,50,1,50,3,50,1705,8,50,1,51,
		1,51,1,51,3,51,1710,8,51,1,51,1,51,1,51,1,52,3,52,1716,8,52,1,52,1,52,
		1,53,1,53,1,53,3,53,1723,8,53,1,54,1,54,3,54,1727,8,54,1,55,3,55,1730,
		8,55,1,55,1,55,1,56,1,56,1,57,1,57,1,58,3,58,1739,8,58,1,58,1,58,1,59,
		1,59,1,59,1,59,3,59,1747,8,59,1,59,1,59,3,59,1751,8,59,1,59,1,59,1,59,
		1,59,1,59,3,59,1758,8,59,3,59,1760,8,59,1,60,1,60,1,60,3,60,1765,8,60,
		1,60,1,60,3,60,1769,8,60,1,61,1,61,1,62,1,62,1,63,1,63,1,63,1,63,1,63,
		1,63,1,64,1,64,1,64,3,64,1784,8,64,1,65,1,65,1,65,3,65,1789,8,65,1,66,
		1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
		1,66,3,66,1807,8,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
		1,66,3,66,1820,8,66,1,66,1,66,3,66,1824,8,66,1,67,1,67,1,67,3,67,1829,
		8,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1837,8,67,3,67,1839,8,67,1,68,
		1,68,1,68,1,68,1,68,3,68,1846,8,68,1,69,1,69,1,69,3,69,1851,8,69,1,69,
		1,69,1,69,1,69,3,69,1857,8,69,1,69,3,69,1860,8,69,1,70,1,70,1,70,3,70,
		1865,8,70,1,70,1,70,1,70,3,70,1870,8,70,3,70,1872,8,70,1,71,1,71,5,71,
		1876,8,71,10,71,12,71,1879,9,71,1,71,5,71,1882,8,71,10,71,12,71,1885,9,
		71,1,71,3,71,1888,8,71,1,71,3,71,1891,8,71,1,71,1,71,1,72,1,72,1,72,3,
		72,1898,8,72,1,72,3,72,1901,8,72,1,72,1,72,1,72,1,72,1,72,3,72,1908,8,
		72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1921,8,
		73,1,74,1,74,3,74,1925,8,74,1,75,1,75,1,75,3,75,1930,8,75,1,76,1,76,1,
		77,1,77,1,77,1,77,1,77,1,77,1,78,1,78,1,78,3,78,1943,8,78,1,79,1,79,1,
		80,5,80,1948,8,80,10,80,12,80,1951,9,80,1,81,1,81,3,81,1955,8,81,1,82,
		1,82,1,82,3,82,1960,8,82,1,82,3,82,1963,8,82,1,82,1,82,1,83,1,83,1,83,
		1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1981,8,83,
		1,84,1,84,1,84,1,84,1,84,3,84,1988,8,84,1,84,1,84,1,84,1,84,3,84,1994,
		8,84,1,84,1,84,3,84,1998,8,84,1,84,3,84,2001,8,84,1,85,1,85,3,85,2005,
		8,85,1,86,1,86,1,86,3,86,2010,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,87,
		1,87,1,87,1,87,1,87,1,87,1,87,3,87,2025,8,87,1,87,3,87,2028,8,87,1,88,
		1,88,1,88,1,88,1,88,1,88,3,88,2036,8,88,1,89,1,89,1,90,1,90,1,91,1,91,
		3,91,2044,8,91,1,91,5,91,2047,8,91,10,91,12,91,2050,9,91,1,92,1,92,1,93,
		1,93,1,93,3,93,2057,8,93,1,94,1,94,1,94,3,94,2062,8,94,1,94,3,94,2065,
		8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2077,8,94,
		1,95,1,95,1,95,3,95,2082,8,95,1,96,1,96,1,96,3,96,2087,8,96,1,96,1,96,
		1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,2103,
		8,97,3,97,2105,8,97,1,98,1,98,3,98,2109,8,98,1,98,1,98,1,99,1,99,1,99,
		1,99,1,99,3,99,2118,8,99,1,100,1,100,1,100,3,100,2123,8,100,1,100,1,100,
		1,101,1,101,1,101,3,101,2130,8,101,1,101,1,101,1,102,1,102,1,102,3,102,
		2137,8,102,1,102,1,102,1,103,1,103,1,103,3,103,2144,8,103,1,104,1,104,
		1,104,5,104,2149,8,104,10,104,12,104,2152,9,104,1,104,1,104,1,105,1,105,
		1,105,1,105,1,105,1,105,1,105,1,105,3,105,2164,8,105,1,106,1,106,3,106,
		2168,8,106,1,106,1,106,1,107,1,107,1,107,3,107,2175,8,107,1,108,1,108,
		1,108,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,5,111,
		2190,8,111,10,111,12,111,2193,9,111,1,111,1,111,1,112,1,112,1,112,1,112,
		3,112,2201,8,112,1,112,3,112,2204,8,112,1,112,1,112,1,113,1,113,3,113,
		2210,8,113,1,113,1,113,1,114,1,114,1,114,1,114,3,114,2218,8,114,1,115,
		1,115,1,116,1,116,1,116,1,116,1,116,1,117,1,117,1,118,1,118,1,118,1,118,
		1,118,1,118,1,118,1,118,3,118,2237,8,118,1,119,1,119,1,119,1,119,1,119,
		1,119,3,119,2245,8,119,1,119,3,119,2248,8,119,1,120,1,120,1,121,1,121,
		1,122,1,122,3,122,2256,8,122,1,123,1,123,1,123,1,123,1,123,1,123,1,124,
		1,124,1,124,3,124,2267,8,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
		3,124,2276,8,124,1,125,1,125,1,126,1,126,1,126,5,126,2283,8,126,10,126,
		12,126,2286,9,126,1,126,3,126,2289,8,126,1,126,1,126,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
		1,127,1,127,1,127,1,127,3,127,2324,8,127,1,128,1,128,1,128,1,128,1,128,
		3,128,2331,8,128,1,128,1,128,1,128,1,128,3,128,2337,8,128,1,128,1,128,
		3,128,2341,8,128,1,128,3,128,2344,8,128,1,128,1,128,1,128,3,128,2349,8,
		128,3,128,2351,8,128,1,129,1,129,1,130,1,130,1,130,1,130,1,130,1,130,3,
		130,2361,8,130,1,131,1,131,1,132,1,132,1,133,1,133,1,133,1,133,1,133,1,
		133,1,133,3,133,2374,8,133,1,133,1,133,1,134,1,134,3,134,2380,8,134,1,
		135,1,135,1,136,1,136,1,136,3,136,2387,8,136,1,136,1,136,1,136,5,136,2392,
		8,136,10,136,12,136,2395,9,136,1,136,1,136,1,136,3,136,2400,8,136,1,136,
		1,136,1,137,1,137,1,138,1,138,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
		1,139,1,139,3,139,2417,8,139,1,140,1,140,1,140,3,140,2422,8,140,1,140,
		1,140,1,141,1,141,1,142,1,142,1,143,1,143,1,143,3,143,2433,8,143,1,143,
		1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,2444,8,143,1,144,
		1,144,1,145,3,145,2449,8,145,1,145,1,145,1,146,1,146,1,146,1,147,1,147,
		1,148,1,148,1,148,3,148,2461,8,148,1,148,1,148,1,149,1,149,1,149,1,149,
		1,150,1,150,1,151,1,151,1,151,1,151,1,152,1,152,1,153,1,153,1,154,1,154,
		1,154,1,154,1,154,1,155,1,155,3,155,2486,8,155,1,155,3,155,2489,8,155,
		1,156,1,156,3,156,2493,8,156,1,157,1,157,3,157,2497,8,157,1,157,1,157,
		1,158,1,158,1,158,1,158,1,158,3,158,2506,8,158,1,158,1,158,1,158,1,158,
		3,158,2512,8,158,1,159,1,159,3,159,2516,8,159,1,159,1,159,1,160,1,160,
		3,160,2522,8,160,1,160,1,160,1,161,1,161,1,161,1,161,1,161,3,161,2531,
		8,161,1,162,1,162,3,162,2535,8,162,1,162,1,162,1,163,1,163,1,163,1,163,
		1,163,1,164,1,164,3,164,2546,8,164,1,164,1,164,1,165,1,165,1,165,3,165,
		2553,8,165,1,165,5,165,2556,8,165,10,165,12,165,2559,9,165,1,166,1,166,
		1,166,1,166,1,166,1,167,1,167,3,167,2568,8,167,1,168,1,168,1,168,1,168,
		1,168,1,168,3,168,2576,8,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
		3,168,2585,8,168,1,168,1,168,1,169,1,169,1,169,3,169,2592,8,169,1,170,
		1,170,1,171,1,171,1,171,3,171,2599,8,171,1,171,1,171,1,172,1,172,3,172,
		2605,8,172,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,
		2616,8,173,1,174,1,174,1,175,1,175,1,176,1,176,3,176,2624,8,176,1,176,
		1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,5,176,2636,8,176,
		10,176,12,176,2639,9,176,1,177,1,177,1,177,1,177,1,177,3,177,2646,8,177,
		1,177,1,177,1,178,1,178,3,178,2652,8,178,1,178,1,178,1,179,1,179,1,179,
		1,179,1,179,1,180,1,180,1,180,1,180,1,181,1,181,3,181,2667,8,181,1,181,
		1,181,1,182,1,182,1,182,1,182,1,182,3,182,2676,8,182,1,182,3,182,2679,
		8,182,1,183,1,183,3,183,2683,8,183,1,183,1,183,1,184,1,184,3,184,2689,
		8,184,1,184,3,184,2692,8,184,1,185,1,185,1,185,1,185,1,185,1,185,3,185,
		2700,8,185,1,186,1,186,1,187,1,187,3,187,2706,8,187,1,187,1,187,1,188,
		1,188,1,188,1,188,1,188,3,188,2715,8,188,1,188,1,188,1,188,1,188,3,188,
		2721,8,188,1,189,1,189,3,189,2725,8,189,1,189,1,189,1,190,1,190,3,190,
		2731,8,190,1,190,1,190,1,191,1,191,1,191,1,191,1,191,1,191,3,191,2741,
		8,191,1,191,3,191,2744,8,191,3,191,2746,8,191,1,192,1,192,1,192,1,192,
		1,192,1,193,1,193,1,194,1,194,1,195,1,195,3,195,2759,8,195,1,195,3,195,
		2762,8,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,1,195,
		1,195,3,195,2775,8,195,1,196,1,196,1,196,1,196,1,196,1,196,3,196,2783,
		8,196,1,196,1,196,1,196,1,196,1,196,5,196,2790,8,196,10,196,12,196,2793,
		9,196,1,197,1,197,1,198,1,198,1,198,1,199,1,199,1,199,1,199,1,199,1,199,
		1,200,1,200,1,200,3,200,2809,8,200,1,201,1,201,1,201,3,201,2814,8,201,
		1,201,3,201,2817,8,201,1,201,1,201,3,201,2821,8,201,1,201,1,201,3,201,
		2825,8,201,1,201,1,201,5,201,2829,8,201,10,201,12,201,2832,9,201,1,202,
		1,202,1,202,1,202,1,202,3,202,2839,8,202,1,203,1,203,1,203,1,203,1,203,
		1,203,1,203,1,203,3,203,2849,8,203,1,203,1,203,1,203,3,203,2854,8,203,
		1,203,1,203,1,203,1,203,1,203,1,203,5,203,2862,8,203,10,203,12,203,2865,
		9,203,1,204,1,204,1,204,1,204,1,204,3,204,2872,8,204,1,204,1,204,1,204,
		1,204,1,204,1,204,1,204,3,204,2881,8,204,1,204,1,204,3,204,2885,8,204,
		1,204,1,204,1,204,1,204,1,204,3,204,2892,8,204,1,204,1,204,5,204,2896,
		8,204,10,204,12,204,2899,9,204,1,205,1,205,1,206,1,206,1,207,1,207,1,208,
		1,208,1,209,1,209,1,210,1,210,1,210,1,210,1,210,1,211,1,211,1,211,1,211,
		1,211,3,211,2921,8,211,1,212,3,212,2924,8,212,1,212,1,212,3,212,2928,8,
		212,1,213,1,213,1,213,5,213,2933,8,213,10,213,12,213,2936,9,213,1,214,
		1,214,1,214,1,214,1,214,3,214,2943,8,214,1,214,3,214,2946,8,214,1,215,
		1,215,1,216,1,216,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,
		2960,8,217,1,218,1,218,1,218,1,218,1,219,1,219,1,220,1,220,1,220,1,220,
		1,220,3,220,2973,8,220,1,220,3,220,2976,8,220,1,221,1,221,1,222,1,222,
		1,222,1,223,1,223,1,223,1,223,1,223,3,223,2988,8,223,1,224,3,224,2991,
		8,224,1,224,1,224,3,224,2995,8,224,1,224,1,224,3,224,2999,8,224,1,225,
		1,225,3,225,3003,8,225,1,225,1,225,3,225,3007,8,225,1,225,1,225,3,225,
		3011,8,225,1,226,1,226,1,227,1,227,1,228,1,228,1,228,1,228,3,228,3021,
		8,228,1,228,1,228,1,229,1,229,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
		1,230,1,230,1,230,1,230,1,230,3,230,3039,8,230,1,231,1,231,1,231,1,231,
		1,231,3,231,3046,8,231,1,231,1,231,1,231,3,231,3051,8,231,1,231,1,231,
		1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,
		3,232,3067,8,232,1,233,1,233,1,234,1,234,1,235,1,235,1,235,1,235,1,235,
		3,235,3078,8,235,1,235,1,235,1,235,1,235,3,235,3084,8,235,1,235,1,235,
		1,235,1,235,3,235,3090,8,235,1,235,1,235,1,235,1,235,1,235,1,235,3,235,
		3098,8,235,3,235,3100,8,235,1,236,1,236,3,236,3104,8,236,1,237,1,237,1,
		237,3,237,3109,8,237,1,237,1,237,1,238,1,238,1,239,1,239,1,240,1,240,1,
		241,1,241,1,242,1,242,1,242,3,242,3124,8,242,1,242,1,242,1,242,3,242,3129,
		8,242,1,242,1,242,1,243,1,243,1,243,3,243,3136,8,243,1,243,1,243,1,244,
		1,244,1,244,1,244,1,244,1,245,1,245,1,245,3,245,3148,8,245,1,246,1,246,
		1,246,1,246,1,246,3,246,3155,8,246,1,246,1,246,1,247,1,247,1,247,1,247,
		1,247,1,247,3,247,3165,8,247,1,248,1,248,1,249,1,249,1,249,1,249,1,249,
		1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,3,249,3183,8,249,
		1,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,5,250,3194,8,250,
		10,250,12,250,3197,9,250,1,250,1,250,1,250,1,250,1,251,3,251,3204,8,251,
		1,251,1,251,1,252,1,252,1,252,1,252,3,252,3212,8,252,1,253,1,253,1,253,
		1,253,5,253,3218,8,253,10,253,12,253,3221,9,253,1,254,1,254,1,254,1,254,
		3,254,3227,8,254,1,254,1,254,1,254,5,254,3232,8,254,10,254,12,254,3235,
		9,254,1,255,1,255,1,255,1,255,5,255,3241,8,255,10,255,12,255,3244,9,255,
		1,256,1,256,1,256,3,256,3249,8,256,1,256,1,256,1,257,3,257,3254,8,257,
		1,257,1,257,1,258,1,258,1,258,1,258,5,258,3262,8,258,10,258,12,258,3265,
		9,258,1,259,1,259,1,259,1,259,5,259,3271,8,259,10,259,12,259,3274,9,259,
		1,260,1,260,1,260,1,260,5,260,3280,8,260,10,260,12,260,3283,9,260,1,261,
		1,261,1,261,1,261,5,261,3289,8,261,10,261,12,261,3292,9,261,1,262,1,262,
		1,263,1,263,1,264,1,264,1,265,1,265,1,266,1,266,1,267,1,267,1,268,1,268,
		1,269,1,269,1,270,1,270,1,270,1,270,1,271,1,271,1,271,1,271,1,271,3,271,
		3319,8,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,
		1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,
		1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,3,271,3352,8,271,
		1,272,1,272,1,272,1,272,1,272,3,272,3359,8,272,1,273,1,273,1,273,1,274,
		1,274,1,274,1,274,1,275,1,275,1,276,1,276,3,276,3372,8,276,1,277,1,277,
		1,277,1,277,1,278,1,278,1,278,3,278,3381,8,278,1,279,1,279,1,279,1,279,
		1,279,1,279,1,280,1,280,5,280,3391,8,280,10,280,12,280,3394,9,280,1,280,
		1,280,5,280,3398,8,280,10,280,12,280,3401,9,280,5,280,3403,8,280,10,280,
		12,280,3406,9,280,1,280,1,280,5,280,3410,8,280,10,280,12,280,3413,9,280,
		3,280,3415,8,280,1,280,1,280,1,281,1,281,1,281,3,281,3422,8,281,1,281,
		1,281,1,281,1,281,1,281,1,282,1,282,1,282,3,282,3432,8,282,1,283,1,283,
		1,284,1,284,1,285,1,285,1,285,1,285,1,285,3,285,3443,8,285,1,286,1,286,
		3,286,3447,8,286,1,287,1,287,1,287,3,287,3452,8,287,1,288,1,288,5,288,
		3456,8,288,10,288,12,288,3459,9,288,1,288,1,288,1,289,1,289,1,289,3,289,
		3466,8,289,1,289,1,289,1,289,1,290,1,290,1,290,1,290,1,290,3,290,3476,
		8,290,1,291,1,291,3,291,3480,8,291,1,292,1,292,1,292,3,292,3485,8,292,
		1,293,1,293,1,293,1,293,1,294,5,294,3492,8,294,10,294,12,294,3495,9,294,
		1,295,1,295,1,295,1,295,1,296,1,296,1,296,3,296,3504,8,296,1,296,1,296,
		1,296,1,296,1,296,1,297,1,297,1,297,1,297,1,298,1,298,3,298,3517,8,298,
		1,299,1,299,1,299,3,299,3522,8,299,1,300,1,300,3,300,3526,8,300,1,300,
		1,300,1,300,1,301,1,301,1,301,3,301,3534,8,301,1,301,1,301,1,302,5,302,
		3539,8,302,10,302,12,302,3542,9,302,1,302,5,302,3545,8,302,10,302,12,302,
		3548,9,302,1,302,5,302,3551,8,302,10,302,12,302,3554,9,302,1,303,1,303,
		1,303,3,303,3559,8,303,1,304,1,304,1,304,1,304,1,305,1,305,1,305,3,305,
		3568,8,305,1,305,1,305,1,305,1,305,1,305,1,305,3,305,3576,8,305,1,305,
		1,305,3,305,3580,8,305,1,305,1,305,1,306,1,306,1,306,1,306,1,307,1,307,
		1,307,1,307,3,307,3592,8,307,1,307,3,307,3595,8,307,1,307,3,307,3598,8,
		307,1,308,1,308,1,309,1,309,1,309,1,309,1,310,1,310,1,310,3,310,3609,8,
		310,1,310,1,310,1,310,3,310,3614,8,310,1,310,3,310,3617,8,310,1,311,1,
		311,1,311,3,311,3622,8,311,1,312,1,312,1,312,1,312,1,313,1,313,3,313,3630,
		8,313,1,314,1,314,1,314,3,314,3635,8,314,1,314,1,314,1,314,3,314,3640,
		8,314,1,315,1,315,1,315,3,315,3645,8,315,1,315,1,315,3,315,3649,8,315,
		1,316,3,316,3652,8,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,3,316,
		3661,8,316,1,316,3,316,3664,8,316,1,316,1,316,1,316,1,316,1,316,1,316,
		3,316,3672,8,316,1,316,1,316,1,316,1,316,3,316,3678,8,316,1,317,1,317,
		1,318,1,318,1,318,1,318,3,318,3686,8,318,1,318,1,318,1,318,3,318,3691,
		8,318,1,318,1,318,1,319,1,319,1,319,1,319,1,319,1,319,1,319,3,319,3702,
		8,319,1,320,1,320,1,321,1,321,1,322,5,322,3709,8,322,10,322,12,322,3712,
		9,322,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,
		1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,
		1,323,1,323,1,323,3,323,3740,8,323,1,324,1,324,3,324,3744,8,324,1,325,
		1,325,1,326,1,326,3,326,3750,8,326,1,327,1,327,1,327,3,327,3755,8,327,
		1,328,1,328,3,328,3759,8,328,1,329,1,329,1,329,1,329,1,329,5,329,3766,
		8,329,10,329,12,329,3769,9,329,1,329,1,329,1,329,3,329,3774,8,329,1,329,
		1,329,1,330,1,330,1,330,3,330,3781,8,330,1,330,1,330,1,330,1,330,1,330,
		1,330,1,331,1,331,1,331,1,331,1,331,1,331,1,331,3,331,3796,8,331,1,332,
		1,332,3,332,3800,8,332,1,333,1,333,1,333,3,333,3805,8,333,1,334,1,334,
		1,334,1,334,1,334,1,334,1,335,1,335,1,335,1,335,5,335,3817,8,335,10,335,
		12,335,3820,9,335,1,335,1,335,1,336,1,336,1,336,3,336,3827,8,336,1,336,
		1,336,1,336,1,336,1,336,1,336,1,337,1,337,1,337,3,337,3838,8,337,1,338,
		1,338,1,338,3,338,3843,8,338,1,339,1,339,1,340,1,340,1,340,1,340,1,340,
		3,340,3852,8,340,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,
		1,341,3,341,3864,8,341,1,342,1,342,1,343,1,343,1,343,1,343,5,343,3872,
		8,343,10,343,12,343,3875,9,343,1,343,1,343,1,344,1,344,1,344,3,344,3882,
		8,344,1,344,1,344,1,344,1,344,1,344,1,344,3,344,3890,8,344,1,344,1,344,
		1,344,1,345,1,345,1,345,1,345,1,345,3,345,3900,8,345,1,345,1,345,1,345,
		1,345,1,345,3,345,3907,8,345,1,345,1,345,1,345,3,345,3912,8,345,3,345,
		3914,8,345,1,346,1,346,1,346,3,346,3919,8,346,1,347,1,347,1,347,1,347,
		5,347,3925,8,347,10,347,12,347,3928,9,347,1,347,1,347,1,348,1,348,1,348,
		3,348,3935,8,348,1,348,1,348,1,348,1,348,1,348,1,348,3,348,3943,8,348,
		1,348,1,348,1,348,1,349,1,349,1,349,1,349,1,349,1,349,3,349,3954,8,349,
		1,349,1,349,1,349,1,349,1,349,1,349,3,349,3962,8,349,1,349,1,349,1,349,
		3,349,3967,8,349,3,349,3969,8,349,1,350,1,350,1,350,3,350,3974,8,350,1,
		351,1,351,3,351,3978,8,351,1,352,1,352,1,352,1,352,1,353,1,353,1,353,1,
		353,1,353,1,353,3,353,3990,8,353,1,353,1,353,1,354,1,354,1,355,1,355,3,
		355,3998,8,355,1,355,1,355,1,355,1,355,3,355,4004,8,355,1,356,1,356,1,
		356,3,356,4009,8,356,1,356,1,356,1,356,1,356,3,356,4015,8,356,1,357,1,
		357,3,357,4019,8,357,1,358,1,358,1,358,1,359,1,359,1,359,1,359,1,359,1,
		359,3,359,4030,8,359,1,359,1,359,1,360,1,360,1,361,1,361,1,361,1,361,3,
		361,4040,8,361,1,361,3,361,4043,8,361,1,362,1,362,1,362,1,362,1,362,1,
		362,3,362,4051,8,362,1,363,1,363,1,363,1,363,1,363,1,363,3,363,4059,8,
		363,1,363,1,363,1,364,1,364,3,364,4065,8,364,1,365,1,365,1,365,1,365,3,
		365,4071,8,365,1,365,3,365,4074,8,365,1,366,1,366,1,366,1,366,1,366,1,
		366,3,366,4082,8,366,1,366,1,366,1,367,1,367,1,367,1,367,1,367,1,367,3,
		367,4092,8,367,1,367,1,367,1,368,1,368,1,369,1,369,1,369,1,369,1,369,1,
		369,3,369,4104,8,369,1,369,1,369,1,370,1,370,3,370,4110,8,370,1,371,1,
		371,1,371,1,371,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,3,372,
		4124,8,372,1,372,1,372,1,373,1,373,1,374,1,374,1,375,1,375,1,375,1,375,
		3,375,4136,8,375,1,376,1,376,1,376,1,376,1,376,3,376,4143,8,376,1,376,
		1,376,1,377,1,377,1,377,1,377,3,377,4151,8,377,1,378,1,378,1,378,1,378,
		1,378,3,378,4158,8,378,1,378,1,378,1,379,1,379,1,380,1,380,1,380,3,380,
		4167,8,380,1,381,1,381,1,382,1,382,1,383,1,383,1,383,1,383,1,383,1,384,
		1,384,3,384,4180,8,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,
		1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,
		1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,
		1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,
		1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,1,384,
		1,384,1,384,1,384,1,384,1,384,3,384,4243,8,384,1,385,1,385,1,386,1,386,
		1,387,1,387,1,387,1,387,1,387,1,388,1,388,3,388,4256,8,388,1,388,1,388,
		1,388,1,388,1,388,1,388,1,388,1,388,1,388,1,388,1,388,1,388,1,388,3,388,
		4271,8,388,1,389,1,389,1,389,1,389,1,389,3,389,4278,8,389,1,389,1,389,
		1,389,1,389,3,389,4284,8,389,3,389,4286,8,389,1,390,1,390,1,390,1,390,
		1,390,3,390,4293,8,390,1,391,1,391,1,391,1,391,3,391,4299,8,391,1,392,
		1,392,3,392,4303,8,392,1,392,1,392,1,392,3,392,4308,8,392,1,392,1,392,
		1,392,3,392,4313,8,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,
		1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,
		1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,
		1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,
		1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,3,392,
		4370,8,392,1,393,1,393,1,394,1,394,1,394,3,394,4377,8,394,1,395,1,395,
		3,395,4381,8,395,1,396,1,396,3,396,4385,8,396,1,397,1,397,1,397,1,397,
		1,397,1,397,1,398,1,398,3,398,4395,8,398,1,399,1,399,1,399,1,399,1,399,
		1,399,1,399,3,399,4404,8,399,1,400,1,400,1,400,1,400,1,400,1,400,1,400,
		1,400,1,400,1,400,3,400,4416,8,400,1,401,1,401,1,401,1,401,1,401,1,402,
		1,402,3,402,4425,8,402,1,402,1,402,1,402,1,402,1,402,1,402,1,402,1,402,
		1,402,1,402,1,402,1,402,1,402,1,402,1,402,1,402,1,402,1,402,1,402,3,402,
		4446,8,402,1,403,1,403,1,403,1,403,1,403,1,403,1,403,3,403,4455,8,403,
		1,404,1,404,1,404,1,404,1,404,1,404,1,404,3,404,4464,8,404,1,405,1,405,
		1,405,1,405,1,405,1,405,1,405,3,405,4473,8,405,1,406,1,406,3,406,4477,
		8,406,1,406,1,406,1,406,1,406,1,406,1,406,1,406,1,406,1,406,1,406,3,406,
		4489,8,406,1,407,1,407,1,407,1,407,1,407,1,407,1,407,3,407,4498,8,407,
		1,408,1,408,3,408,4502,8,408,1,408,1,408,1,408,1,408,1,408,1,408,1,408,
		1,408,1,408,1,408,3,408,4514,8,408,1,409,1,409,1,409,1,409,1,409,1,409,
		1,409,1,409,1,409,1,409,1,409,1,409,1,409,3,409,4529,8,409,1,410,1,410,
		3,410,4533,8,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,
		1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,
		1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,
		1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,
		1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,
		1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,
		1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,
		1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,
		1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,1,410,
		1,410,1,410,1,410,1,410,3,410,4644,8,410,1,411,1,411,1,411,1,412,1,412,
		3,412,4651,8,412,1,412,1,412,1,412,1,412,1,412,3,412,4658,8,412,1,412,
		1,412,1,412,3,412,4663,8,412,1,413,1,413,3,413,4667,8,413,1,413,5,413,
		4670,8,413,10,413,12,413,4673,9,413,1,414,3,414,4676,8,414,1,414,1,414,
		1,414,1,414,3,414,4682,8,414,1,414,1,414,1,414,1,414,3,414,4688,8,414,
		1,415,1,415,1,415,1,415,1,415,1,416,1,416,1,417,1,417,1,417,1,417,3,417,
		4701,8,417,1,417,1,417,1,417,1,417,3,417,4707,8,417,1,417,1,417,1,417,
		1,417,3,417,4713,8,417,1,417,1,417,1,417,1,417,3,417,4719,8,417,1,417,
		1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,3,417,4732,
		8,417,1,417,1,417,1,417,1,417,1,417,1,417,3,417,4740,8,417,1,417,1,417,
		1,417,1,417,1,417,1,417,3,417,4748,8,417,1,417,1,417,1,417,1,417,1,417,
		1,417,3,417,4756,8,417,1,417,1,417,1,417,1,417,1,417,1,417,3,417,4764,
		8,417,3,417,4766,8,417,1,417,1,417,1,417,1,417,3,417,4772,8,417,1,417,
		1,417,1,417,1,417,1,417,1,417,1,417,1,417,3,417,4782,8,417,1,417,1,417,
		1,417,1,417,3,417,4788,8,417,3,417,4790,8,417,1,418,1,418,1,419,1,419,
		1,420,1,420,1,421,1,421,1,422,1,422,1,423,1,423,1,423,1,423,1,423,1,423,
		1,423,1,423,1,423,1,423,1,423,3,423,4813,8,423,1,423,3,423,4816,8,423,
		1,424,1,424,1,425,1,425,1,425,1,425,1,425,1,425,1,425,1,425,1,425,3,425,
		4829,8,425,1,426,1,426,1,427,1,427,1,428,1,428,1,429,1,429,1,430,1,430,
		1,431,1,431,1,432,1,432,1,433,1,433,1,433,1,434,1,434,1,434,3,434,4851,
		8,434,3,434,4853,8,434,1,435,1,435,1,435,1,436,1,436,1,436,3,436,4861,
		8,436,3,436,4863,8,436,1,437,1,437,1,437,3,437,4868,8,437,1,437,3,437,
		4871,8,437,1,437,1,437,1,437,3,437,4876,8,437,1,437,1,437,1,437,3,437,
		4881,8,437,1,437,3,437,4884,8,437,1,437,1,437,1,437,1,437,1,437,3,437,
		4891,8,437,3,437,4893,8,437,1,438,1,438,1,439,1,439,1,439,1,439,1,439,
		1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,3,439,4911,8,439,
		1,440,1,440,1,440,3,440,4916,8,440,1,441,1,441,1,442,1,442,3,442,4922,
		8,442,1,443,1,443,3,443,4926,8,443,1,444,1,444,1,444,1,444,1,444,1,444,
		1,445,1,445,1,445,3,445,4937,8,445,1,446,1,446,1,446,3,446,4942,8,446,
		3,446,4944,8,446,1,447,1,447,1,447,3,447,4949,8,447,1,448,1,448,1,448,
		1,448,3,448,4955,8,448,3,448,4957,8,448,1,449,1,449,5,449,4961,8,449,10,
		449,12,449,4964,9,449,1,449,1,449,1,450,1,450,3,450,4970,8,450,1,451,1,
		451,3,451,4974,8,451,1,451,1,451,3,451,4978,8,451,1,452,1,452,1,452,3,
		452,4983,8,452,1,453,1,453,3,453,4987,8,453,1,453,1,453,1,453,1,453,3,
		453,4993,8,453,1,453,1,453,3,453,4997,8,453,1,454,3,454,5000,8,454,1,454,
		1,454,3,454,5004,8,454,1,454,1,454,1,455,1,455,1,456,1,456,1,456,1,456,
		1,456,1,456,1,456,1,456,1,456,1,456,1,456,3,456,5021,8,456,1,457,1,457,
		1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,
		1,457,1,457,3,457,5039,8,457,1,458,1,458,1,458,3,458,5044,8,458,1,458,
		1,458,1,458,1,458,1,458,1,459,1,459,3,459,5053,8,459,1,459,1,459,1,460,
		1,460,1,460,3,460,5060,8,460,1,460,1,460,1,460,5,460,5065,8,460,10,460,
		12,460,5068,9,460,1,460,3,460,5071,8,460,1,460,1,460,1,461,1,461,3,461,
		5077,8,461,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,
		1,462,3,462,5090,8,462,1,463,1,463,1,463,3,463,5095,8,463,1,464,1,464,
		1,465,1,465,3,465,5101,8,465,1,466,1,466,1,467,1,467,3,467,5107,8,467,
		1,467,1,467,1,468,1,468,1,468,3,468,5114,8,468,1,468,1,468,1,469,1,469,
		1,469,1,469,3,469,5122,8,469,1,469,3,469,5125,8,469,1,470,1,470,1,470,
		1,470,1,470,1,470,3,470,5133,8,470,1,471,1,471,1,471,3,471,5138,8,471,
		1,471,1,471,1,472,1,472,1,472,1,472,1,472,1,472,3,472,5148,8,472,1,473,
		1,473,1,473,1,474,1,474,1,474,1,474,1,474,1,474,1,474,1,474,1,474,5,474,
		5162,8,474,10,474,12,474,5165,9,474,1,474,1,474,1,474,1,474,1,475,1,475,
		3,475,5173,8,475,1,476,1,476,3,476,5177,8,476,1,477,1,477,5,477,5181,8,
		477,10,477,12,477,5184,9,477,1,478,1,478,1,478,1,478,1,478,1,478,1,478,
		1,478,3,478,5194,8,478,1,479,1,479,1,480,3,480,5199,8,480,1,480,1,480,
		1,480,1,480,3,480,5205,8,480,1,480,1,480,3,480,5209,8,480,1,481,1,481,
		1,482,1,482,1,482,1,482,1,482,1,482,3,482,5219,8,482,1,482,1,482,1,482,
		1,482,1,482,3,482,5226,8,482,3,482,5228,8,482,1,483,1,483,1,483,3,483,
		5233,8,483,3,483,5235,8,483,1,484,3,484,5238,8,484,1,484,1,484,1,484,1,
		484,3,484,5244,8,484,1,484,1,484,3,484,5248,8,484,3,484,5250,8,484,1,485,
		1,485,3,485,5254,8,485,1,486,1,486,1,486,3,486,5259,8,486,3,486,5261,8,
		486,1,487,1,487,1,487,1,487,1,488,1,488,1,488,3,488,5270,8,488,3,488,5272,
		8,488,1,489,1,489,1,489,1,489,3,489,5278,8,489,1,489,1,489,3,489,5282,
		8,489,3,489,5284,8,489,1,490,1,490,3,490,5288,8,490,1,491,1,491,1,492,
		1,492,1,492,3,492,5295,8,492,1,492,1,492,1,492,1,492,1,493,1,493,1,493,
		5,493,5304,8,493,10,493,12,493,5307,9,493,1,494,1,494,1,494,5,494,5312,
		8,494,10,494,12,494,5315,9,494,1,495,1,495,1,495,5,495,5320,8,495,10,495,
		12,495,5323,9,495,1,496,1,496,1,496,5,496,5328,8,496,10,496,12,496,5331,
		9,496,1,497,1,497,1,497,5,497,5336,8,497,10,497,12,497,5339,9,497,1,498,
		1,498,1,498,5,498,5344,8,498,10,498,12,498,5347,9,498,1,499,1,499,1,499,
		5,499,5352,8,499,10,499,12,499,5355,9,499,1,500,1,500,1,500,5,500,5360,
		8,500,10,500,12,500,5363,9,500,1,501,1,501,1,501,5,501,5368,8,501,10,501,
		12,501,5371,9,501,1,502,1,502,1,502,5,502,5376,8,502,10,502,12,502,5379,
		9,502,1,503,1,503,1,503,5,503,5384,8,503,10,503,12,503,5387,9,503,1,504,
		1,504,1,504,5,504,5392,8,504,10,504,12,504,5395,9,504,1,505,1,505,1,505,
		5,505,5400,8,505,10,505,12,505,5403,9,505,1,506,1,506,1,506,5,506,5408,
		8,506,10,506,12,506,5411,9,506,1,507,1,507,1,507,5,507,5416,8,507,10,507,
		12,507,5419,9,507,1,508,1,508,1,508,5,508,5424,8,508,10,508,12,508,5427,
		9,508,1,509,1,509,1,509,5,509,5432,8,509,10,509,12,509,5435,9,509,1,510,
		1,510,1,510,5,510,5440,8,510,10,510,12,510,5443,9,510,1,511,1,511,1,511,
		5,511,5448,8,511,10,511,12,511,5451,9,511,1,512,1,512,1,512,5,512,5456,
		8,512,10,512,12,512,5459,9,512,1,513,1,513,1,513,5,513,5464,8,513,10,513,
		12,513,5467,9,513,1,514,1,514,1,514,5,514,5472,8,514,10,514,12,514,5475,
		9,514,1,515,1,515,1,515,5,515,5480,8,515,10,515,12,515,5483,9,515,1,516,
		1,516,1,516,5,516,5488,8,516,10,516,12,516,5491,9,516,1,517,1,517,1,517,
		5,517,5496,8,517,10,517,12,517,5499,9,517,1,518,1,518,1,518,5,518,5504,
		8,518,10,518,12,518,5507,9,518,1,519,1,519,1,519,5,519,5512,8,519,10,519,
		12,519,5515,9,519,1,520,1,520,1,520,5,520,5520,8,520,10,520,12,520,5523,
		9,520,1,521,1,521,1,521,5,521,5528,8,521,10,521,12,521,5531,9,521,1,522,
		1,522,1,522,5,522,5536,8,522,10,522,12,522,5539,9,522,1,523,1,523,1,523,
		5,523,5544,8,523,10,523,12,523,5547,9,523,1,524,1,524,1,524,5,524,5552,
		8,524,10,524,12,524,5555,9,524,1,525,1,525,1,525,5,525,5560,8,525,10,525,
		12,525,5563,9,525,1,526,1,526,1,526,5,526,5568,8,526,10,526,12,526,5571,
		9,526,1,527,1,527,1,527,5,527,5576,8,527,10,527,12,527,5579,9,527,1,528,
		1,528,1,528,5,528,5584,8,528,10,528,12,528,5587,9,528,1,529,1,529,1,529,
		5,529,5592,8,529,10,529,12,529,5595,9,529,1,530,1,530,1,530,5,530,5600,
		8,530,10,530,12,530,5603,9,530,1,531,1,531,1,531,5,531,5608,8,531,10,531,
		12,531,5611,9,531,1,532,1,532,1,532,5,532,5616,8,532,10,532,12,532,5619,
		9,532,1,533,1,533,1,533,5,533,5624,8,533,10,533,12,533,5627,9,533,1,534,
		1,534,1,534,5,534,5632,8,534,10,534,12,534,5635,9,534,1,535,1,535,1,535,
		5,535,5640,8,535,10,535,12,535,5643,9,535,1,536,1,536,1,536,5,536,5648,
		8,536,10,536,12,536,5651,9,536,1,537,1,537,1,537,5,537,5656,8,537,10,537,
		12,537,5659,9,537,1,538,1,538,1,538,5,538,5664,8,538,10,538,12,538,5667,
		9,538,1,539,1,539,1,539,5,539,5672,8,539,10,539,12,539,5675,9,539,1,540,
		1,540,1,540,5,540,5680,8,540,10,540,12,540,5683,9,540,1,541,1,541,1,541,
		5,541,5688,8,541,10,541,12,541,5691,9,541,1,542,1,542,1,542,5,542,5696,
		8,542,10,542,12,542,5699,9,542,1,543,1,543,1,543,5,543,5704,8,543,10,543,
		12,543,5707,9,543,1,544,1,544,1,544,5,544,5712,8,544,10,544,12,544,5715,
		9,544,1,545,1,545,1,545,5,545,5720,8,545,10,545,12,545,5723,9,545,1,546,
		1,546,1,546,5,546,5728,8,546,10,546,12,546,5731,9,546,1,547,1,547,1,547,
		5,547,5736,8,547,10,547,12,547,5739,9,547,1,548,1,548,1,548,5,548,5744,
		8,548,10,548,12,548,5747,9,548,1,549,1,549,1,549,5,549,5752,8,549,10,549,
		12,549,5755,9,549,1,550,1,550,1,550,5,550,5760,8,550,10,550,12,550,5763,
		9,550,1,551,1,551,1,551,5,551,5768,8,551,10,551,12,551,5771,9,551,1,552,
		1,552,1,552,5,552,5776,8,552,10,552,12,552,5779,9,552,1,553,1,553,1,553,
		5,553,5784,8,553,10,553,12,553,5787,9,553,1,554,1,554,1,554,5,554,5792,
		8,554,10,554,12,554,5795,9,554,1,555,1,555,1,555,5,555,5800,8,555,10,555,
		12,555,5803,9,555,1,556,1,556,1,556,5,556,5808,8,556,10,556,12,556,5811,
		9,556,1,557,1,557,1,557,5,557,5816,8,557,10,557,12,557,5819,9,557,1,558,
		1,558,1,558,5,558,5824,8,558,10,558,12,558,5827,9,558,1,559,1,559,1,559,
		5,559,5832,8,559,10,559,12,559,5835,9,559,1,560,1,560,1,560,5,560,5840,
		8,560,10,560,12,560,5843,9,560,1,561,1,561,1,561,5,561,5848,8,561,10,561,
		12,561,5851,9,561,1,562,1,562,1,562,5,562,5856,8,562,10,562,12,562,5859,
		9,562,1,563,1,563,1,563,5,563,5864,8,563,10,563,12,563,5867,9,563,1,564,
		1,564,1,564,5,564,5872,8,564,10,564,12,564,5875,9,564,1,565,1,565,1,565,
		5,565,5880,8,565,10,565,12,565,5883,9,565,1,566,1,566,1,566,5,566,5888,
		8,566,10,566,12,566,5891,9,566,1,567,1,567,1,567,5,567,5896,8,567,10,567,
		12,567,5899,9,567,1,568,1,568,1,568,5,568,5904,8,568,10,568,12,568,5907,
		9,568,1,569,1,569,1,569,5,569,5912,8,569,10,569,12,569,5915,9,569,1,570,
		1,570,1,570,5,570,5920,8,570,10,570,12,570,5923,9,570,1,571,1,571,1,571,
		5,571,5928,8,571,10,571,12,571,5931,9,571,1,572,1,572,1,572,5,572,5936,
		8,572,10,572,12,572,5939,9,572,1,573,1,573,1,573,5,573,5944,8,573,10,573,
		12,573,5947,9,573,1,574,1,574,1,574,5,574,5952,8,574,10,574,12,574,5955,
		9,574,1,575,1,575,1,575,5,575,5960,8,575,10,575,12,575,5963,9,575,1,576,
		1,576,1,576,5,576,5968,8,576,10,576,12,576,5971,9,576,1,577,1,577,1,578,
		1,578,1,579,1,579,1,580,1,580,1,581,1,581,1,582,1,582,1,583,1,583,1,584,
		1,584,1,585,1,585,1,586,1,586,1,587,1,587,1,588,1,588,1,589,1,589,1,590,
		1,590,1,591,1,591,1,592,1,592,1,593,1,593,1,594,1,594,1,595,1,595,1,596,
		1,596,1,597,1,597,1,598,1,598,1,599,1,599,1,600,1,600,1,601,1,601,1,602,
		1,602,1,603,1,603,1,604,1,604,1,605,1,605,1,606,1,606,1,607,1,607,1,608,
		1,608,1,609,1,609,1,610,1,610,1,611,1,611,1,612,1,612,1,613,1,613,1,614,
		1,614,1,615,1,615,1,616,1,616,1,617,1,617,1,618,1,618,1,619,1,619,1,620,
		1,620,1,621,1,621,1,622,1,622,1,623,1,623,1,624,1,624,1,625,1,625,1,626,
		1,626,1,627,1,627,1,628,1,628,1,629,1,629,1,630,1,630,1,631,1,631,1,632,
		1,632,1,633,1,633,1,634,1,634,1,635,1,635,1,636,1,636,1,637,1,637,1,638,
		1,638,1,639,1,639,1,640,1,640,1,641,1,641,1,642,1,642,1,643,1,643,1,644,
		1,644,1,645,1,645,1,646,1,646,1,647,1,647,1,648,1,648,1,649,1,649,1,650,
		1,650,1,650,0,2,406,408,651,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
		32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
		80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
		156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
		192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
		228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
		264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
		300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,
		336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,
		372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,
		408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,
		444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,
		480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,
		516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,
		552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,
		588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,
		624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,
		660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,
		696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,
		732,734,736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,
		768,770,772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,802,
		804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,
		840,842,844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,874,
		876,878,880,882,884,886,888,890,892,894,896,898,900,902,904,906,908,910,
		912,914,916,918,920,922,924,926,928,930,932,934,936,938,940,942,944,946,
		948,950,952,954,956,958,960,962,964,966,968,970,972,974,976,978,980,982,
		984,986,988,990,992,994,996,998,1000,1002,1004,1006,1008,1010,1012,1014,
		1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,
		1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,1066,1068,1070,
		1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,1092,1094,1096,1098,
		1100,1102,1104,1106,1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,
		1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,
		1156,1158,1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,
		1184,1186,1188,1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,
		1212,1214,1216,1218,1220,1222,1224,1226,1228,1230,1232,1234,1236,1238,
		1240,1242,1244,1246,1248,1250,1252,1254,1256,1258,1260,1262,1264,1266,
		1268,1270,1272,1274,1276,1278,1280,1282,1284,1286,1288,1290,1292,1294,
		1296,1298,1300,0,18,17,0,6,7,9,9,13,17,19,20,22,22,45,49,51,51,53,70,72,
		72,74,74,76,77,83,85,88,89,94,127,129,227,231,238,247,247,2,0,12,12,24,
		24,1,0,25,26,1,0,28,39,1,0,43,44,1,0,253,254,2,0,57,57,59,59,1,0,241,243,
		2,0,95,95,104,104,1,0,114,116,2,0,66,66,68,68,3,0,12,12,25,25,41,44,1,
		0,275,276,1,0,264,265,1,0,266,268,1,0,269,274,1,0,277,279,1,0,19,20,6400,
		0,1302,1,0,0,0,2,1304,1,0,0,0,4,1316,1,0,0,0,6,1319,1,0,0,0,8,1334,1,0,
		0,0,10,1336,1,0,0,0,12,1348,1,0,0,0,14,1360,1,0,0,0,16,1369,1,0,0,0,18,
		1378,1,0,0,0,20,1387,1,0,0,0,22,1408,1,0,0,0,24,1417,1,0,0,0,26,1424,1,
		0,0,0,28,1435,1,0,0,0,30,1437,1,0,0,0,32,1448,1,0,0,0,34,1450,1,0,0,0,
		36,1459,1,0,0,0,38,1461,1,0,0,0,40,1471,1,0,0,0,42,1473,1,0,0,0,44,1505,
		1,0,0,0,46,1519,1,0,0,0,48,1560,1,0,0,0,50,1562,1,0,0,0,52,1564,1,0,0,
		0,54,1568,1,0,0,0,56,1576,1,0,0,0,58,1578,1,0,0,0,60,1580,1,0,0,0,62,1591,
		1,0,0,0,64,1593,1,0,0,0,66,1595,1,0,0,0,68,1597,1,0,0,0,70,1599,1,0,0,
		0,72,1601,1,0,0,0,74,1603,1,0,0,0,76,1605,1,0,0,0,78,1607,1,0,0,0,80,1609,
		1,0,0,0,82,1614,1,0,0,0,84,1616,1,0,0,0,86,1618,1,0,0,0,88,1620,1,0,0,
		0,90,1622,1,0,0,0,92,1627,1,0,0,0,94,1633,1,0,0,0,96,1679,1,0,0,0,98,1700,
		1,0,0,0,100,1702,1,0,0,0,102,1706,1,0,0,0,104,1715,1,0,0,0,106,1719,1,
		0,0,0,108,1726,1,0,0,0,110,1729,1,0,0,0,112,1733,1,0,0,0,114,1735,1,0,
		0,0,116,1738,1,0,0,0,118,1759,1,0,0,0,120,1768,1,0,0,0,122,1770,1,0,0,
		0,124,1772,1,0,0,0,126,1774,1,0,0,0,128,1783,1,0,0,0,130,1788,1,0,0,0,
		132,1823,1,0,0,0,134,1838,1,0,0,0,136,1845,1,0,0,0,138,1859,1,0,0,0,140,
		1871,1,0,0,0,142,1873,1,0,0,0,144,1894,1,0,0,0,146,1920,1,0,0,0,148,1924,
		1,0,0,0,150,1926,1,0,0,0,152,1931,1,0,0,0,154,1933,1,0,0,0,156,1939,1,
		0,0,0,158,1944,1,0,0,0,160,1949,1,0,0,0,162,1954,1,0,0,0,164,1956,1,0,
		0,0,166,1980,1,0,0,0,168,1982,1,0,0,0,170,2004,1,0,0,0,172,2006,1,0,0,
		0,174,2027,1,0,0,0,176,2035,1,0,0,0,178,2037,1,0,0,0,180,2039,1,0,0,0,
		182,2041,1,0,0,0,184,2051,1,0,0,0,186,2056,1,0,0,0,188,2076,1,0,0,0,190,
		2078,1,0,0,0,192,2083,1,0,0,0,194,2104,1,0,0,0,196,2106,1,0,0,0,198,2112,
		1,0,0,0,200,2122,1,0,0,0,202,2126,1,0,0,0,204,2136,1,0,0,0,206,2143,1,
		0,0,0,208,2145,1,0,0,0,210,2155,1,0,0,0,212,2165,1,0,0,0,214,2171,1,0,
		0,0,216,2176,1,0,0,0,218,2179,1,0,0,0,220,2181,1,0,0,0,222,2186,1,0,0,
		0,224,2196,1,0,0,0,226,2207,1,0,0,0,228,2213,1,0,0,0,230,2219,1,0,0,0,
		232,2221,1,0,0,0,234,2226,1,0,0,0,236,2236,1,0,0,0,238,2247,1,0,0,0,240,
		2249,1,0,0,0,242,2251,1,0,0,0,244,2255,1,0,0,0,246,2257,1,0,0,0,248,2266,
		1,0,0,0,250,2277,1,0,0,0,252,2279,1,0,0,0,254,2323,1,0,0,0,256,2350,1,
		0,0,0,258,2352,1,0,0,0,260,2360,1,0,0,0,262,2362,1,0,0,0,264,2364,1,0,
		0,0,266,2366,1,0,0,0,268,2379,1,0,0,0,270,2381,1,0,0,0,272,2393,1,0,0,
		0,274,2403,1,0,0,0,276,2405,1,0,0,0,278,2416,1,0,0,0,280,2421,1,0,0,0,
		282,2425,1,0,0,0,284,2427,1,0,0,0,286,2443,1,0,0,0,288,2445,1,0,0,0,290,
		2448,1,0,0,0,292,2452,1,0,0,0,294,2455,1,0,0,0,296,2460,1,0,0,0,298,2464,
		1,0,0,0,300,2468,1,0,0,0,302,2470,1,0,0,0,304,2474,1,0,0,0,306,2476,1,
		0,0,0,308,2478,1,0,0,0,310,2483,1,0,0,0,312,2492,1,0,0,0,314,2494,1,0,
		0,0,316,2500,1,0,0,0,318,2513,1,0,0,0,320,2519,1,0,0,0,322,2530,1,0,0,
		0,324,2532,1,0,0,0,326,2538,1,0,0,0,328,2543,1,0,0,0,330,2549,1,0,0,0,
		332,2560,1,0,0,0,334,2567,1,0,0,0,336,2569,1,0,0,0,338,2591,1,0,0,0,340,
		2593,1,0,0,0,342,2598,1,0,0,0,344,2604,1,0,0,0,346,2615,1,0,0,0,348,2617,
		1,0,0,0,350,2619,1,0,0,0,352,2621,1,0,0,0,354,2640,1,0,0,0,356,2649,1,
		0,0,0,358,2655,1,0,0,0,360,2660,1,0,0,0,362,2664,1,0,0,0,364,2678,1,0,
		0,0,366,2680,1,0,0,0,368,2686,1,0,0,0,370,2699,1,0,0,0,372,2701,1,0,0,
		0,374,2703,1,0,0,0,376,2709,1,0,0,0,378,2722,1,0,0,0,380,2728,1,0,0,0,
		382,2745,1,0,0,0,384,2747,1,0,0,0,386,2752,1,0,0,0,388,2754,1,0,0,0,390,
		2774,1,0,0,0,392,2776,1,0,0,0,394,2794,1,0,0,0,396,2796,1,0,0,0,398,2799,
		1,0,0,0,400,2808,1,0,0,0,402,2810,1,0,0,0,404,2833,1,0,0,0,406,2853,1,
		0,0,0,408,2884,1,0,0,0,410,2900,1,0,0,0,412,2902,1,0,0,0,414,2904,1,0,
		0,0,416,2906,1,0,0,0,418,2908,1,0,0,0,420,2910,1,0,0,0,422,2920,1,0,0,
		0,424,2923,1,0,0,0,426,2929,1,0,0,0,428,2937,1,0,0,0,430,2947,1,0,0,0,
		432,2949,1,0,0,0,434,2959,1,0,0,0,436,2961,1,0,0,0,438,2965,1,0,0,0,440,
		2975,1,0,0,0,442,2977,1,0,0,0,444,2979,1,0,0,0,446,2987,1,0,0,0,448,2990,
		1,0,0,0,450,3000,1,0,0,0,452,3012,1,0,0,0,454,3014,1,0,0,0,456,3016,1,
		0,0,0,458,3024,1,0,0,0,460,3038,1,0,0,0,462,3040,1,0,0,0,464,3066,1,0,
		0,0,466,3068,1,0,0,0,468,3070,1,0,0,0,470,3099,1,0,0,0,472,3103,1,0,0,
		0,474,3108,1,0,0,0,476,3112,1,0,0,0,478,3114,1,0,0,0,480,3116,1,0,0,0,
		482,3118,1,0,0,0,484,3123,1,0,0,0,486,3135,1,0,0,0,488,3139,1,0,0,0,490,
		3147,1,0,0,0,492,3149,1,0,0,0,494,3164,1,0,0,0,496,3166,1,0,0,0,498,3182,
		1,0,0,0,500,3184,1,0,0,0,502,3203,1,0,0,0,504,3207,1,0,0,0,506,3213,1,
		0,0,0,508,3226,1,0,0,0,510,3236,1,0,0,0,512,3248,1,0,0,0,514,3253,1,0,
		0,0,516,3257,1,0,0,0,518,3266,1,0,0,0,520,3275,1,0,0,0,522,3284,1,0,0,
		0,524,3293,1,0,0,0,526,3295,1,0,0,0,528,3297,1,0,0,0,530,3299,1,0,0,0,
		532,3301,1,0,0,0,534,3303,1,0,0,0,536,3305,1,0,0,0,538,3307,1,0,0,0,540,
		3309,1,0,0,0,542,3351,1,0,0,0,544,3358,1,0,0,0,546,3360,1,0,0,0,548,3363,
		1,0,0,0,550,3367,1,0,0,0,552,3371,1,0,0,0,554,3373,1,0,0,0,556,3380,1,
		0,0,0,558,3382,1,0,0,0,560,3388,1,0,0,0,562,3421,1,0,0,0,564,3431,1,0,
		0,0,566,3433,1,0,0,0,568,3435,1,0,0,0,570,3437,1,0,0,0,572,3444,1,0,0,
		0,574,3448,1,0,0,0,576,3453,1,0,0,0,578,3465,1,0,0,0,580,3475,1,0,0,0,
		582,3479,1,0,0,0,584,3481,1,0,0,0,586,3486,1,0,0,0,588,3493,1,0,0,0,590,
		3496,1,0,0,0,592,3503,1,0,0,0,594,3510,1,0,0,0,596,3516,1,0,0,0,598,3518,
		1,0,0,0,600,3523,1,0,0,0,602,3533,1,0,0,0,604,3540,1,0,0,0,606,3555,1,
		0,0,0,608,3560,1,0,0,0,610,3567,1,0,0,0,612,3583,1,0,0,0,614,3587,1,0,
		0,0,616,3599,1,0,0,0,618,3601,1,0,0,0,620,3608,1,0,0,0,622,3618,1,0,0,
		0,624,3623,1,0,0,0,626,3629,1,0,0,0,628,3634,1,0,0,0,630,3644,1,0,0,0,
		632,3677,1,0,0,0,634,3679,1,0,0,0,636,3681,1,0,0,0,638,3694,1,0,0,0,640,
		3703,1,0,0,0,642,3705,1,0,0,0,644,3710,1,0,0,0,646,3739,1,0,0,0,648,3743,
		1,0,0,0,650,3745,1,0,0,0,652,3749,1,0,0,0,654,3751,1,0,0,0,656,3756,1,
		0,0,0,658,3760,1,0,0,0,660,3780,1,0,0,0,662,3788,1,0,0,0,664,3797,1,0,
		0,0,666,3801,1,0,0,0,668,3806,1,0,0,0,670,3812,1,0,0,0,672,3826,1,0,0,
		0,674,3834,1,0,0,0,676,3839,1,0,0,0,678,3844,1,0,0,0,680,3851,1,0,0,0,
		682,3863,1,0,0,0,684,3865,1,0,0,0,686,3867,1,0,0,0,688,3881,1,0,0,0,690,
		3913,1,0,0,0,692,3915,1,0,0,0,694,3920,1,0,0,0,696,3934,1,0,0,0,698,3968,
		1,0,0,0,700,3970,1,0,0,0,702,3975,1,0,0,0,704,3979,1,0,0,0,706,3983,1,
		0,0,0,708,3993,1,0,0,0,710,3995,1,0,0,0,712,4005,1,0,0,0,714,4018,1,0,
		0,0,716,4020,1,0,0,0,718,4023,1,0,0,0,720,4033,1,0,0,0,722,4035,1,0,0,
		0,724,4050,1,0,0,0,726,4052,1,0,0,0,728,4064,1,0,0,0,730,4066,1,0,0,0,
		732,4075,1,0,0,0,734,4085,1,0,0,0,736,4095,1,0,0,0,738,4097,1,0,0,0,740,
		4109,1,0,0,0,742,4111,1,0,0,0,744,4115,1,0,0,0,746,4127,1,0,0,0,748,4129,
		1,0,0,0,750,4135,1,0,0,0,752,4137,1,0,0,0,754,4150,1,0,0,0,756,4152,1,
		0,0,0,758,4161,1,0,0,0,760,4166,1,0,0,0,762,4168,1,0,0,0,764,4170,1,0,
		0,0,766,4172,1,0,0,0,768,4242,1,0,0,0,770,4244,1,0,0,0,772,4246,1,0,0,
		0,774,4248,1,0,0,0,776,4270,1,0,0,0,778,4285,1,0,0,0,780,4287,1,0,0,0,
		782,4294,1,0,0,0,784,4369,1,0,0,0,786,4371,1,0,0,0,788,4376,1,0,0,0,790,
		4380,1,0,0,0,792,4384,1,0,0,0,794,4386,1,0,0,0,796,4394,1,0,0,0,798,4396,
		1,0,0,0,800,4415,1,0,0,0,802,4417,1,0,0,0,804,4445,1,0,0,0,806,4454,1,
		0,0,0,808,4463,1,0,0,0,810,4472,1,0,0,0,812,4488,1,0,0,0,814,4497,1,0,
		0,0,816,4513,1,0,0,0,818,4528,1,0,0,0,820,4643,1,0,0,0,822,4645,1,0,0,
		0,824,4662,1,0,0,0,826,4664,1,0,0,0,828,4687,1,0,0,0,830,4689,1,0,0,0,
		832,4694,1,0,0,0,834,4789,1,0,0,0,836,4791,1,0,0,0,838,4793,1,0,0,0,840,
		4795,1,0,0,0,842,4797,1,0,0,0,844,4799,1,0,0,0,846,4815,1,0,0,0,848,4817,
		1,0,0,0,850,4828,1,0,0,0,852,4830,1,0,0,0,854,4832,1,0,0,0,856,4834,1,
		0,0,0,858,4836,1,0,0,0,860,4838,1,0,0,0,862,4840,1,0,0,0,864,4842,1,0,
		0,0,866,4844,1,0,0,0,868,4847,1,0,0,0,870,4854,1,0,0,0,872,4857,1,0,0,
		0,874,4892,1,0,0,0,876,4894,1,0,0,0,878,4910,1,0,0,0,880,4915,1,0,0,0,
		882,4917,1,0,0,0,884,4921,1,0,0,0,886,4925,1,0,0,0,888,4927,1,0,0,0,890,
		4933,1,0,0,0,892,4938,1,0,0,0,894,4945,1,0,0,0,896,4950,1,0,0,0,898,4958,
		1,0,0,0,900,4969,1,0,0,0,902,4977,1,0,0,0,904,4979,1,0,0,0,906,4996,1,
		0,0,0,908,4999,1,0,0,0,910,5007,1,0,0,0,912,5020,1,0,0,0,914,5038,1,0,
		0,0,916,5040,1,0,0,0,918,5050,1,0,0,0,920,5056,1,0,0,0,922,5076,1,0,0,
		0,924,5089,1,0,0,0,926,5091,1,0,0,0,928,5096,1,0,0,0,930,5100,1,0,0,0,
		932,5102,1,0,0,0,934,5104,1,0,0,0,936,5110,1,0,0,0,938,5117,1,0,0,0,940,
		5132,1,0,0,0,942,5137,1,0,0,0,944,5147,1,0,0,0,946,5149,1,0,0,0,948,5152,
		1,0,0,0,950,5172,1,0,0,0,952,5176,1,0,0,0,954,5178,1,0,0,0,956,5193,1,
		0,0,0,958,5195,1,0,0,0,960,5198,1,0,0,0,962,5210,1,0,0,0,964,5227,1,0,
		0,0,966,5229,1,0,0,0,968,5237,1,0,0,0,970,5253,1,0,0,0,972,5255,1,0,0,
		0,974,5262,1,0,0,0,976,5266,1,0,0,0,978,5273,1,0,0,0,980,5285,1,0,0,0,
		982,5289,1,0,0,0,984,5291,1,0,0,0,986,5300,1,0,0,0,988,5308,1,0,0,0,990,
		5316,1,0,0,0,992,5324,1,0,0,0,994,5332,1,0,0,0,996,5340,1,0,0,0,998,5348,
		1,0,0,0,1000,5356,1,0,0,0,1002,5364,1,0,0,0,1004,5372,1,0,0,0,1006,5380,
		1,0,0,0,1008,5388,1,0,0,0,1010,5396,1,0,0,0,1012,5404,1,0,0,0,1014,5412,
		1,0,0,0,1016,5420,1,0,0,0,1018,5428,1,0,0,0,1020,5436,1,0,0,0,1022,5444,
		1,0,0,0,1024,5452,1,0,0,0,1026,5460,1,0,0,0,1028,5468,1,0,0,0,1030,5476,
		1,0,0,0,1032,5484,1,0,0,0,1034,5492,1,0,0,0,1036,5500,1,0,0,0,1038,5508,
		1,0,0,0,1040,5516,1,0,0,0,1042,5524,1,0,0,0,1044,5532,1,0,0,0,1046,5540,
		1,0,0,0,1048,5548,1,0,0,0,1050,5556,1,0,0,0,1052,5564,1,0,0,0,1054,5572,
		1,0,0,0,1056,5580,1,0,0,0,1058,5588,1,0,0,0,1060,5596,1,0,0,0,1062,5604,
		1,0,0,0,1064,5612,1,0,0,0,1066,5620,1,0,0,0,1068,5628,1,0,0,0,1070,5636,
		1,0,0,0,1072,5644,1,0,0,0,1074,5652,1,0,0,0,1076,5660,1,0,0,0,1078,5668,
		1,0,0,0,1080,5676,1,0,0,0,1082,5684,1,0,0,0,1084,5692,1,0,0,0,1086,5700,
		1,0,0,0,1088,5708,1,0,0,0,1090,5716,1,0,0,0,1092,5724,1,0,0,0,1094,5732,
		1,0,0,0,1096,5740,1,0,0,0,1098,5748,1,0,0,0,1100,5756,1,0,0,0,1102,5764,
		1,0,0,0,1104,5772,1,0,0,0,1106,5780,1,0,0,0,1108,5788,1,0,0,0,1110,5796,
		1,0,0,0,1112,5804,1,0,0,0,1114,5812,1,0,0,0,1116,5820,1,0,0,0,1118,5828,
		1,0,0,0,1120,5836,1,0,0,0,1122,5844,1,0,0,0,1124,5852,1,0,0,0,1126,5860,
		1,0,0,0,1128,5868,1,0,0,0,1130,5876,1,0,0,0,1132,5884,1,0,0,0,1134,5892,
		1,0,0,0,1136,5900,1,0,0,0,1138,5908,1,0,0,0,1140,5916,1,0,0,0,1142,5924,
		1,0,0,0,1144,5932,1,0,0,0,1146,5940,1,0,0,0,1148,5948,1,0,0,0,1150,5956,
		1,0,0,0,1152,5964,1,0,0,0,1154,5972,1,0,0,0,1156,5974,1,0,0,0,1158,5976,
		1,0,0,0,1160,5978,1,0,0,0,1162,5980,1,0,0,0,1164,5982,1,0,0,0,1166,5984,
		1,0,0,0,1168,5986,1,0,0,0,1170,5988,1,0,0,0,1172,5990,1,0,0,0,1174,5992,
		1,0,0,0,1176,5994,1,0,0,0,1178,5996,1,0,0,0,1180,5998,1,0,0,0,1182,6000,
		1,0,0,0,1184,6002,1,0,0,0,1186,6004,1,0,0,0,1188,6006,1,0,0,0,1190,6008,
		1,0,0,0,1192,6010,1,0,0,0,1194,6012,1,0,0,0,1196,6014,1,0,0,0,1198,6016,
		1,0,0,0,1200,6018,1,0,0,0,1202,6020,1,0,0,0,1204,6022,1,0,0,0,1206,6024,
		1,0,0,0,1208,6026,1,0,0,0,1210,6028,1,0,0,0,1212,6030,1,0,0,0,1214,6032,
		1,0,0,0,1216,6034,1,0,0,0,1218,6036,1,0,0,0,1220,6038,1,0,0,0,1222,6040,
		1,0,0,0,1224,6042,1,0,0,0,1226,6044,1,0,0,0,1228,6046,1,0,0,0,1230,6048,
		1,0,0,0,1232,6050,1,0,0,0,1234,6052,1,0,0,0,1236,6054,1,0,0,0,1238,6056,
		1,0,0,0,1240,6058,1,0,0,0,1242,6060,1,0,0,0,1244,6062,1,0,0,0,1246,6064,
		1,0,0,0,1248,6066,1,0,0,0,1250,6068,1,0,0,0,1252,6070,1,0,0,0,1254,6072,
		1,0,0,0,1256,6074,1,0,0,0,1258,6076,1,0,0,0,1260,6078,1,0,0,0,1262,6080,
		1,0,0,0,1264,6082,1,0,0,0,1266,6084,1,0,0,0,1268,6086,1,0,0,0,1270,6088,
		1,0,0,0,1272,6090,1,0,0,0,1274,6092,1,0,0,0,1276,6094,1,0,0,0,1278,6096,
		1,0,0,0,1280,6098,1,0,0,0,1282,6100,1,0,0,0,1284,6102,1,0,0,0,1286,6104,
		1,0,0,0,1288,6106,1,0,0,0,1290,6108,1,0,0,0,1292,6110,1,0,0,0,1294,6112,
		1,0,0,0,1296,6114,1,0,0,0,1298,6116,1,0,0,0,1300,6118,1,0,0,0,1302,1303,
		7,0,0,0,1303,1,1,0,0,0,1304,1308,3,4,2,0,1305,1307,3,4,2,0,1306,1305,1,
		0,0,0,1307,1310,1,0,0,0,1308,1306,1,0,0,0,1308,1309,1,0,0,0,1309,3,1,0,
		0,0,1310,1308,1,0,0,0,1311,1317,3,6,3,0,1312,1317,3,8,4,0,1313,1317,3,
		14,7,0,1314,1317,3,16,8,0,1315,1317,3,18,9,0,1316,1311,1,0,0,0,1316,1312,
		1,0,0,0,1316,1313,1,0,0,0,1316,1314,1,0,0,0,1316,1315,1,0,0,0,1317,5,1,
		0,0,0,1318,1320,3,866,433,0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,1322,
		1,0,0,0,1321,1323,3,20,10,0,1322,1321,1,0,0,0,1322,1323,1,0,0,0,1323,1325,
		1,0,0,0,1324,1326,3,30,15,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,1328,
		1,0,0,0,1327,1329,3,34,17,0,1328,1327,1,0,0,0,1328,1329,1,0,0,0,1329,1330,
		1,0,0,0,1330,1331,3,868,434,0,1331,7,1,0,0,0,1332,1335,3,10,5,0,1333,1335,
		3,12,6,0,1334,1332,1,0,0,0,1334,1333,1,0,0,0,1335,9,1,0,0,0,1336,1338,
		3,960,480,0,1337,1339,3,20,10,0,1338,1337,1,0,0,0,1338,1339,1,0,0,0,1339,
		1341,1,0,0,0,1340,1342,3,30,15,0,1341,1340,1,0,0,0,1341,1342,1,0,0,0,1342,
		1344,1,0,0,0,1343,1345,3,34,17,0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,
		1346,1,0,0,0,1346,1347,3,966,483,0,1347,11,1,0,0,0,1348,1350,3,968,484,
		0,1349,1351,3,20,10,0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,1353,1,
		0,0,0,1352,1354,3,30,15,0,1353,1352,1,0,0,0,1353,1354,1,0,0,0,1354,1356,
		1,0,0,0,1355,1357,3,34,17,0,1356,1355,1,0,0,0,1356,1357,1,0,0,0,1357,1358,
		1,0,0,0,1358,1359,3,972,486,0,1359,13,1,0,0,0,1360,1362,3,870,435,0,1361,
		1363,3,20,10,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,1365,1,0,0,0,1364,
		1366,3,38,19,0,1365,1364,1,0,0,0,1365,1366,1,0,0,0,1366,1367,1,0,0,0,1367,
		1368,3,872,436,0,1368,15,1,0,0,0,1369,1371,3,888,444,0,1370,1372,3,20,
		10,0,1371,1370,1,0,0,0,1371,1372,1,0,0,0,1372,1374,1,0,0,0,1373,1375,3,
		38,19,0,1374,1373,1,0,0,0,1374,1375,1,0,0,0,1375,1376,1,0,0,0,1376,1377,
		3,892,446,0,1377,17,1,0,0,0,1378,1380,3,894,447,0,1379,1381,3,20,10,0,
		1380,1379,1,0,0,0,1380,1381,1,0,0,0,1381,1382,1,0,0,0,1382,1383,3,896,
		448,0,1383,19,1,0,0,0,1384,1386,3,874,437,0,1385,1384,1,0,0,0,1386,1389,
		1,0,0,0,1387,1385,1,0,0,0,1387,1388,1,0,0,0,1388,1393,1,0,0,0,1389,1387,
		1,0,0,0,1390,1392,3,390,195,0,1391,1390,1,0,0,0,1392,1395,1,0,0,0,1393,
		1391,1,0,0,0,1393,1394,1,0,0,0,1394,1397,1,0,0,0,1395,1393,1,0,0,0,1396,
		1398,3,22,11,0,1397,1396,1,0,0,0,1397,1398,1,0,0,0,1398,1402,1,0,0,0,1399,
		1401,3,26,13,0,1400,1399,1,0,0,0,1401,1404,1,0,0,0,1402,1400,1,0,0,0,1402,
		1403,1,0,0,0,1403,21,1,0,0,0,1404,1402,1,0,0,0,1405,1407,3,24,12,0,1406,
		1405,1,0,0,0,1407,1410,1,0,0,0,1408,1406,1,0,0,0,1408,1409,1,0,0,0,1409,
		1411,1,0,0,0,1410,1408,1,0,0,0,1411,1412,3,382,191,0,1412,23,1,0,0,0,1413,
		1418,3,382,191,0,1414,1418,3,358,179,0,1415,1418,3,822,411,0,1416,1418,
		3,978,489,0,1417,1413,1,0,0,0,1417,1414,1,0,0,0,1417,1415,1,0,0,0,1417,
		1416,1,0,0,0,1418,25,1,0,0,0,1419,1425,3,28,14,0,1420,1425,3,330,165,0,
		1421,1425,3,822,411,0,1422,1425,3,978,489,0,1423,1425,3,984,492,0,1424,
		1419,1,0,0,0,1424,1420,1,0,0,0,1424,1421,1,0,0,0,1424,1422,1,0,0,0,1424,
		1423,1,0,0,0,1425,27,1,0,0,0,1426,1436,3,142,71,0,1427,1436,3,208,104,
		0,1428,1436,3,222,111,0,1429,1436,3,916,458,0,1430,1436,3,898,449,0,1431,
		1436,3,358,179,0,1432,1436,3,920,460,0,1433,1436,3,44,22,0,1434,1436,3,
		252,126,0,1435,1426,1,0,0,0,1435,1427,1,0,0,0,1435,1428,1,0,0,0,1435,1429,
		1,0,0,0,1435,1430,1,0,0,0,1435,1431,1,0,0,0,1435,1432,1,0,0,0,1435,1433,
		1,0,0,0,1435,1434,1,0,0,0,1436,29,1,0,0,0,1437,1441,3,46,23,0,1438,1440,
		3,32,16,0,1439,1438,1,0,0,0,1440,1443,1,0,0,0,1441,1439,1,0,0,0,1441,1442,
		1,0,0,0,1442,31,1,0,0,0,1443,1441,1,0,0,0,1444,1449,3,46,23,0,1445,1449,
		3,822,411,0,1446,1449,3,978,489,0,1447,1449,3,330,165,0,1448,1444,1,0,
		0,0,1448,1445,1,0,0,0,1448,1446,1,0,0,0,1448,1447,1,0,0,0,1449,33,1,0,
		0,0,1450,1454,3,982,491,0,1451,1453,3,36,18,0,1452,1451,1,0,0,0,1453,1456,
		1,0,0,0,1454,1452,1,0,0,0,1454,1455,1,0,0,0,1455,35,1,0,0,0,1456,1454,
		1,0,0,0,1457,1460,3,10,5,0,1458,1460,3,12,6,0,1459,1457,1,0,0,0,1459,1458,
		1,0,0,0,1460,37,1,0,0,0,1461,1465,3,982,491,0,1462,1464,3,40,20,0,1463,
		1462,1,0,0,0,1464,1467,1,0,0,0,1465,1463,1,0,0,0,1465,1466,1,0,0,0,1466,
		39,1,0,0,0,1467,1465,1,0,0,0,1468,1472,3,10,5,0,1469,1472,3,12,6,0,1470,
		1472,3,42,21,0,1471,1468,1,0,0,0,1471,1469,1,0,0,0,1471,1470,1,0,0,0,1472,
		41,1,0,0,0,1473,1475,3,974,487,0,1474,1476,3,20,10,0,1475,1474,1,0,0,0,
		1475,1476,1,0,0,0,1476,1478,1,0,0,0,1477,1479,3,30,15,0,1478,1477,1,0,
		0,0,1478,1479,1,0,0,0,1479,1481,1,0,0,0,1480,1482,3,34,17,0,1481,1480,
		1,0,0,0,1481,1482,1,0,0,0,1482,1483,1,0,0,0,1483,1484,3,976,488,0,1484,
		43,1,0,0,0,1485,1506,3,310,155,0,1486,1506,3,314,157,0,1487,1506,3,318,
		159,0,1488,1506,3,320,160,0,1489,1506,3,324,162,0,1490,1506,3,328,164,
		0,1491,1506,3,352,176,0,1492,1506,3,918,459,0,1493,1506,3,354,177,0,1494,
		1506,3,934,467,0,1495,1506,3,392,196,0,1496,1506,3,356,178,0,1497,1506,
		3,362,181,0,1498,1506,3,366,183,0,1499,1506,3,368,184,0,1500,1506,3,374,
		187,0,1501,1506,3,380,190,0,1502,1506,3,378,189,0,1503,1506,3,402,201,
		0,1504,1506,3,396,198,0,1505,1485,1,0,0,0,1505,1486,1,0,0,0,1505,1487,
		1,0,0,0,1505,1488,1,0,0,0,1505,1489,1,0,0,0,1505,1490,1,0,0,0,1505,1491,
		1,0,0,0,1505,1492,1,0,0,0,1505,1493,1,0,0,0,1505,1494,1,0,0,0,1505,1495,
		1,0,0,0,1505,1496,1,0,0,0,1505,1497,1,0,0,0,1505,1498,1,0,0,0,1505,1499,
		1,0,0,0,1505,1500,1,0,0,0,1505,1501,1,0,0,0,1505,1502,1,0,0,0,1505,1503,
		1,0,0,0,1505,1504,1,0,0,0,1506,45,1,0,0,0,1507,1520,3,48,24,0,1508,1520,
		3,590,295,0,1509,1520,3,600,300,0,1510,1520,3,670,335,0,1511,1520,3,608,
		304,0,1512,1520,3,618,309,0,1513,1520,3,624,312,0,1514,1520,3,658,329,
		0,1515,1520,3,686,343,0,1516,1520,3,694,347,0,1517,1520,3,560,280,0,1518,
		1520,3,576,288,0,1519,1507,1,0,0,0,1519,1508,1,0,0,0,1519,1509,1,0,0,0,
		1519,1510,1,0,0,0,1519,1511,1,0,0,0,1519,1512,1,0,0,0,1519,1513,1,0,0,
		0,1519,1514,1,0,0,0,1519,1515,1,0,0,0,1519,1516,1,0,0,0,1519,1517,1,0,
		0,0,1519,1518,1,0,0,0,1520,47,1,0,0,0,1521,1561,3,462,231,0,1522,1561,
		3,540,270,0,1523,1561,3,806,403,0,1524,1561,3,938,469,0,1525,1561,3,774,
		387,0,1526,1561,3,708,354,0,1527,1561,3,656,328,0,1528,1561,3,492,246,
		0,1529,1561,3,808,404,0,1530,1561,3,712,356,0,1531,1561,3,734,367,0,1532,
		1561,3,738,369,0,1533,1561,3,702,351,0,1534,1561,3,716,358,0,1535,1561,
		3,814,407,0,1536,1561,3,744,372,0,1537,1561,3,704,352,0,1538,1561,3,668,
		334,0,1539,1561,3,818,409,0,1540,1561,3,752,376,0,1541,1561,3,718,359,
		0,1542,1561,3,488,244,0,1543,1561,3,766,383,0,1544,1561,3,542,271,0,1545,
		1561,3,782,391,0,1546,1561,3,778,389,0,1547,1561,3,980,490,0,1548,1561,
		3,810,405,0,1549,1561,3,710,355,0,1550,1561,3,722,361,0,1551,1561,3,726,
		363,0,1552,1561,3,730,365,0,1553,1561,3,732,366,0,1554,1561,3,756,378,
		0,1555,1561,3,802,401,0,1556,1561,3,558,279,0,1557,1561,3,780,390,0,1558,
		1561,3,706,353,0,1559,1561,3,586,293,0,1560,1521,1,0,0,0,1560,1522,1,0,
		0,0,1560,1523,1,0,0,0,1560,1524,1,0,0,0,1560,1525,1,0,0,0,1560,1526,1,
		0,0,0,1560,1527,1,0,0,0,1560,1528,1,0,0,0,1560,1529,1,0,0,0,1560,1530,
		1,0,0,0,1560,1531,1,0,0,0,1560,1532,1,0,0,0,1560,1533,1,0,0,0,1560,1534,
		1,0,0,0,1560,1535,1,0,0,0,1560,1536,1,0,0,0,1560,1537,1,0,0,0,1560,1538,
		1,0,0,0,1560,1539,1,0,0,0,1560,1540,1,0,0,0,1560,1541,1,0,0,0,1560,1542,
		1,0,0,0,1560,1543,1,0,0,0,1560,1544,1,0,0,0,1560,1545,1,0,0,0,1560,1546,
		1,0,0,0,1560,1547,1,0,0,0,1560,1548,1,0,0,0,1560,1549,1,0,0,0,1560,1550,
		1,0,0,0,1560,1551,1,0,0,0,1560,1552,1,0,0,0,1560,1553,1,0,0,0,1560,1554,
		1,0,0,0,1560,1555,1,0,0,0,1560,1556,1,0,0,0,1560,1557,1,0,0,0,1560,1558,
		1,0,0,0,1560,1559,1,0,0,0,1561,49,1,0,0,0,1562,1563,3,0,0,0,1563,51,1,
		0,0,0,1564,1565,5,93,0,0,1565,53,1,0,0,0,1566,1569,3,56,28,0,1567,1569,
		3,58,29,0,1568,1566,1,0,0,0,1568,1567,1,0,0,0,1569,55,1,0,0,0,1570,1577,
		3,106,53,0,1571,1577,3,118,59,0,1572,1577,3,126,63,0,1573,1577,3,140,70,
		0,1574,1577,3,138,69,0,1575,1577,3,234,117,0,1576,1570,1,0,0,0,1576,1571,
		1,0,0,0,1576,1572,1,0,0,0,1576,1573,1,0,0,0,1576,1574,1,0,0,0,1576,1575,
		1,0,0,0,1577,57,1,0,0,0,1578,1579,3,0,0,0,1579,59,1,0,0,0,1580,1581,3,
		54,27,0,1581,61,1,0,0,0,1582,1592,3,64,32,0,1583,1592,3,66,33,0,1584,1592,
		3,68,34,0,1585,1592,3,70,35,0,1586,1592,3,72,36,0,1587,1592,3,74,37,0,
		1588,1592,3,76,38,0,1589,1592,3,78,39,0,1590,1592,3,80,40,0,1591,1582,
		1,0,0,0,1591,1583,1,0,0,0,1591,1584,1,0,0,0,1591,1585,1,0,0,0,1591,1586,
		1,0,0,0,1591,1587,1,0,0,0,1591,1588,1,0,0,0,1591,1589,1,0,0,0,1591,1590,
		1,0,0,0,1592,63,1,0,0,0,1593,1594,5,23,0,0,1594,65,1,0,0,0,1595,1596,7,
		1,0,0,1596,67,1,0,0,0,1597,1598,7,2,0,0,1598,69,1,0,0,0,1599,1600,1,0,
		0,0,1600,71,1,0,0,0,1601,1602,7,3,0,0,1602,73,1,0,0,0,1603,1604,5,40,0,
		0,1604,75,1,0,0,0,1605,1606,5,41,0,0,1606,77,1,0,0,0,1607,1608,5,42,0,
		0,1608,79,1,0,0,0,1609,1610,7,4,0,0,1610,81,1,0,0,0,1611,1615,3,84,42,
		0,1612,1615,3,86,43,0,1613,1615,3,88,44,0,1614,1611,1,0,0,0,1614,1612,
		1,0,0,0,1614,1613,1,0,0,0,1615,83,1,0,0,0,1616,1617,5,239,0,0,1617,85,
		1,0,0,0,1618,1619,5,239,0,0,1619,87,1,0,0,0,1620,1621,3,62,31,0,1621,89,
		1,0,0,0,1622,1623,5,249,0,0,1623,91,1,0,0,0,1624,1628,3,1268,634,0,1625,
		1628,5,12,0,0,1626,1628,5,18,0,0,1627,1624,1,0,0,0,1627,1625,1,0,0,0,1627,
		1626,1,0,0,0,1628,93,1,0,0,0,1629,1634,3,98,49,0,1630,1634,3,198,99,0,
		1631,1634,3,218,109,0,1632,1634,3,230,115,0,1633,1629,1,0,0,0,1633,1630,
		1,0,0,0,1633,1631,1,0,0,0,1633,1632,1,0,0,0,1634,95,1,0,0,0,1635,1680,
		3,98,49,0,1636,1637,5,66,0,0,1637,1638,5,10,0,0,1638,1639,3,98,49,0,1639,
		1640,5,11,0,0,1640,1680,1,0,0,0,1641,1642,5,66,0,0,1642,1643,5,10,0,0,
		1643,1644,3,198,99,0,1644,1645,5,11,0,0,1645,1680,1,0,0,0,1646,1647,5,
		66,0,0,1647,1648,5,10,0,0,1648,1649,3,218,109,0,1649,1650,5,11,0,0,1650,
		1680,1,0,0,0,1651,1652,5,66,0,0,1652,1653,5,10,0,0,1653,1654,3,230,115,
		0,1654,1655,5,11,0,0,1655,1680,1,0,0,0,1656,1657,5,67,0,0,1657,1658,5,
		10,0,0,1658,1659,3,198,99,0,1659,1660,5,11,0,0,1660,1680,1,0,0,0,1661,
		1662,5,67,0,0,1662,1663,5,10,0,0,1663,1664,5,12,0,0,1664,1680,5,11,0,0,
		1665,1666,5,66,0,0,1666,1667,5,10,0,0,1667,1668,5,12,0,0,1668,1680,5,11,
		0,0,1669,1670,5,232,0,0,1670,1671,5,10,0,0,1671,1672,3,426,213,0,1672,
		1673,5,11,0,0,1673,1680,1,0,0,0,1674,1675,5,233,0,0,1675,1676,5,10,0,0,
		1676,1677,3,426,213,0,1677,1678,5,11,0,0,1678,1680,1,0,0,0,1679,1635,1,
		0,0,0,1679,1636,1,0,0,0,1679,1641,1,0,0,0,1679,1646,1,0,0,0,1679,1651,
		1,0,0,0,1679,1656,1,0,0,0,1679,1661,1,0,0,0,1679,1665,1,0,0,0,1679,1669,
		1,0,0,0,1679,1674,1,0,0,0,1680,97,1,0,0,0,1681,1701,3,100,50,0,1682,1684,
		5,60,0,0,1683,1685,3,102,51,0,1684,1683,1,0,0,0,1684,1685,1,0,0,0,1685,
		1701,1,0,0,0,1686,1687,5,61,0,0,1687,1701,5,62,0,0,1688,1690,5,63,0,0,
		1689,1691,3,102,51,0,1690,1689,1,0,0,0,1690,1691,1,0,0,0,1691,1701,1,0,
		0,0,1692,1694,5,64,0,0,1693,1695,3,132,66,0,1694,1693,1,0,0,0,1694,1695,
		1,0,0,0,1695,1701,1,0,0,0,1696,1698,5,65,0,0,1697,1699,3,102,51,0,1698,
		1697,1,0,0,0,1698,1699,1,0,0,0,1699,1701,1,0,0,0,1700,1681,1,0,0,0,1700,
		1682,1,0,0,0,1700,1686,1,0,0,0,1700,1688,1,0,0,0,1700,1692,1,0,0,0,1700,
		1696,1,0,0,0,1701,99,1,0,0,0,1702,1704,5,58,0,0,1703,1705,3,102,51,0,1704,
		1703,1,0,0,0,1704,1705,1,0,0,0,1705,101,1,0,0,0,1706,1709,5,10,0,0,1707,
		1708,5,57,0,0,1708,1710,5,50,0,0,1709,1707,1,0,0,0,1709,1710,1,0,0,0,1710,
		1711,1,0,0,0,1711,1712,3,1260,630,0,1712,1713,5,11,0,0,1713,103,1,0,0,
		0,1714,1716,3,114,57,0,1715,1714,1,0,0,0,1715,1716,1,0,0,0,1716,1717,1,
		0,0,0,1717,1718,3,106,53,0,1718,105,1,0,0,0,1719,1722,3,112,56,0,1720,
		1721,5,93,0,0,1721,1723,3,108,54,0,1722,1720,1,0,0,0,1722,1723,1,0,0,0,
		1723,107,1,0,0,0,1724,1727,3,112,56,0,1725,1727,3,1262,631,0,1726,1724,
		1,0,0,0,1726,1725,1,0,0,0,1727,109,1,0,0,0,1728,1730,3,114,57,0,1729,1728,
		1,0,0,0,1729,1730,1,0,0,0,1730,1731,1,0,0,0,1731,1732,3,112,56,0,1732,
		111,1,0,0,0,1733,1734,5,249,0,0,1734,113,1,0,0,0,1735,1736,7,2,0,0,1736,
		115,1,0,0,0,1737,1739,3,114,57,0,1738,1737,1,0,0,0,1738,1739,1,0,0,0,1739,
		1740,1,0,0,0,1740,1741,3,118,59,0,1741,117,1,0,0,0,1742,1746,3,120,60,
		0,1743,1744,3,122,61,0,1744,1745,3,124,62,0,1745,1747,1,0,0,0,1746,1743,
		1,0,0,0,1746,1747,1,0,0,0,1747,1750,1,0,0,0,1748,1749,5,93,0,0,1749,1751,
		3,108,54,0,1750,1748,1,0,0,0,1750,1751,1,0,0,0,1751,1760,1,0,0,0,1752,
		1753,3,112,56,0,1753,1754,3,122,61,0,1754,1757,3,124,62,0,1755,1756,5,
		93,0,0,1756,1758,3,108,54,0,1757,1755,1,0,0,0,1757,1758,1,0,0,0,1758,1760,
		1,0,0,0,1759,1742,1,0,0,0,1759,1752,1,0,0,0,1760,119,1,0,0,0,1761,1762,
		3,112,56,0,1762,1764,5,78,0,0,1763,1765,3,112,56,0,1764,1763,1,0,0,0,1764,
		1765,1,0,0,0,1765,1769,1,0,0,0,1766,1767,5,78,0,0,1767,1769,3,112,56,0,
		1768,1761,1,0,0,0,1768,1766,1,0,0,0,1769,121,1,0,0,0,1770,1771,7,5,0,0,
		1771,123,1,0,0,0,1772,1773,3,110,55,0,1773,125,1,0,0,0,1774,1775,5,10,
		0,0,1775,1776,3,128,64,0,1776,1777,5,8,0,0,1777,1778,3,130,65,0,1778,1779,
		5,11,0,0,1779,127,1,0,0,0,1780,1784,3,104,52,0,1781,1784,3,116,58,0,1782,
		1784,3,58,29,0,1783,1780,1,0,0,0,1783,1781,1,0,0,0,1783,1782,1,0,0,0,1784,
		129,1,0,0,0,1785,1789,3,104,52,0,1786,1789,3,116,58,0,1787,1789,3,58,29,
		0,1788,1785,1,0,0,0,1788,1786,1,0,0,0,1788,1787,1,0,0,0,1789,131,1,0,0,
		0,1790,1824,3,134,67,0,1791,1792,5,10,0,0,1792,1793,5,59,0,0,1793,1794,
		5,50,0,0,1794,1795,3,92,46,0,1795,1796,5,8,0,0,1796,1797,5,57,0,0,1797,
		1798,5,50,0,0,1798,1799,3,1260,630,0,1799,1800,5,11,0,0,1800,1824,1,0,
		0,0,1801,1802,5,10,0,0,1802,1803,3,92,46,0,1803,1806,5,8,0,0,1804,1805,
		5,57,0,0,1805,1807,5,50,0,0,1806,1804,1,0,0,0,1806,1807,1,0,0,0,1807,1808,
		1,0,0,0,1808,1809,3,1260,630,0,1809,1810,5,11,0,0,1810,1824,1,0,0,0,1811,
		1812,5,10,0,0,1812,1813,5,57,0,0,1813,1814,5,50,0,0,1814,1819,3,1260,630,
		0,1815,1816,5,8,0,0,1816,1817,5,59,0,0,1817,1818,5,50,0,0,1818,1820,3,
		92,46,0,1819,1815,1,0,0,0,1819,1820,1,0,0,0,1820,1821,1,0,0,0,1821,1822,
		5,11,0,0,1822,1824,1,0,0,0,1823,1790,1,0,0,0,1823,1791,1,0,0,0,1823,1801,
		1,0,0,0,1823,1811,1,0,0,0,1824,133,1,0,0,0,1825,1828,5,10,0,0,1826,1827,
		5,59,0,0,1827,1829,5,50,0,0,1828,1826,1,0,0,0,1828,1829,1,0,0,0,1829,1830,
		1,0,0,0,1830,1831,3,92,46,0,1831,1832,5,11,0,0,1832,1839,1,0,0,0,1833,
		1834,5,12,0,0,1834,1836,3,136,68,0,1835,1837,5,8,0,0,1836,1835,1,0,0,0,
		1836,1837,1,0,0,0,1837,1839,1,0,0,0,1838,1825,1,0,0,0,1838,1833,1,0,0,
		0,1839,135,1,0,0,0,1840,1841,5,10,0,0,1841,1842,3,92,46,0,1842,1843,5,
		11,0,0,1843,1846,1,0,0,0,1844,1846,3,106,53,0,1845,1840,1,0,0,0,1845,1844,
		1,0,0,0,1846,137,1,0,0,0,1847,1848,3,108,54,0,1848,1849,5,93,0,0,1849,
		1851,1,0,0,0,1850,1847,1,0,0,0,1850,1851,1,0,0,0,1851,1852,1,0,0,0,1852,
		1860,5,244,0,0,1853,1854,3,108,54,0,1854,1855,5,93,0,0,1855,1857,1,0,0,
		0,1856,1853,1,0,0,0,1856,1857,1,0,0,0,1857,1858,1,0,0,0,1858,1860,5,245,
		0,0,1859,1850,1,0,0,0,1859,1856,1,0,0,0,1860,139,1,0,0,0,1861,1864,5,79,
		0,0,1862,1863,5,93,0,0,1863,1865,3,108,54,0,1864,1862,1,0,0,0,1864,1865,
		1,0,0,0,1865,1872,1,0,0,0,1866,1869,5,80,0,0,1867,1868,5,93,0,0,1868,1870,
		3,108,54,0,1869,1867,1,0,0,0,1869,1870,1,0,0,0,1870,1872,1,0,0,0,1871,
		1861,1,0,0,0,1871,1866,1,0,0,0,1872,141,1,0,0,0,1873,1877,3,144,72,0,1874,
		1876,3,154,77,0,1875,1874,1,0,0,0,1876,1879,1,0,0,0,1877,1875,1,0,0,0,
		1877,1878,1,0,0,0,1878,1883,1,0,0,0,1879,1877,1,0,0,0,1880,1882,3,148,
		74,0,1881,1880,1,0,0,0,1882,1885,1,0,0,0,1883,1881,1,0,0,0,1883,1884,1,
		0,0,0,1884,1887,1,0,0,0,1885,1883,1,0,0,0,1886,1888,3,160,80,0,1887,1886,
		1,0,0,0,1887,1888,1,0,0,0,1888,1890,1,0,0,0,1889,1891,3,182,91,0,1890,
		1889,1,0,0,0,1890,1891,1,0,0,0,1891,1892,1,0,0,0,1892,1893,3,150,75,0,
		1893,143,1,0,0,0,1894,1900,5,66,0,0,1895,1896,5,8,0,0,1896,1898,3,1138,
		569,0,1897,1895,1,0,0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,0,1899,1901,
		5,52,0,0,1900,1897,1,0,0,0,1900,1901,1,0,0,0,1901,1902,1,0,0,0,1902,1907,
		3,1294,647,0,1903,1904,5,10,0,0,1904,1905,3,1144,572,0,1905,1906,5,11,
		0,0,1906,1908,1,0,0,0,1907,1903,1,0,0,0,1907,1908,1,0,0,0,1908,145,1,0,
		0,0,1909,1921,5,118,0,0,1910,1921,3,264,132,0,1911,1912,5,74,0,0,1912,
		1913,5,10,0,0,1913,1914,5,252,0,0,1914,1921,5,11,0,0,1915,1916,5,5,0,0,
		1916,1917,5,10,0,0,1917,1918,3,1230,615,0,1918,1919,5,11,0,0,1919,1921,
		1,0,0,0,1920,1909,1,0,0,0,1920,1910,1,0,0,0,1920,1911,1,0,0,0,1920,1915,
		1,0,0,0,1921,147,1,0,0,0,1922,1925,3,180,90,0,1923,1925,3,152,76,0,1924,
		1922,1,0,0,0,1924,1923,1,0,0,0,1925,149,1,0,0,0,1926,1927,5,7,0,0,1927,
		1929,5,66,0,0,1928,1930,3,1294,647,0,1929,1928,1,0,0,0,1929,1930,1,0,0,
		0,1930,151,1,0,0,0,1931,1932,5,94,0,0,1932,153,1,0,0,0,1933,1934,3,100,
		50,0,1934,1935,5,8,0,0,1935,1936,3,158,79,0,1936,1937,5,52,0,0,1937,1938,
		3,1142,571,0,1938,155,1,0,0,0,1939,1942,3,1296,648,0,1940,1941,5,50,0,
		0,1941,1943,3,1260,630,0,1942,1940,1,0,0,0,1942,1943,1,0,0,0,1943,157,
		1,0,0,0,1944,1945,7,6,0,0,1945,159,1,0,0,0,1946,1948,3,162,81,0,1947,1946,
		1,0,0,0,1948,1951,1,0,0,0,1949,1947,1,0,0,0,1949,1950,1,0,0,0,1950,161,
		1,0,0,0,1951,1949,1,0,0,0,1952,1955,3,164,82,0,1953,1955,3,172,86,0,1954,
		1952,1,0,0,0,1954,1953,1,0,0,0,1955,163,1,0,0,0,1956,1962,3,96,48,0,1957,
		1958,5,8,0,0,1958,1960,3,1030,515,0,1959,1957,1,0,0,0,1959,1960,1,0,0,
		0,1960,1961,1,0,0,0,1961,1963,5,52,0,0,1962,1959,1,0,0,0,1962,1963,1,0,
		0,0,1963,1964,1,0,0,0,1964,1965,3,1032,516,0,1965,165,1,0,0,0,1966,1981,
		3,264,132,0,1967,1981,5,100,0,0,1968,1969,5,101,0,0,1969,1970,3,240,120,
		0,1970,1971,3,268,134,0,1971,1972,3,242,121,0,1972,1981,1,0,0,0,1973,1981,
		5,102,0,0,1974,1975,5,103,0,0,1975,1976,5,10,0,0,1976,1977,3,170,85,0,
		1977,1978,5,11,0,0,1978,1981,1,0,0,0,1979,1981,5,99,0,0,1980,1966,1,0,
		0,0,1980,1967,1,0,0,0,1980,1968,1,0,0,0,1980,1973,1,0,0,0,1980,1974,1,
		0,0,0,1980,1979,1,0,0,0,1981,167,1,0,0,0,1982,1987,3,1178,589,0,1983,1984,
		5,10,0,0,1984,1985,3,170,85,0,1985,1986,5,11,0,0,1986,1988,1,0,0,0,1987,
		1983,1,0,0,0,1987,1988,1,0,0,0,1988,1993,1,0,0,0,1989,1990,3,240,120,0,
		1990,1991,3,268,134,0,1991,1992,3,242,121,0,1992,1994,1,0,0,0,1993,1989,
		1,0,0,0,1993,1994,1,0,0,0,1994,1997,1,0,0,0,1995,1996,5,12,0,0,1996,1998,
		3,136,68,0,1997,1995,1,0,0,0,1997,1998,1,0,0,0,1998,2000,1,0,0,0,1999,
		2001,3,176,88,0,2000,1999,1,0,0,0,2000,2001,1,0,0,0,2001,169,1,0,0,0,2002,
		2005,3,1072,536,0,2003,2005,3,1052,526,0,2004,2002,1,0,0,0,2004,2003,1,
		0,0,0,2005,171,1,0,0,0,2006,2007,5,96,0,0,2007,2009,5,10,0,0,2008,2010,
		3,922,461,0,2009,2008,1,0,0,0,2009,2010,1,0,0,0,2010,2011,1,0,0,0,2011,
		2012,5,11,0,0,2012,2013,5,8,0,0,2013,2014,3,1122,561,0,2014,2015,5,52,
		0,0,2015,2016,3,1124,562,0,2016,173,1,0,0,0,2017,2028,3,264,132,0,2018,
		2028,5,97,0,0,2019,2024,5,98,0,0,2020,2021,5,10,0,0,2021,2022,3,1158,579,
		0,2022,2023,5,11,0,0,2023,2025,1,0,0,0,2024,2020,1,0,0,0,2024,2025,1,0,
		0,0,2025,2028,1,0,0,0,2026,2028,5,99,0,0,2027,2017,1,0,0,0,2027,2018,1,
		0,0,0,2027,2019,1,0,0,0,2027,2026,1,0,0,0,2028,175,1,0,0,0,2029,2030,5,
		50,0,0,2030,2036,3,534,267,0,2031,2032,5,21,0,0,2032,2036,3,262,131,0,
		2033,2034,5,21,0,0,2034,2036,3,178,89,0,2035,2029,1,0,0,0,2035,2031,1,
		0,0,0,2035,2033,1,0,0,0,2036,177,1,0,0,0,2037,2038,3,406,203,0,2038,179,
		1,0,0,0,2039,2040,5,95,0,0,2040,181,1,0,0,0,2041,2043,3,982,491,0,2042,
		2044,3,184,92,0,2043,2042,1,0,0,0,2043,2044,1,0,0,0,2044,2048,1,0,0,0,
		2045,2047,3,186,93,0,2046,2045,1,0,0,0,2047,2050,1,0,0,0,2048,2046,1,0,
		0,0,2048,2049,1,0,0,0,2049,183,1,0,0,0,2050,2048,1,0,0,0,2051,2052,5,95,
		0,0,2052,185,1,0,0,0,2053,2057,3,188,94,0,2054,2057,3,192,96,0,2055,2057,
		3,196,98,0,2056,2053,1,0,0,0,2056,2054,1,0,0,0,2056,2055,1,0,0,0,2057,
		187,1,0,0,0,2058,2064,5,96,0,0,2059,2060,5,8,0,0,2060,2062,3,1012,506,
		0,2061,2059,1,0,0,0,2061,2062,1,0,0,0,2062,2063,1,0,0,0,2063,2065,5,52,
		0,0,2064,2061,1,0,0,0,2064,2065,1,0,0,0,2065,2066,1,0,0,0,2066,2077,3,
		1140,570,0,2067,2068,5,96,0,0,2068,2069,5,10,0,0,2069,2070,3,928,464,0,
		2070,2071,5,11,0,0,2071,2072,5,8,0,0,2072,2073,3,1012,506,0,2073,2074,
		5,52,0,0,2074,2075,3,1014,507,0,2075,2077,1,0,0,0,2076,2058,1,0,0,0,2076,
		2067,1,0,0,0,2077,189,1,0,0,0,2078,2081,3,1166,583,0,2079,2080,5,21,0,
		0,2080,2082,3,1238,619,0,2081,2079,1,0,0,0,2081,2082,1,0,0,0,2082,191,
		1,0,0,0,2083,2086,5,107,0,0,2084,2085,5,8,0,0,2085,2087,3,264,132,0,2086,
		2084,1,0,0,0,2086,2087,1,0,0,0,2087,2088,1,0,0,0,2088,2089,5,52,0,0,2089,
		2090,3,912,456,0,2090,2091,5,21,0,0,2091,2092,3,1014,507,0,2092,193,1,
		0,0,0,2093,2105,3,264,132,0,2094,2105,5,108,0,0,2095,2105,5,109,0,0,2096,
		2105,5,97,0,0,2097,2102,5,98,0,0,2098,2099,5,10,0,0,2099,2100,3,1158,579,
		0,2100,2101,5,11,0,0,2101,2103,1,0,0,0,2102,2098,1,0,0,0,2102,2103,1,0,
		0,0,2103,2105,1,0,0,0,2104,2093,1,0,0,0,2104,2094,1,0,0,0,2104,2095,1,
		0,0,0,2104,2096,1,0,0,0,2104,2097,1,0,0,0,2105,195,1,0,0,0,2106,2108,5,
		106,0,0,2107,2109,5,52,0,0,2108,2107,1,0,0,0,2108,2109,1,0,0,0,2109,2110,
		1,0,0,0,2110,2111,3,1076,538,0,2111,197,1,0,0,0,2112,2117,3,1294,647,0,
		2113,2114,5,10,0,0,2114,2115,3,1146,573,0,2115,2116,5,11,0,0,2116,2118,
		1,0,0,0,2117,2113,1,0,0,0,2117,2118,1,0,0,0,2118,199,1,0,0,0,2119,2120,
		3,50,25,0,2120,2121,5,50,0,0,2121,2123,1,0,0,0,2122,2119,1,0,0,0,2122,
		2123,1,0,0,0,2123,2124,1,0,0,0,2124,2125,3,92,46,0,2125,201,1,0,0,0,2126,
		2127,3,198,99,0,2127,2129,5,10,0,0,2128,2130,3,1034,517,0,2129,2128,1,
		0,0,0,2129,2130,1,0,0,0,2130,2131,1,0,0,0,2131,2132,5,11,0,0,2132,203,
		1,0,0,0,2133,2134,3,50,25,0,2134,2135,5,50,0,0,2135,2137,1,0,0,0,2136,
		2133,1,0,0,0,2136,2137,1,0,0,0,2137,2138,1,0,0,0,2138,2139,3,206,103,0,
		2139,205,1,0,0,0,2140,2144,3,522,261,0,2141,2144,3,550,275,0,2142,2144,
		3,556,278,0,2143,2140,1,0,0,0,2143,2141,1,0,0,0,2143,2142,1,0,0,0,2144,
		207,1,0,0,0,2145,2146,3,210,105,0,2146,2150,3,212,106,0,2147,2149,3,212,
		106,0,2148,2147,1,0,0,0,2149,2152,1,0,0,0,2150,2148,1,0,0,0,2150,2151,
		1,0,0,0,2151,2153,1,0,0,0,2152,2150,1,0,0,0,2153,2154,3,216,108,0,2154,
		209,1,0,0,0,2155,2156,5,119,0,0,2156,2157,5,8,0,0,2157,2158,5,74,0,0,2158,
		2159,5,10,0,0,2159,2160,5,252,0,0,2160,2163,5,11,0,0,2161,2162,5,52,0,
		0,2162,2164,3,1192,596,0,2163,2161,1,0,0,0,2163,2164,1,0,0,0,2164,211,
		1,0,0,0,2165,2167,5,120,0,0,2166,2168,5,52,0,0,2167,2166,1,0,0,0,2167,
		2168,1,0,0,0,2168,2169,1,0,0,0,2169,2170,3,1062,531,0,2170,213,1,0,0,0,
		2171,2174,3,58,29,0,2172,2173,5,50,0,0,2173,2175,3,1260,630,0,2174,2172,
		1,0,0,0,2174,2175,1,0,0,0,2175,215,1,0,0,0,2176,2177,5,7,0,0,2177,2178,
		5,119,0,0,2178,217,1,0,0,0,2179,2180,3,1192,596,0,2180,219,1,0,0,0,2181,
		2182,3,218,109,0,2182,2183,5,10,0,0,2183,2184,3,1258,629,0,2184,2185,5,
		11,0,0,2185,221,1,0,0,0,2186,2187,3,224,112,0,2187,2191,3,226,113,0,2188,
		2190,3,226,113,0,2189,2188,1,0,0,0,2190,2193,1,0,0,0,2191,2189,1,0,0,0,
		2191,2192,1,0,0,0,2192,2194,1,0,0,0,2193,2191,1,0,0,0,2194,2195,3,228,
		114,0,2195,223,1,0,0,0,2196,2197,5,234,0,0,2197,2203,5,66,0,0,2198,2199,
		5,8,0,0,2199,2201,3,264,132,0,2200,2198,1,0,0,0,2200,2201,1,0,0,0,2201,
		2202,1,0,0,0,2202,2204,5,52,0,0,2203,2200,1,0,0,0,2203,2204,1,0,0,0,2204,
		2205,1,0,0,0,2205,2206,3,1194,597,0,2206,225,1,0,0,0,2207,2209,5,120,0,
		0,2208,2210,5,52,0,0,2209,2208,1,0,0,0,2209,2210,1,0,0,0,2210,2211,1,0,
		0,0,2211,2212,3,1064,532,0,2212,227,1,0,0,0,2213,2214,5,7,0,0,2214,2215,
		5,234,0,0,2215,2217,5,66,0,0,2216,2218,3,1194,597,0,2217,2216,1,0,0,0,
		2217,2218,1,0,0,0,2218,229,1,0,0,0,2219,2220,3,1194,597,0,2220,231,1,0,
		0,0,2221,2222,3,230,115,0,2222,2223,5,10,0,0,2223,2224,3,1268,634,0,2224,
		2225,5,11,0,0,2225,233,1,0,0,0,2226,2227,7,7,0,0,2227,235,1,0,0,0,2228,
		2229,5,91,0,0,2229,2230,3,238,119,0,2230,2231,5,92,0,0,2231,2237,1,0,0,
		0,2232,2233,3,240,120,0,2233,2234,3,238,119,0,2234,2235,3,242,121,0,2235,
		2237,1,0,0,0,2236,2228,1,0,0,0,2236,2232,1,0,0,0,2237,237,1,0,0,0,2238,
		2239,3,94,47,0,2239,2240,5,52,0,0,2240,2248,1,0,0,0,2241,2242,3,94,47,
		0,2242,2243,5,52,0,0,2243,2245,1,0,0,0,2244,2241,1,0,0,0,2244,2245,1,0,
		0,0,2245,2246,1,0,0,0,2246,2248,3,986,493,0,2247,2238,1,0,0,0,2247,2244,
		1,0,0,0,2248,239,1,0,0,0,2249,2250,5,86,0,0,2250,241,1,0,0,0,2251,2252,
		5,87,0,0,2252,243,1,0,0,0,2253,2256,3,522,261,0,2254,2256,3,246,123,0,
		2255,2253,1,0,0,0,2255,2254,1,0,0,0,2256,245,1,0,0,0,2257,2258,5,10,0,
		0,2258,2259,3,986,493,0,2259,2260,5,8,0,0,2260,2261,3,248,124,0,2261,2262,
		5,11,0,0,2262,247,1,0,0,0,2263,2264,3,100,50,0,2264,2265,5,52,0,0,2265,
		2267,1,0,0,0,2266,2263,1,0,0,0,2266,2267,1,0,0,0,2267,2268,1,0,0,0,2268,
		2269,3,250,125,0,2269,2270,5,50,0,0,2270,2271,3,1268,634,0,2271,2272,5,
		8,0,0,2272,2275,3,1268,634,0,2273,2274,5,8,0,0,2274,2276,3,1268,634,0,
		2275,2273,1,0,0,0,2275,2276,1,0,0,0,2276,249,1,0,0,0,2277,2278,3,634,317,
		0,2278,251,1,0,0,0,2279,2288,3,96,48,0,2280,2281,5,8,0,0,2281,2283,3,254,
		127,0,2282,2280,1,0,0,0,2283,2286,1,0,0,0,2284,2282,1,0,0,0,2284,2285,
		1,0,0,0,2285,2287,1,0,0,0,2286,2284,1,0,0,0,2287,2289,5,52,0,0,2288,2284,
		1,0,0,0,2288,2289,1,0,0,0,2289,2290,1,0,0,0,2290,2291,3,1058,529,0,2291,
		253,1,0,0,0,2292,2324,3,264,132,0,2293,2324,5,100,0,0,2294,2324,5,121,
		0,0,2295,2296,5,101,0,0,2296,2297,3,240,120,0,2297,2298,3,268,134,0,2298,
		2299,3,242,121,0,2299,2324,1,0,0,0,2300,2324,5,102,0,0,2301,2302,5,103,
		0,0,2302,2303,5,10,0,0,2303,2304,3,278,139,0,2304,2305,5,11,0,0,2305,2324,
		1,0,0,0,2306,2324,5,68,0,0,2307,2308,5,110,0,0,2308,2309,5,10,0,0,2309,
		2310,3,306,153,0,2310,2311,5,11,0,0,2311,2324,1,0,0,0,2312,2324,5,19,0,
		0,2313,2324,3,266,133,0,2314,2324,5,111,0,0,2315,2324,5,70,0,0,2316,2324,
		5,99,0,0,2317,2324,5,112,0,0,2318,2324,3,308,154,0,2319,2324,5,113,0,0,
		2320,2324,5,122,0,0,2321,2324,5,123,0,0,2322,2324,5,124,0,0,2323,2292,
		1,0,0,0,2323,2293,1,0,0,0,2323,2294,1,0,0,0,2323,2295,1,0,0,0,2323,2300,
		1,0,0,0,2323,2301,1,0,0,0,2323,2306,1,0,0,0,2323,2307,1,0,0,0,2323,2312,
		1,0,0,0,2323,2313,1,0,0,0,2323,2314,1,0,0,0,2323,2315,1,0,0,0,2323,2316,
		1,0,0,0,2323,2317,1,0,0,0,2323,2318,1,0,0,0,2323,2319,1,0,0,0,2323,2320,
		1,0,0,0,2323,2321,1,0,0,0,2323,2322,1,0,0,0,2324,255,1,0,0,0,2325,2330,
		3,258,129,0,2326,2327,5,10,0,0,2327,2328,3,278,139,0,2328,2329,5,11,0,
		0,2329,2331,1,0,0,0,2330,2326,1,0,0,0,2330,2331,1,0,0,0,2331,2336,1,0,
		0,0,2332,2333,3,240,120,0,2333,2334,3,268,134,0,2334,2335,3,242,121,0,
		2335,2337,1,0,0,0,2336,2332,1,0,0,0,2336,2337,1,0,0,0,2337,2340,1,0,0,
		0,2338,2339,5,12,0,0,2339,2341,3,136,68,0,2340,2338,1,0,0,0,2340,2341,
		1,0,0,0,2341,2343,1,0,0,0,2342,2344,3,260,130,0,2343,2342,1,0,0,0,2343,
		2344,1,0,0,0,2344,2351,1,0,0,0,2345,2348,3,1204,602,0,2346,2347,5,12,0,
		0,2347,2349,3,136,68,0,2348,2346,1,0,0,0,2348,2349,1,0,0,0,2349,2351,1,
		0,0,0,2350,2325,1,0,0,0,2350,2345,1,0,0,0,2351,257,1,0,0,0,2352,2353,3,
		0,0,0,2353,259,1,0,0,0,2354,2355,5,50,0,0,2355,2361,3,534,267,0,2356,2357,
		5,21,0,0,2357,2361,3,262,131,0,2358,2359,5,21,0,0,2359,2361,3,178,89,0,
		2360,2354,1,0,0,0,2360,2356,1,0,0,0,2360,2358,1,0,0,0,2361,261,1,0,0,0,
		2362,2363,3,936,468,0,2363,263,1,0,0,0,2364,2365,7,8,0,0,2365,265,1,0,
		0,0,2366,2367,5,74,0,0,2367,2368,5,10,0,0,2368,2373,5,252,0,0,2369,2370,
		5,8,0,0,2370,2371,5,75,0,0,2371,2372,5,50,0,0,2372,2374,3,1252,626,0,2373,
		2369,1,0,0,0,2373,2374,1,0,0,0,2374,2375,1,0,0,0,2375,2376,5,11,0,0,2376,
		267,1,0,0,0,2377,2380,3,1050,525,0,2378,2380,3,272,136,0,2379,2377,1,0,
		0,0,2379,2378,1,0,0,0,2380,269,1,0,0,0,2381,2382,5,18,0,0,2382,271,1,0,
		0,0,2383,2384,3,274,137,0,2384,2385,5,18,0,0,2385,2387,1,0,0,0,2386,2383,
		1,0,0,0,2386,2387,1,0,0,0,2387,2388,1,0,0,0,2388,2389,3,276,138,0,2389,
		2390,5,8,0,0,2390,2392,1,0,0,0,2391,2386,1,0,0,0,2392,2395,1,0,0,0,2393,
		2391,1,0,0,0,2393,2394,1,0,0,0,2394,2399,1,0,0,0,2395,2393,1,0,0,0,2396,
		2397,3,274,137,0,2397,2398,5,18,0,0,2398,2400,1,0,0,0,2399,2396,1,0,0,
		0,2399,2400,1,0,0,0,2400,2401,1,0,0,0,2401,2402,5,12,0,0,2402,273,1,0,
		0,0,2403,2404,3,532,266,0,2404,275,1,0,0,0,2405,2406,3,532,266,0,2406,
		277,1,0,0,0,2407,2417,3,1072,536,0,2408,2417,3,286,143,0,2409,2417,3,1008,
		504,0,2410,2417,3,292,146,0,2411,2417,3,1052,526,0,2412,2417,3,298,149,
		0,2413,2417,3,302,151,0,2414,2417,3,300,150,0,2415,2417,3,304,152,0,2416,
		2407,1,0,0,0,2416,2408,1,0,0,0,2416,2409,1,0,0,0,2416,2410,1,0,0,0,2416,
		2411,1,0,0,0,2416,2412,1,0,0,0,2416,2413,1,0,0,0,2416,2414,1,0,0,0,2416,
		2415,1,0,0,0,2417,279,1,0,0,0,2418,2419,3,282,141,0,2419,2420,5,18,0,0,
		2420,2422,1,0,0,0,2421,2418,1,0,0,0,2421,2422,1,0,0,0,2422,2423,1,0,0,
		0,2423,2424,3,284,142,0,2424,281,1,0,0,0,2425,2426,3,532,266,0,2426,283,
		1,0,0,0,2427,2428,3,532,266,0,2428,285,1,0,0,0,2429,2430,3,288,144,0,2430,
		2431,5,18,0,0,2431,2433,1,0,0,0,2432,2429,1,0,0,0,2432,2433,1,0,0,0,2433,
		2434,1,0,0,0,2434,2444,3,288,144,0,2435,2436,3,282,141,0,2436,2437,5,18,
		0,0,2437,2438,3,288,144,0,2438,2444,1,0,0,0,2439,2440,3,288,144,0,2440,
		2441,5,18,0,0,2441,2442,3,284,142,0,2442,2444,1,0,0,0,2443,2432,1,0,0,
		0,2443,2435,1,0,0,0,2443,2439,1,0,0,0,2444,287,1,0,0,0,2445,2446,3,528,
		264,0,2446,289,1,0,0,0,2447,2449,3,282,141,0,2448,2447,1,0,0,0,2448,2449,
		1,0,0,0,2449,2450,1,0,0,0,2450,2451,5,18,0,0,2451,291,1,0,0,0,2452,2453,
		3,288,144,0,2453,2454,5,18,0,0,2454,293,1,0,0,0,2455,2456,5,18,0,0,2456,
		295,1,0,0,0,2457,2458,3,282,141,0,2458,2459,5,18,0,0,2459,2461,1,0,0,0,
		2460,2457,1,0,0,0,2460,2461,1,0,0,0,2461,2462,1,0,0,0,2462,2463,5,12,0,
		0,2463,297,1,0,0,0,2464,2465,3,1072,536,0,2465,2466,5,8,0,0,2466,2467,
		3,296,148,0,2467,299,1,0,0,0,2468,2469,3,296,148,0,2469,301,1,0,0,0,2470,
		2471,3,296,148,0,2471,2472,5,8,0,0,2472,2473,3,1006,503,0,2473,303,1,0,
		0,0,2474,2475,5,128,0,0,2475,305,1,0,0,0,2476,2477,7,9,0,0,2477,307,1,
		0,0,0,2478,2479,5,214,0,0,2479,2480,5,10,0,0,2480,2481,3,1260,630,0,2481,
		2482,5,11,0,0,2482,309,1,0,0,0,2483,2488,3,264,132,0,2484,2486,5,52,0,
		0,2485,2484,1,0,0,0,2485,2486,1,0,0,0,2486,2487,1,0,0,0,2487,2489,3,988,
		494,0,2488,2485,1,0,0,0,2488,2489,1,0,0,0,2489,311,1,0,0,0,2490,2493,3,
		1154,577,0,2491,2493,3,912,456,0,2492,2490,1,0,0,0,2492,2491,1,0,0,0,2493,
		313,1,0,0,0,2494,2496,5,100,0,0,2495,2497,5,52,0,0,2496,2495,1,0,0,0,2496,
		2497,1,0,0,0,2497,2498,1,0,0,0,2498,2499,3,994,497,0,2499,315,1,0,0,0,
		2500,2505,3,258,129,0,2501,2502,5,10,0,0,2502,2503,3,278,139,0,2503,2504,
		5,11,0,0,2504,2506,1,0,0,0,2505,2501,1,0,0,0,2505,2506,1,0,0,0,2506,2511,
		1,0,0,0,2507,2508,3,240,120,0,2508,2509,3,268,134,0,2509,2510,3,242,121,
		0,2510,2512,1,0,0,0,2511,2507,1,0,0,0,2511,2512,1,0,0,0,2512,317,1,0,0,
		0,2513,2515,5,121,0,0,2514,2516,5,52,0,0,2515,2514,1,0,0,0,2515,2516,1,
		0,0,0,2516,2517,1,0,0,0,2517,2518,3,1110,555,0,2518,319,1,0,0,0,2519,2521,
		3,266,133,0,2520,2522,5,52,0,0,2521,2520,1,0,0,0,2521,2522,1,0,0,0,2522,
		2523,1,0,0,0,2523,2524,3,1010,505,0,2524,321,1,0,0,0,2525,2531,3,1188,
		594,0,2526,2527,5,24,0,0,2527,2528,3,1176,588,0,2528,2529,5,24,0,0,2529,
		2531,1,0,0,0,2530,2525,1,0,0,0,2530,2526,1,0,0,0,2531,323,1,0,0,0,2532,
		2534,5,101,0,0,2533,2535,5,52,0,0,2534,2533,1,0,0,0,2534,2535,1,0,0,0,
		2535,2536,1,0,0,0,2536,2537,3,1026,513,0,2537,325,1,0,0,0,2538,2539,3,
		1174,587,0,2539,2540,3,240,120,0,2540,2541,3,268,134,0,2541,2542,3,242,
		121,0,2542,327,1,0,0,0,2543,2545,5,102,0,0,2544,2546,5,52,0,0,2545,2544,
		1,0,0,0,2545,2546,1,0,0,0,2546,2547,1,0,0,0,2547,2548,3,1110,555,0,2548,
		329,1,0,0,0,2549,2550,5,17,0,0,2550,2557,3,332,166,0,2551,2553,5,8,0,0,
		2552,2551,1,0,0,0,2552,2553,1,0,0,0,2553,2554,1,0,0,0,2554,2556,3,332,
		166,0,2555,2552,1,0,0,0,2556,2559,1,0,0,0,2557,2555,1,0,0,0,2557,2558,
		1,0,0,0,2558,331,1,0,0,0,2559,2557,1,0,0,0,2560,2561,3,1044,522,0,2561,
		2562,5,24,0,0,2562,2563,3,1046,523,0,2563,2564,5,24,0,0,2564,333,1,0,0,
		0,2565,2568,3,408,204,0,2566,2568,3,336,168,0,2567,2565,1,0,0,0,2567,2566,
		1,0,0,0,2568,335,1,0,0,0,2569,2570,5,10,0,0,2570,2571,3,1042,521,0,2571,
		2575,5,8,0,0,2572,2573,3,100,50,0,2573,2574,5,52,0,0,2574,2576,1,0,0,0,
		2575,2572,1,0,0,0,2575,2576,1,0,0,0,2576,2577,1,0,0,0,2577,2578,3,340,
		170,0,2578,2579,5,50,0,0,2579,2580,3,1260,630,0,2580,2581,5,8,0,0,2581,
		2584,3,1260,630,0,2582,2583,5,8,0,0,2583,2585,3,1260,630,0,2584,2582,1,
		0,0,0,2584,2585,1,0,0,0,2585,2586,1,0,0,0,2586,2587,5,11,0,0,2587,337,
		1,0,0,0,2588,2592,3,438,219,0,2589,2592,3,1280,640,0,2590,2592,3,336,168,
		0,2591,2588,1,0,0,0,2591,2589,1,0,0,0,2591,2590,1,0,0,0,2592,339,1,0,0,
		0,2593,2594,3,634,317,0,2594,341,1,0,0,0,2595,2596,3,344,172,0,2596,2597,
		5,12,0,0,2597,2599,1,0,0,0,2598,2595,1,0,0,0,2598,2599,1,0,0,0,2599,2600,
		1,0,0,0,2600,2601,3,346,173,0,2601,343,1,0,0,0,2602,2605,3,1266,633,0,
		2603,2605,3,1264,632,0,2604,2602,1,0,0,0,2604,2603,1,0,0,0,2605,345,1,
		0,0,0,2606,2616,3,1250,625,0,2607,2616,3,1248,624,0,2608,2616,3,104,52,
		0,2609,2616,3,116,58,0,2610,2616,3,262,131,0,2611,2616,3,178,89,0,2612,
		2616,3,202,101,0,2613,2616,3,220,110,0,2614,2616,3,232,116,0,2615,2606,
		1,0,0,0,2615,2607,1,0,0,0,2615,2608,1,0,0,0,2615,2609,1,0,0,0,2615,2610,
		1,0,0,0,2615,2611,1,0,0,0,2615,2612,1,0,0,0,2615,2613,1,0,0,0,2615,2614,
		1,0,0,0,2616,347,1,0,0,0,2617,2618,3,350,175,0,2618,349,1,0,0,0,2619,2620,
		3,406,203,0,2620,351,1,0,0,0,2621,2623,5,103,0,0,2622,2624,5,52,0,0,2623,
		2622,1,0,0,0,2623,2624,1,0,0,0,2624,2625,1,0,0,0,2625,2626,3,1160,580,
		0,2626,2627,5,10,0,0,2627,2628,3,278,139,0,2628,2637,5,11,0,0,2629,2630,
		5,8,0,0,2630,2631,3,1160,580,0,2631,2632,5,10,0,0,2632,2633,3,278,139,
		0,2633,2634,5,11,0,0,2634,2636,1,0,0,0,2635,2629,1,0,0,0,2636,2639,1,0,
		0,0,2637,2635,1,0,0,0,2637,2638,1,0,0,0,2638,353,1,0,0,0,2639,2637,1,0,
		0,0,2640,2641,5,110,0,0,2641,2642,5,10,0,0,2642,2643,3,306,153,0,2643,
		2645,5,11,0,0,2644,2646,5,52,0,0,2645,2644,1,0,0,0,2645,2646,1,0,0,0,2646,
		2647,1,0,0,0,2647,2648,3,1056,528,0,2648,355,1,0,0,0,2649,2651,5,111,0,
		0,2650,2652,5,52,0,0,2651,2650,1,0,0,0,2651,2652,1,0,0,0,2652,2653,1,0,
		0,0,2653,2654,3,1056,528,0,2654,357,1,0,0,0,2655,2656,5,70,0,0,2656,2657,
		5,10,0,0,2657,2658,3,1106,553,0,2658,2659,5,11,0,0,2659,359,1,0,0,0,2660,
		2661,3,58,29,0,2661,2662,5,50,0,0,2662,2663,3,534,267,0,2663,361,1,0,0,
		0,2664,2666,5,99,0,0,2665,2667,5,52,0,0,2666,2665,1,0,0,0,2666,2667,1,
		0,0,0,2667,2668,1,0,0,0,2668,2669,3,1116,558,0,2669,363,1,0,0,0,2670,2675,
		3,258,129,0,2671,2672,5,10,0,0,2672,2673,3,1052,526,0,2673,2674,5,11,0,
		0,2674,2676,1,0,0,0,2675,2671,1,0,0,0,2675,2676,1,0,0,0,2676,2679,1,0,
		0,0,2677,2679,3,1240,620,0,2678,2670,1,0,0,0,2678,2677,1,0,0,0,2679,365,
		1,0,0,0,2680,2682,5,112,0,0,2681,2683,5,52,0,0,2682,2681,1,0,0,0,2682,
		2683,1,0,0,0,2683,2684,1,0,0,0,2684,2685,3,1060,530,0,2685,367,1,0,0,0,
		2686,2691,5,113,0,0,2687,2689,5,52,0,0,2688,2687,1,0,0,0,2688,2689,1,0,
		0,0,2689,2690,1,0,0,0,2690,2692,3,1128,564,0,2691,2688,1,0,0,0,2691,2692,
		1,0,0,0,2692,369,1,0,0,0,2693,2700,3,258,129,0,2694,2700,3,372,186,0,2695,
		2696,5,24,0,0,2696,2697,3,1176,588,0,2697,2698,5,24,0,0,2698,2700,1,0,
		0,0,2699,2693,1,0,0,0,2699,2694,1,0,0,0,2699,2695,1,0,0,0,2700,371,1,0,
		0,0,2701,2702,3,0,0,0,2702,373,1,0,0,0,2703,2705,5,122,0,0,2704,2706,5,
		52,0,0,2705,2704,1,0,0,0,2705,2706,1,0,0,0,2706,2707,1,0,0,0,2707,2708,
		3,1136,568,0,2708,375,1,0,0,0,2709,2714,3,258,129,0,2710,2711,5,10,0,0,
		2711,2712,3,278,139,0,2712,2713,5,11,0,0,2713,2715,1,0,0,0,2714,2710,1,
		0,0,0,2714,2715,1,0,0,0,2715,2720,1,0,0,0,2716,2717,3,240,120,0,2717,2718,
		3,268,134,0,2718,2719,3,242,121,0,2719,2721,1,0,0,0,2720,2716,1,0,0,0,
		2720,2721,1,0,0,0,2721,377,1,0,0,0,2722,2724,5,123,0,0,2723,2725,5,52,
		0,0,2724,2723,1,0,0,0,2724,2725,1,0,0,0,2725,2726,1,0,0,0,2726,2727,3,
		1056,528,0,2727,379,1,0,0,0,2728,2730,5,124,0,0,2729,2731,5,52,0,0,2730,
		2729,1,0,0,0,2730,2731,1,0,0,0,2731,2732,1,0,0,0,2732,2733,3,1110,555,
		0,2733,381,1,0,0,0,2734,2735,5,69,0,0,2735,2746,3,1086,543,0,2736,2737,
		5,69,0,0,2737,2743,5,55,0,0,2738,2740,5,10,0,0,2739,2741,3,1084,542,0,
		2740,2739,1,0,0,0,2740,2741,1,0,0,0,2741,2742,1,0,0,0,2742,2744,5,11,0,
		0,2743,2738,1,0,0,0,2743,2744,1,0,0,0,2744,2746,1,0,0,0,2745,2734,1,0,
		0,0,2745,2736,1,0,0,0,2746,383,1,0,0,0,2747,2748,3,96,48,0,2748,2749,5,
		10,0,0,2749,2750,3,1102,551,0,2750,2751,5,11,0,0,2751,385,1,0,0,0,2752,
		2753,5,240,0,0,2753,387,1,0,0,0,2754,2755,7,10,0,0,2755,389,1,0,0,0,2756,
		2761,5,54,0,0,2757,2759,5,52,0,0,2758,2757,1,0,0,0,2758,2759,1,0,0,0,2759,
		2760,1,0,0,0,2760,2762,3,1088,544,0,2761,2758,1,0,0,0,2761,2762,1,0,0,
		0,2762,2775,1,0,0,0,2763,2764,5,54,0,0,2764,2765,5,8,0,0,2765,2766,5,53,
		0,0,2766,2767,5,18,0,0,2767,2775,3,1088,544,0,2768,2769,5,54,0,0,2769,
		2770,5,8,0,0,2770,2775,5,55,0,0,2771,2772,5,54,0,0,2772,2773,5,8,0,0,2773,
		2775,5,56,0,0,2774,2756,1,0,0,0,2774,2763,1,0,0,0,2774,2768,1,0,0,0,2774,
		2771,1,0,0,0,2775,391,1,0,0,0,2776,2777,5,127,0,0,2777,2778,5,24,0,0,2778,
		2779,3,1226,613,0,2779,2780,5,24,0,0,2780,2791,3,1108,554,0,2781,2783,
		5,8,0,0,2782,2781,1,0,0,0,2782,2783,1,0,0,0,2783,2784,1,0,0,0,2784,2785,
		5,24,0,0,2785,2786,3,1226,613,0,2786,2787,5,24,0,0,2787,2788,3,1108,554,
		0,2788,2790,1,0,0,0,2789,2782,1,0,0,0,2790,2793,1,0,0,0,2791,2789,1,0,
		0,0,2791,2792,1,0,0,0,2792,393,1,0,0,0,2793,2791,1,0,0,0,2794,2795,3,410,
		205,0,2795,395,1,0,0,0,2796,2797,5,125,0,0,2797,2798,3,1068,534,0,2798,
		397,1,0,0,0,2799,2800,5,10,0,0,2800,2801,3,400,200,0,2801,2802,5,8,0,0,
		2802,2803,3,1066,533,0,2803,2804,5,11,0,0,2804,399,1,0,0,0,2805,2809,3,
		410,205,0,2806,2809,3,438,219,0,2807,2809,3,420,210,0,2808,2805,1,0,0,
		0,2808,2806,1,0,0,0,2808,2807,1,0,0,0,2809,401,1,0,0,0,2810,2816,5,126,
		0,0,2811,2813,5,24,0,0,2812,2814,3,1176,588,0,2813,2812,1,0,0,0,2813,2814,
		1,0,0,0,2814,2815,1,0,0,0,2815,2817,5,24,0,0,2816,2811,1,0,0,0,2816,2817,
		1,0,0,0,2817,2818,1,0,0,0,2818,2830,3,1028,514,0,2819,2821,5,8,0,0,2820,
		2819,1,0,0,0,2820,2821,1,0,0,0,2821,2822,1,0,0,0,2822,2824,5,24,0,0,2823,
		2825,3,1176,588,0,2824,2823,1,0,0,0,2824,2825,1,0,0,0,2825,2826,1,0,0,
		0,2826,2827,5,24,0,0,2827,2829,3,1028,514,0,2828,2820,1,0,0,0,2829,2832,
		1,0,0,0,2830,2828,1,0,0,0,2830,2831,1,0,0,0,2831,403,1,0,0,0,2832,2830,
		1,0,0,0,2833,2838,3,410,205,0,2834,2835,5,10,0,0,2835,2836,3,278,139,0,
		2836,2837,5,11,0,0,2837,2839,1,0,0,0,2838,2834,1,0,0,0,2838,2839,1,0,0,
		0,2839,405,1,0,0,0,2840,2841,6,203,-1,0,2841,2854,3,258,129,0,2842,2854,
		3,438,219,0,2843,2848,3,426,213,0,2844,2845,5,10,0,0,2845,2846,3,424,212,
		0,2846,2847,5,11,0,0,2847,2849,1,0,0,0,2848,2844,1,0,0,0,2848,2849,1,0,
		0,0,2849,2854,1,0,0,0,2850,2854,3,432,216,0,2851,2854,3,430,215,0,2852,
		2854,3,420,210,0,2853,2840,1,0,0,0,2853,2842,1,0,0,0,2853,2843,1,0,0,0,
		2853,2850,1,0,0,0,2853,2851,1,0,0,0,2853,2852,1,0,0,0,2854,2863,1,0,0,
		0,2855,2856,10,5,0,0,2856,2857,5,90,0,0,2857,2862,5,88,0,0,2858,2859,10,
		4,0,0,2859,2860,5,90,0,0,2860,2862,5,89,0,0,2861,2855,1,0,0,0,2861,2858,
		1,0,0,0,2862,2865,1,0,0,0,2863,2861,1,0,0,0,2863,2864,1,0,0,0,2864,407,
		1,0,0,0,2865,2863,1,0,0,0,2866,2867,6,204,-1,0,2867,2885,3,406,203,0,2868,
		2869,3,1238,619,0,2869,2871,5,10,0,0,2870,2872,3,990,495,0,2871,2870,1,
		0,0,0,2871,2872,1,0,0,0,2872,2873,1,0,0,0,2873,2874,5,11,0,0,2874,2885,
		1,0,0,0,2875,2876,3,426,213,0,2876,2877,5,90,0,0,2877,2878,3,1166,583,
		0,2878,2880,5,10,0,0,2879,2881,3,990,495,0,2880,2879,1,0,0,0,2880,2881,
		1,0,0,0,2881,2882,1,0,0,0,2882,2883,5,11,0,0,2883,2885,1,0,0,0,2884,2866,
		1,0,0,0,2884,2868,1,0,0,0,2884,2875,1,0,0,0,2885,2897,1,0,0,0,2886,2887,
		10,2,0,0,2887,2888,5,90,0,0,2888,2889,3,1234,617,0,2889,2891,5,10,0,0,
		2890,2892,3,990,495,0,2891,2890,1,0,0,0,2891,2892,1,0,0,0,2892,2893,1,
		0,0,0,2893,2894,5,11,0,0,2894,2896,1,0,0,0,2895,2886,1,0,0,0,2896,2899,
		1,0,0,0,2897,2895,1,0,0,0,2897,2898,1,0,0,0,2898,409,1,0,0,0,2899,2897,
		1,0,0,0,2900,2901,3,0,0,0,2901,411,1,0,0,0,2902,2903,3,408,204,0,2903,
		413,1,0,0,0,2904,2905,3,408,204,0,2905,415,1,0,0,0,2906,2907,3,408,204,
		0,2907,417,1,0,0,0,2908,2909,3,408,204,0,2909,419,1,0,0,0,2910,2911,3,
		422,211,0,2911,2912,5,10,0,0,2912,2913,3,424,212,0,2913,2914,5,11,0,0,
		2914,421,1,0,0,0,2915,2921,3,1282,641,0,2916,2921,3,438,219,0,2917,2921,
		3,432,216,0,2918,2921,3,1280,640,0,2919,2921,3,1250,625,0,2920,2915,1,
		0,0,0,2920,2916,1,0,0,0,2920,2917,1,0,0,0,2920,2918,1,0,0,0,2920,2919,
		1,0,0,0,2921,423,1,0,0,0,2922,2924,3,1268,634,0,2923,2922,1,0,0,0,2923,
		2924,1,0,0,0,2924,2925,1,0,0,0,2925,2927,5,18,0,0,2926,2928,3,1268,634,
		0,2927,2926,1,0,0,0,2927,2928,1,0,0,0,2928,425,1,0,0,0,2929,2934,3,428,
		214,0,2930,2931,5,90,0,0,2931,2933,3,428,214,0,2932,2930,1,0,0,0,2933,
		2936,1,0,0,0,2934,2932,1,0,0,0,2934,2935,1,0,0,0,2935,427,1,0,0,0,2936,
		2934,1,0,0,0,2937,2942,3,1232,616,0,2938,2939,5,10,0,0,2939,2940,3,1130,
		565,0,2940,2941,5,11,0,0,2941,2943,1,0,0,0,2942,2938,1,0,0,0,2942,2943,
		1,0,0,0,2943,2945,1,0,0,0,2944,2946,3,456,228,0,2945,2944,1,0,0,0,2945,
		2946,1,0,0,0,2946,429,1,0,0,0,2947,2948,3,426,213,0,2948,431,1,0,0,0,2949,
		2950,3,426,213,0,2950,433,1,0,0,0,2951,2952,3,406,203,0,2952,2953,5,90,
		0,0,2953,2954,5,88,0,0,2954,2960,1,0,0,0,2955,2956,3,406,203,0,2956,2957,
		5,90,0,0,2957,2958,5,89,0,0,2958,2960,1,0,0,0,2959,2951,1,0,0,0,2959,2955,
		1,0,0,0,2960,435,1,0,0,0,2961,2962,3,406,203,0,2962,2963,5,90,0,0,2963,
		2964,3,1296,648,0,2964,437,1,0,0,0,2965,2966,3,426,213,0,2966,439,1,0,
		0,0,2967,2972,3,426,213,0,2968,2969,5,10,0,0,2969,2970,3,424,212,0,2970,
		2971,5,11,0,0,2971,2973,1,0,0,0,2972,2968,1,0,0,0,2972,2973,1,0,0,0,2973,
		2976,1,0,0,0,2974,2976,3,434,217,0,2975,2967,1,0,0,0,2975,2974,1,0,0,0,
		2976,441,1,0,0,0,2977,2978,3,1268,634,0,2978,443,1,0,0,0,2979,2980,5,228,
		0,0,2980,2981,3,528,264,0,2981,445,1,0,0,0,2982,2988,3,442,221,0,2983,
		2988,3,444,222,0,2984,2988,3,448,224,0,2985,2988,3,450,225,0,2986,2988,
		3,454,227,0,2987,2982,1,0,0,0,2987,2983,1,0,0,0,2987,2984,1,0,0,0,2987,
		2985,1,0,0,0,2987,2986,1,0,0,0,2988,447,1,0,0,0,2989,2991,3,442,221,0,
		2990,2989,1,0,0,0,2990,2991,1,0,0,0,2991,2992,1,0,0,0,2992,2994,5,18,0,
		0,2993,2995,3,442,221,0,2994,2993,1,0,0,0,2994,2995,1,0,0,0,2995,2998,
		1,0,0,0,2996,2997,5,18,0,0,2997,2999,3,452,226,0,2998,2996,1,0,0,0,2998,
		2999,1,0,0,0,2999,449,1,0,0,0,3000,3002,5,228,0,0,3001,3003,3,528,264,
		0,3002,3001,1,0,0,0,3002,3003,1,0,0,0,3003,3004,1,0,0,0,3004,3006,5,18,
		0,0,3005,3007,3,528,264,0,3006,3005,1,0,0,0,3006,3007,1,0,0,0,3007,3010,
		1,0,0,0,3008,3009,5,18,0,0,3009,3011,3,528,264,0,3010,3008,1,0,0,0,3010,
		3011,1,0,0,0,3011,451,1,0,0,0,3012,3013,3,1268,634,0,3013,453,1,0,0,0,
		3014,3015,3,528,264,0,3015,455,1,0,0,0,3016,3017,3,240,120,0,3017,3020,
		3,1040,520,0,3018,3019,5,8,0,0,3019,3021,3,1082,541,0,3020,3018,1,0,0,
		0,3020,3021,1,0,0,0,3021,3022,1,0,0,0,3022,3023,3,242,121,0,3023,457,1,
		0,0,0,3024,3025,3,1268,634,0,3025,459,1,0,0,0,3026,3027,5,231,0,0,3027,
		3028,5,50,0,0,3028,3039,3,720,360,0,3029,3030,5,83,0,0,3030,3031,5,50,
		0,0,3031,3039,3,496,248,0,3032,3033,5,84,0,0,3033,3034,5,50,0,0,3034,3039,
		3,616,308,0,3035,3036,5,85,0,0,3036,3037,5,50,0,0,3037,3039,3,1268,634,
		0,3038,3026,1,0,0,0,3038,3029,1,0,0,0,3038,3032,1,0,0,0,3038,3035,1,0,
		0,0,3039,461,1,0,0,0,3040,3041,5,149,0,0,3041,3045,5,10,0,0,3042,3043,
		3,94,47,0,3043,3044,5,52,0,0,3044,3046,1,0,0,0,3045,3042,1,0,0,0,3045,
		3046,1,0,0,0,3046,3047,1,0,0,0,3047,3050,3,1002,501,0,3048,3049,5,8,0,
		0,3049,3051,3,992,496,0,3050,3048,1,0,0,0,3050,3051,1,0,0,0,3051,3052,
		1,0,0,0,3052,3053,5,11,0,0,3053,463,1,0,0,0,3054,3055,5,133,0,0,3055,3056,
		5,50,0,0,3056,3067,3,466,233,0,3057,3058,5,150,0,0,3058,3059,5,50,0,0,
		3059,3067,3,468,234,0,3060,3061,5,151,0,0,3061,3062,5,50,0,0,3062,3067,
		3,468,234,0,3063,3064,5,83,0,0,3064,3065,5,50,0,0,3065,3067,3,496,248,
		0,3066,3054,1,0,0,0,3066,3057,1,0,0,0,3066,3060,1,0,0,0,3066,3063,1,0,
		0,0,3067,465,1,0,0,0,3068,3069,3,1256,628,0,3069,467,1,0,0,0,3070,3071,
		3,522,261,0,3071,469,1,0,0,0,3072,3077,3,472,236,0,3073,3074,5,10,0,0,
		3074,3075,3,1000,500,0,3075,3076,5,11,0,0,3076,3078,1,0,0,0,3077,3073,
		1,0,0,0,3077,3078,1,0,0,0,3078,3083,1,0,0,0,3079,3080,3,240,120,0,3080,
		3081,3,484,242,0,3081,3082,3,242,121,0,3082,3084,1,0,0,0,3083,3079,1,0,
		0,0,3083,3084,1,0,0,0,3084,3100,1,0,0,0,3085,3089,5,10,0,0,3086,3087,3,
		478,239,0,3087,3088,5,18,0,0,3088,3090,1,0,0,0,3089,3086,1,0,0,0,3089,
		3090,1,0,0,0,3090,3091,1,0,0,0,3091,3092,3,482,241,0,3092,3097,5,11,0,
		0,3093,3094,3,240,120,0,3094,3095,3,484,242,0,3095,3096,3,242,121,0,3096,
		3098,1,0,0,0,3097,3093,1,0,0,0,3097,3098,1,0,0,0,3098,3100,1,0,0,0,3099,
		3072,1,0,0,0,3099,3085,1,0,0,0,3100,471,1,0,0,0,3101,3104,3,410,205,0,
		3102,3104,3,430,215,0,3103,3101,1,0,0,0,3103,3102,1,0,0,0,3104,473,1,0,
		0,0,3105,3106,3,476,238,0,3106,3107,5,18,0,0,3107,3109,1,0,0,0,3108,3105,
		1,0,0,0,3108,3109,1,0,0,0,3109,3110,1,0,0,0,3110,3111,3,480,240,0,3111,
		475,1,0,0,0,3112,3113,3,1268,634,0,3113,477,1,0,0,0,3114,3115,3,528,264,
		0,3115,479,1,0,0,0,3116,3117,3,1268,634,0,3117,481,1,0,0,0,3118,3119,3,
		528,264,0,3119,483,1,0,0,0,3120,3121,3,996,498,0,3121,3122,5,8,0,0,3122,
		3124,1,0,0,0,3123,3120,1,0,0,0,3123,3124,1,0,0,0,3124,3128,1,0,0,0,3125,
		3126,3,476,238,0,3126,3127,5,18,0,0,3127,3129,1,0,0,0,3128,3125,1,0,0,
		0,3128,3129,1,0,0,0,3129,3130,1,0,0,0,3130,3131,5,12,0,0,3131,485,1,0,
		0,0,3132,3133,3,476,238,0,3133,3134,5,18,0,0,3134,3136,1,0,0,0,3135,3132,
		1,0,0,0,3135,3136,1,0,0,0,3136,3137,1,0,0,0,3137,3138,3,480,240,0,3138,
		487,1,0,0,0,3139,3140,5,167,0,0,3140,3141,5,10,0,0,3141,3142,3,1118,559,
		0,3142,3143,5,11,0,0,3143,489,1,0,0,0,3144,3148,3,410,205,0,3145,3148,
		3,430,215,0,3146,3148,3,372,186,0,3147,3144,1,0,0,0,3147,3145,1,0,0,0,
		3147,3146,1,0,0,0,3148,491,1,0,0,0,3149,3150,5,138,0,0,3150,3151,5,10,
		0,0,3151,3154,3,998,499,0,3152,3153,5,8,0,0,3153,3155,3,1048,524,0,3154,
		3152,1,0,0,0,3154,3155,1,0,0,0,3155,3156,1,0,0,0,3156,3157,5,11,0,0,3157,
		493,1,0,0,0,3158,3159,5,83,0,0,3159,3160,5,50,0,0,3160,3165,3,496,248,
		0,3161,3162,5,133,0,0,3162,3163,5,50,0,0,3163,3165,3,466,233,0,3164,3158,
		1,0,0,0,3164,3161,1,0,0,0,3165,495,1,0,0,0,3166,3167,3,1272,636,0,3167,
		497,1,0,0,0,3168,3183,3,56,28,0,3169,3183,3,406,203,0,3170,3183,3,236,
		118,0,3171,3183,3,202,101,0,3172,3183,3,220,110,0,3173,3183,3,232,116,
		0,3174,3183,3,936,468,0,3175,3183,3,436,218,0,3176,3183,3,1296,648,0,3177,
		3178,5,10,0,0,3178,3179,3,522,261,0,3179,3180,5,11,0,0,3180,3183,1,0,0,
		0,3181,3183,3,500,250,0,3182,3168,1,0,0,0,3182,3169,1,0,0,0,3182,3170,
		1,0,0,0,3182,3171,1,0,0,0,3182,3172,1,0,0,0,3182,3173,1,0,0,0,3182,3174,
		1,0,0,0,3182,3175,1,0,0,0,3182,3176,1,0,0,0,3182,3177,1,0,0,0,3182,3181,
		1,0,0,0,3183,499,1,0,0,0,3184,3185,5,10,0,0,3185,3186,3,1274,637,0,3186,
		3187,5,230,0,0,3187,3195,3,522,261,0,3188,3189,5,18,0,0,3189,3190,3,1274,
		637,0,3190,3191,5,230,0,0,3191,3192,3,522,261,0,3192,3194,1,0,0,0,3193,
		3188,1,0,0,0,3194,3197,1,0,0,0,3195,3193,1,0,0,0,3195,3196,1,0,0,0,3196,
		3198,1,0,0,0,3197,3195,1,0,0,0,3198,3199,5,18,0,0,3199,3200,3,522,261,
		0,3200,3201,5,11,0,0,3201,501,1,0,0,0,3202,3204,3,84,42,0,3203,3202,1,
		0,0,0,3203,3204,1,0,0,0,3204,3205,1,0,0,0,3205,3206,3,498,249,0,3206,503,
		1,0,0,0,3207,3211,3,502,251,0,3208,3209,3,64,32,0,3209,3210,3,504,252,
		0,3210,3212,1,0,0,0,3211,3208,1,0,0,0,3211,3212,1,0,0,0,3212,505,1,0,0,
		0,3213,3219,3,504,252,0,3214,3215,3,506,253,0,3215,3216,3,504,252,0,3216,
		3218,1,0,0,0,3217,3214,1,0,0,0,3218,3221,1,0,0,0,3219,3217,1,0,0,0,3219,
		3220,1,0,0,0,3220,507,1,0,0,0,3221,3219,1,0,0,0,3222,3227,3,506,253,0,
		3223,3224,3,68,34,0,3224,3225,3,506,253,0,3225,3227,1,0,0,0,3226,3222,
		1,0,0,0,3226,3223,1,0,0,0,3227,3233,1,0,0,0,3228,3229,3,68,34,0,3229,3230,
		3,506,253,0,3230,3232,1,0,0,0,3231,3228,1,0,0,0,3232,3235,1,0,0,0,3233,
		3231,1,0,0,0,3233,3234,1,0,0,0,3234,509,1,0,0,0,3235,3233,1,0,0,0,3236,
		3242,3,508,254,0,3237,3238,3,70,35,0,3238,3239,3,508,254,0,3239,3241,1,
		0,0,0,3240,3237,1,0,0,0,3241,3244,1,0,0,0,3242,3240,1,0,0,0,3242,3243,
		1,0,0,0,3243,511,1,0,0,0,3244,3242,1,0,0,0,3245,3246,3,510,255,0,3246,
		3247,3,72,36,0,3247,3249,1,0,0,0,3248,3245,1,0,0,0,3248,3249,1,0,0,0,3249,
		3250,1,0,0,0,3250,3251,3,510,255,0,3251,513,1,0,0,0,3252,3254,3,74,37,
		0,3253,3252,1,0,0,0,3253,3254,1,0,0,0,3254,3255,1,0,0,0,3255,3256,3,512,
		256,0,3256,515,1,0,0,0,3257,3263,3,514,257,0,3258,3259,3,76,38,0,3259,
		3260,3,514,257,0,3260,3262,1,0,0,0,3261,3258,1,0,0,0,3262,3265,1,0,0,0,
		3263,3261,1,0,0,0,3263,3264,1,0,0,0,3264,517,1,0,0,0,3265,3263,1,0,0,0,
		3266,3272,3,516,258,0,3267,3268,3,78,39,0,3268,3269,3,516,258,0,3269,3271,
		1,0,0,0,3270,3267,1,0,0,0,3271,3274,1,0,0,0,3272,3270,1,0,0,0,3272,3273,
		1,0,0,0,3273,519,1,0,0,0,3274,3272,1,0,0,0,3275,3281,3,518,259,0,3276,
		3277,3,80,40,0,3277,3278,3,518,259,0,3278,3280,1,0,0,0,3279,3276,1,0,0,
		0,3280,3283,1,0,0,0,3281,3279,1,0,0,0,3281,3282,1,0,0,0,3282,521,1,0,0,
		0,3283,3281,1,0,0,0,3284,3290,3,520,260,0,3285,3286,3,86,43,0,3286,3287,
		3,520,260,0,3287,3289,1,0,0,0,3288,3285,1,0,0,0,3289,3292,1,0,0,0,3290,
		3288,1,0,0,0,3290,3291,1,0,0,0,3291,523,1,0,0,0,3292,3290,1,0,0,0,3293,
		3294,3,522,261,0,3294,525,1,0,0,0,3295,3296,3,522,261,0,3296,527,1,0,0,
		0,3297,3298,3,522,261,0,3298,529,1,0,0,0,3299,3300,3,522,261,0,3300,531,
		1,0,0,0,3301,3302,3,1268,634,0,3302,533,1,0,0,0,3303,3304,3,522,261,0,
		3304,535,1,0,0,0,3305,3306,3,526,263,0,3306,537,1,0,0,0,3307,3308,3,528,
		264,0,3308,539,1,0,0,0,3309,3310,3,408,204,0,3310,3311,5,50,0,0,3311,3312,
		3,522,261,0,3312,541,1,0,0,0,3313,3318,3,544,272,0,3314,3315,5,10,0,0,
		3315,3316,3,1018,509,0,3316,3317,5,11,0,0,3317,3319,1,0,0,0,3318,3314,
		1,0,0,0,3318,3319,1,0,0,0,3319,3320,1,0,0,0,3320,3321,5,21,0,0,3321,3322,
		3,550,275,0,3322,3352,1,0,0,0,3323,3324,3,544,272,0,3324,3325,5,10,0,0,
		3325,3326,3,478,239,0,3326,3327,5,18,0,0,3327,3328,5,11,0,0,3328,3329,
		5,21,0,0,3329,3330,3,550,275,0,3330,3352,1,0,0,0,3331,3332,3,544,272,0,
		3332,3333,5,10,0,0,3333,3334,3,1016,508,0,3334,3335,5,11,0,0,3335,3336,
		5,21,0,0,3336,3337,3,550,275,0,3337,3352,1,0,0,0,3338,3339,3,544,272,0,
		3339,3340,5,10,0,0,3340,3341,3,478,239,0,3341,3342,5,18,0,0,3342,3343,
		3,482,241,0,3343,3344,5,11,0,0,3344,3345,5,21,0,0,3345,3346,3,550,275,
		0,3346,3352,1,0,0,0,3347,3348,3,552,276,0,3348,3349,5,21,0,0,3349,3350,
		3,556,278,0,3350,3352,1,0,0,0,3351,3313,1,0,0,0,3351,3323,1,0,0,0,3351,
		3331,1,0,0,0,3351,3338,1,0,0,0,3351,3347,1,0,0,0,3352,543,1,0,0,0,3353,
		3359,3,410,205,0,3354,3355,3,1284,642,0,3355,3356,5,90,0,0,3356,3357,3,
		1184,592,0,3357,3359,1,0,0,0,3358,3353,1,0,0,0,3358,3354,1,0,0,0,3359,
		545,1,0,0,0,3360,3361,3,476,238,0,3361,3362,5,18,0,0,3362,547,1,0,0,0,
		3363,3364,3,476,238,0,3364,3365,5,18,0,0,3365,3366,3,480,240,0,3366,549,
		1,0,0,0,3367,3368,3,522,261,0,3368,551,1,0,0,0,3369,3372,3,372,186,0,3370,
		3372,3,554,277,0,3371,3369,1,0,0,0,3371,3370,1,0,0,0,3372,553,1,0,0,0,
		3373,3374,3,1284,642,0,3374,3375,5,90,0,0,3375,3376,3,1234,617,0,3376,
		555,1,0,0,0,3377,3381,3,522,261,0,3378,3381,3,1238,619,0,3379,3381,3,554,
		277,0,3380,3377,1,0,0,0,3380,3378,1,0,0,0,3380,3379,1,0,0,0,3381,557,1,
		0,0,0,3382,3383,5,193,0,0,3383,3384,5,10,0,0,3384,3385,3,568,284,0,3385,
		3386,5,11,0,0,3386,3387,3,566,283,0,3387,559,1,0,0,0,3388,3392,3,562,281,
		0,3389,3391,3,564,282,0,3390,3389,1,0,0,0,3391,3394,1,0,0,0,3392,3390,
		1,0,0,0,3392,3393,1,0,0,0,3393,3404,1,0,0,0,3394,3392,1,0,0,0,3395,3399,
		3,570,285,0,3396,3398,3,564,282,0,3397,3396,1,0,0,0,3398,3401,1,0,0,0,
		3399,3397,1,0,0,0,3399,3400,1,0,0,0,3400,3403,1,0,0,0,3401,3399,1,0,0,
		0,3402,3395,1,0,0,0,3403,3406,1,0,0,0,3404,3402,1,0,0,0,3404,3405,1,0,
		0,0,3405,3414,1,0,0,0,3406,3404,1,0,0,0,3407,3411,3,572,286,0,3408,3410,
		3,564,282,0,3409,3408,1,0,0,0,3410,3413,1,0,0,0,3411,3409,1,0,0,0,3411,
		3412,1,0,0,0,3412,3415,1,0,0,0,3413,3411,1,0,0,0,3414,3407,1,0,0,0,3414,
		3415,1,0,0,0,3415,3416,1,0,0,0,3416,3417,3,574,287,0,3417,561,1,0,0,0,
		3418,3419,3,1300,650,0,3419,3420,5,18,0,0,3420,3422,1,0,0,0,3421,3418,
		1,0,0,0,3421,3422,1,0,0,0,3422,3423,1,0,0,0,3423,3424,5,193,0,0,3424,3425,
		5,10,0,0,3425,3426,3,568,284,0,3426,3427,5,11,0,0,3427,563,1,0,0,0,3428,
		3432,3,566,283,0,3429,3432,3,558,279,0,3430,3432,3,560,280,0,3431,3428,
		1,0,0,0,3431,3429,1,0,0,0,3431,3430,1,0,0,0,3432,565,1,0,0,0,3433,3434,
		3,540,270,0,3434,567,1,0,0,0,3435,3436,3,524,262,0,3436,569,1,0,0,0,3437,
		3438,5,212,0,0,3438,3439,5,10,0,0,3439,3440,3,568,284,0,3440,3442,5,11,
		0,0,3441,3443,3,1300,650,0,3442,3441,1,0,0,0,3442,3443,1,0,0,0,3443,571,
		1,0,0,0,3444,3446,5,212,0,0,3445,3447,3,1300,650,0,3446,3445,1,0,0,0,3446,
		3447,1,0,0,0,3447,573,1,0,0,0,3448,3449,5,7,0,0,3449,3451,5,193,0,0,3450,
		3452,3,1300,650,0,3451,3450,1,0,0,0,3451,3452,1,0,0,0,3452,575,1,0,0,0,
		3453,3457,3,578,289,0,3454,3456,3,580,290,0,3455,3454,1,0,0,0,3456,3459,
		1,0,0,0,3457,3455,1,0,0,0,3457,3458,1,0,0,0,3458,3460,1,0,0,0,3459,3457,
		1,0,0,0,3460,3461,3,584,292,0,3461,577,1,0,0,0,3462,3463,3,1202,601,0,
		3463,3464,5,18,0,0,3464,3466,1,0,0,0,3465,3462,1,0,0,0,3465,3466,1,0,0,
		0,3466,3467,1,0,0,0,3467,3468,5,192,0,0,3468,3469,3,636,318,0,3469,579,
		1,0,0,0,3470,3476,3,582,291,0,3471,3476,3,558,279,0,3472,3476,3,560,280,
		0,3473,3476,3,576,288,0,3474,3476,3,586,293,0,3475,3470,1,0,0,0,3475,3471,
		1,0,0,0,3475,3472,1,0,0,0,3475,3473,1,0,0,0,3475,3474,1,0,0,0,3476,581,
		1,0,0,0,3477,3480,3,540,270,0,3478,3480,3,542,271,0,3479,3477,1,0,0,0,
		3479,3478,1,0,0,0,3480,583,1,0,0,0,3481,3482,5,7,0,0,3482,3484,5,192,0,
		0,3483,3485,3,1202,601,0,3484,3483,1,0,0,0,3484,3485,1,0,0,0,3485,585,
		1,0,0,0,3486,3487,5,192,0,0,3487,3488,3,636,318,0,3488,3489,3,582,291,
		0,3489,587,1,0,0,0,3490,3492,3,32,16,0,3491,3490,1,0,0,0,3492,3495,1,0,
		0,0,3493,3491,1,0,0,0,3493,3494,1,0,0,0,3494,589,1,0,0,0,3495,3493,1,0,
		0,0,3496,3497,3,592,296,0,3497,3498,3,588,294,0,3498,3499,3,598,299,0,
		3499,591,1,0,0,0,3500,3501,3,1162,581,0,3501,3502,5,18,0,0,3502,3504,1,
		0,0,0,3503,3500,1,0,0,0,3503,3504,1,0,0,0,3504,3505,1,0,0,0,3505,3506,
		5,211,0,0,3506,3507,5,10,0,0,3507,3508,3,1004,502,0,3508,3509,5,11,0,0,
		3509,593,1,0,0,0,3510,3511,3,1164,582,0,3511,3512,5,21,0,0,3512,3513,3,
		596,298,0,3513,595,1,0,0,0,3514,3517,3,522,261,0,3515,3517,3,408,204,0,
		3516,3514,1,0,0,0,3516,3515,1,0,0,0,3517,597,1,0,0,0,3518,3519,5,7,0,0,
		3519,3521,5,211,0,0,3520,3522,3,1162,581,0,3521,3520,1,0,0,0,3521,3522,
		1,0,0,0,3522,599,1,0,0,0,3523,3525,3,602,301,0,3524,3526,3,604,302,0,3525,
		3524,1,0,0,0,3525,3526,1,0,0,0,3526,3527,1,0,0,0,3527,3528,3,588,294,0,
		3528,3529,3,606,303,0,3529,601,1,0,0,0,3530,3531,3,1168,584,0,3531,3532,
		5,18,0,0,3532,3534,1,0,0,0,3533,3530,1,0,0,0,3533,3534,1,0,0,0,3534,3535,
		1,0,0,0,3535,3536,5,16,0,0,3536,603,1,0,0,0,3537,3539,3,874,437,0,3538,
		3537,1,0,0,0,3539,3542,1,0,0,0,3540,3538,1,0,0,0,3540,3541,1,0,0,0,3541,
		3546,1,0,0,0,3542,3540,1,0,0,0,3543,3545,3,390,195,0,3544,3543,1,0,0,0,
		3545,3548,1,0,0,0,3546,3544,1,0,0,0,3546,3547,1,0,0,0,3547,3552,1,0,0,
		0,3548,3546,1,0,0,0,3549,3551,3,26,13,0,3550,3549,1,0,0,0,3551,3554,1,
		0,0,0,3552,3550,1,0,0,0,3552,3553,1,0,0,0,3553,605,1,0,0,0,3554,3552,1,
		0,0,0,3555,3556,5,7,0,0,3556,3558,5,16,0,0,3557,3559,3,1168,584,0,3558,
		3557,1,0,0,0,3558,3559,1,0,0,0,3559,607,1,0,0,0,3560,3561,3,610,305,0,
		3561,3562,3,588,294,0,3562,3563,3,614,307,0,3563,609,1,0,0,0,3564,3565,
		3,1292,646,0,3565,3566,5,18,0,0,3566,3568,1,0,0,0,3567,3564,1,0,0,0,3567,
		3568,1,0,0,0,3568,3569,1,0,0,0,3569,3570,5,207,0,0,3570,3571,5,84,0,0,
		3571,3572,5,10,0,0,3572,3575,3,616,308,0,3573,3574,5,8,0,0,3574,3576,3,
		1024,512,0,3575,3573,1,0,0,0,3575,3576,1,0,0,0,3576,3579,1,0,0,0,3577,
		3578,5,8,0,0,3578,3580,3,1134,567,0,3579,3577,1,0,0,0,3579,3580,1,0,0,
		0,3580,3581,1,0,0,0,3581,3582,5,11,0,0,3582,611,1,0,0,0,3583,3584,3,326,
		163,0,3584,3585,5,21,0,0,3585,3586,3,596,298,0,3586,613,1,0,0,0,3587,3588,
		5,7,0,0,3588,3594,5,84,0,0,3589,3591,5,10,0,0,3590,3592,3,1134,567,0,3591,
		3590,1,0,0,0,3591,3592,1,0,0,0,3592,3593,1,0,0,0,3593,3595,5,11,0,0,3594,
		3589,1,0,0,0,3594,3595,1,0,0,0,3595,3597,1,0,0,0,3596,3598,3,1292,646,
		0,3597,3596,1,0,0,0,3597,3598,1,0,0,0,3598,615,1,0,0,0,3599,3600,3,1258,
		629,0,3600,617,1,0,0,0,3601,3602,3,620,310,0,3602,3603,3,588,294,0,3603,
		3604,3,622,311,0,3604,619,1,0,0,0,3605,3606,3,1182,591,0,3606,3607,5,18,
		0,0,3607,3609,1,0,0,0,3608,3605,1,0,0,0,3608,3609,1,0,0,0,3609,3610,1,
		0,0,0,3610,3616,5,206,0,0,3611,3613,5,10,0,0,3612,3614,3,1134,567,0,3613,
		3612,1,0,0,0,3613,3614,1,0,0,0,3614,3615,1,0,0,0,3615,3617,5,11,0,0,3616,
		3611,1,0,0,0,3616,3617,1,0,0,0,3617,621,1,0,0,0,3618,3619,5,7,0,0,3619,
		3621,5,206,0,0,3620,3622,3,1182,591,0,3621,3620,1,0,0,0,3621,3622,1,0,
		0,0,3622,623,1,0,0,0,3623,3624,3,626,313,0,3624,3625,3,588,294,0,3625,
		3626,3,652,326,0,3626,625,1,0,0,0,3627,3630,3,630,315,0,3628,3630,3,628,
		314,0,3629,3627,1,0,0,0,3629,3628,1,0,0,0,3630,627,1,0,0,0,3631,3632,3,
		1186,593,0,3632,3633,5,18,0,0,3633,3635,1,0,0,0,3634,3631,1,0,0,0,3634,
		3635,1,0,0,0,3635,3636,1,0,0,0,3636,3637,5,217,0,0,3637,3639,3,90,45,0,
		3638,3640,3,632,316,0,3639,3638,1,0,0,0,3639,3640,1,0,0,0,3640,629,1,0,
		0,0,3641,3642,3,1186,593,0,3642,3643,5,18,0,0,3643,3645,1,0,0,0,3644,3641,
		1,0,0,0,3644,3645,1,0,0,0,3645,3646,1,0,0,0,3646,3648,5,217,0,0,3647,3649,
		3,632,316,0,3648,3647,1,0,0,0,3648,3649,1,0,0,0,3649,631,1,0,0,0,3650,
		3652,5,8,0,0,3651,3650,1,0,0,0,3651,3652,1,0,0,0,3652,3653,1,0,0,0,3653,
		3654,3,634,317,0,3654,3655,5,50,0,0,3655,3656,3,1268,634,0,3656,3657,5,
		8,0,0,3657,3660,3,1268,634,0,3658,3659,5,8,0,0,3659,3661,3,1268,634,0,
		3660,3658,1,0,0,0,3660,3661,1,0,0,0,3661,3678,1,0,0,0,3662,3664,5,8,0,
		0,3663,3662,1,0,0,0,3663,3664,1,0,0,0,3664,3665,1,0,0,0,3665,3666,5,219,
		0,0,3666,3667,5,10,0,0,3667,3668,3,1274,637,0,3668,3669,5,11,0,0,3669,
		3678,1,0,0,0,3670,3672,5,8,0,0,3671,3670,1,0,0,0,3671,3672,1,0,0,0,3672,
		3673,1,0,0,0,3673,3674,5,218,0,0,3674,3675,3,636,318,0,3675,3676,3,644,
		322,0,3676,3678,1,0,0,0,3677,3651,1,0,0,0,3677,3663,1,0,0,0,3677,3671,
		1,0,0,0,3678,633,1,0,0,0,3679,3680,3,1270,635,0,3680,635,1,0,0,0,3681,
		3685,5,10,0,0,3682,3683,3,100,50,0,3683,3684,5,52,0,0,3684,3686,1,0,0,
		0,3685,3682,1,0,0,0,3685,3686,1,0,0,0,3686,3687,1,0,0,0,3687,3690,3,1036,
		518,0,3688,3689,5,8,0,0,3689,3691,3,1278,639,0,3690,3688,1,0,0,0,3690,
		3691,1,0,0,0,3691,3692,1,0,0,0,3692,3693,5,11,0,0,3693,637,1,0,0,0,3694,
		3695,3,1214,607,0,3695,3696,5,50,0,0,3696,3697,3,640,320,0,3697,3698,5,
		18,0,0,3698,3701,3,640,320,0,3699,3700,5,18,0,0,3700,3702,3,642,321,0,
		3701,3699,1,0,0,0,3701,3702,1,0,0,0,3702,639,1,0,0,0,3703,3704,3,1268,
		634,0,3704,641,1,0,0,0,3705,3706,3,1268,634,0,3706,643,1,0,0,0,3707,3709,
		3,646,323,0,3708,3707,1,0,0,0,3709,3712,1,0,0,0,3710,3708,1,0,0,0,3710,
		3711,1,0,0,0,3711,645,1,0,0,0,3712,3710,1,0,0,0,3713,3714,5,221,0,0,3714,
		3715,5,10,0,0,3715,3716,3,1150,575,0,3716,3717,5,11,0,0,3717,3740,1,0,
		0,0,3718,3719,5,222,0,0,3719,3720,5,10,0,0,3720,3721,3,1150,575,0,3721,
		3722,5,11,0,0,3722,3740,1,0,0,0,3723,3724,5,237,0,0,3724,3725,5,10,0,0,
		3725,3726,3,648,324,0,3726,3727,5,18,0,0,3727,3728,3,1150,575,0,3728,3729,
		5,11,0,0,3729,3740,1,0,0,0,3730,3731,5,220,0,0,3731,3732,5,10,0,0,3732,
		3733,3,1150,575,0,3733,3734,5,11,0,0,3734,3740,1,0,0,0,3735,3736,5,210,
		0,0,3736,3737,5,10,0,0,3737,3738,5,55,0,0,3738,3740,5,11,0,0,3739,3713,
		1,0,0,0,3739,3718,1,0,0,0,3739,3723,1,0,0,0,3739,3730,1,0,0,0,3739,3735,
		1,0,0,0,3740,647,1,0,0,0,3741,3744,3,650,325,0,3742,3744,3,1206,603,0,
		3743,3741,1,0,0,0,3743,3742,1,0,0,0,3744,649,1,0,0,0,3745,3746,7,11,0,
		0,3746,651,1,0,0,0,3747,3750,3,654,327,0,3748,3750,3,708,354,0,3749,3747,
		1,0,0,0,3749,3748,1,0,0,0,3750,653,1,0,0,0,3751,3752,5,7,0,0,3752,3754,
		5,217,0,0,3753,3755,3,1186,593,0,3754,3753,1,0,0,0,3754,3755,1,0,0,0,3755,
		655,1,0,0,0,3756,3758,5,139,0,0,3757,3759,3,1186,593,0,3758,3757,1,0,0,
		0,3758,3759,1,0,0,0,3759,657,1,0,0,0,3760,3761,3,660,330,0,3761,3767,3,
		588,294,0,3762,3763,3,662,331,0,3763,3764,3,588,294,0,3764,3766,1,0,0,
		0,3765,3762,1,0,0,0,3766,3769,1,0,0,0,3767,3765,1,0,0,0,3767,3768,1,0,
		0,0,3768,3773,1,0,0,0,3769,3767,1,0,0,0,3770,3771,3,664,332,0,3771,3772,
		3,588,294,0,3772,3774,1,0,0,0,3773,3770,1,0,0,0,3773,3774,1,0,0,0,3774,
		3775,1,0,0,0,3775,3776,3,666,333,0,3776,659,1,0,0,0,3777,3778,3,1210,605,
		0,3778,3779,5,18,0,0,3779,3781,1,0,0,0,3780,3777,1,0,0,0,3780,3781,1,0,
		0,0,3781,3782,1,0,0,0,3782,3783,5,184,0,0,3783,3784,5,10,0,0,3784,3785,
		3,1274,637,0,3785,3786,5,11,0,0,3786,3787,5,216,0,0,3787,661,1,0,0,0,3788,
		3789,5,215,0,0,3789,3790,5,184,0,0,3790,3791,5,10,0,0,3791,3792,3,1274,
		637,0,3792,3793,5,11,0,0,3793,3795,5,216,0,0,3794,3796,3,1210,605,0,3795,
		3794,1,0,0,0,3795,3796,1,0,0,0,3796,663,1,0,0,0,3797,3799,5,215,0,0,3798,
		3800,3,1210,605,0,3799,3798,1,0,0,0,3799,3800,1,0,0,0,3800,665,1,0,0,0,
		3801,3802,5,7,0,0,3802,3804,5,184,0,0,3803,3805,3,1210,605,0,3804,3803,
		1,0,0,0,3804,3805,1,0,0,0,3805,667,1,0,0,0,3806,3807,5,184,0,0,3807,3808,
		5,10,0,0,3808,3809,3,1274,637,0,3809,3810,5,11,0,0,3810,3811,3,48,24,0,
		3811,669,1,0,0,0,3812,3818,3,672,336,0,3813,3814,3,674,337,0,3814,3815,
		3,588,294,0,3815,3817,1,0,0,0,3816,3813,1,0,0,0,3817,3820,1,0,0,0,3818,
		3816,1,0,0,0,3818,3819,1,0,0,0,3819,3821,1,0,0,0,3820,3818,1,0,0,0,3821,
		3822,3,676,338,0,3822,671,1,0,0,0,3823,3824,3,1172,586,0,3824,3825,5,18,
		0,0,3825,3827,1,0,0,0,3826,3823,1,0,0,0,3826,3827,1,0,0,0,3827,3828,1,
		0,0,0,3828,3829,5,208,0,0,3829,3830,5,209,0,0,3830,3831,5,10,0,0,3831,
		3832,3,678,339,0,3832,3833,5,11,0,0,3833,673,1,0,0,0,3834,3835,5,209,0,
		0,3835,3837,3,680,340,0,3836,3838,3,1172,586,0,3837,3836,1,0,0,0,3837,
		3838,1,0,0,0,3838,675,1,0,0,0,3839,3840,5,7,0,0,3840,3842,5,208,0,0,3841,
		3843,3,1172,586,0,3842,3841,1,0,0,0,3842,3843,1,0,0,0,3843,677,1,0,0,0,
		3844,3845,3,1258,629,0,3845,679,1,0,0,0,3846,3847,5,10,0,0,3847,3848,3,
		1020,510,0,3848,3849,5,11,0,0,3849,3852,1,0,0,0,3850,3852,5,210,0,0,3851,
		3846,1,0,0,0,3851,3850,1,0,0,0,3852,681,1,0,0,0,3853,3864,3,684,342,0,
		3854,3855,3,684,342,0,3855,3856,5,18,0,0,3856,3864,1,0,0,0,3857,3858,5,
		18,0,0,3858,3864,3,684,342,0,3859,3860,3,684,342,0,3860,3861,5,18,0,0,
		3861,3862,3,684,342,0,3862,3864,1,0,0,0,3863,3853,1,0,0,0,3863,3854,1,
		0,0,0,3863,3857,1,0,0,0,3863,3859,1,0,0,0,3864,683,1,0,0,0,3865,3866,3,
		1246,623,0,3866,685,1,0,0,0,3867,3873,3,688,344,0,3868,3869,3,690,345,
		0,3869,3870,3,588,294,0,3870,3872,1,0,0,0,3871,3868,1,0,0,0,3872,3875,
		1,0,0,0,3873,3871,1,0,0,0,3873,3874,1,0,0,0,3874,3876,1,0,0,0,3875,3873,
		1,0,0,0,3876,3877,3,692,346,0,3877,687,1,0,0,0,3878,3879,3,1286,643,0,
		3879,3880,5,18,0,0,3880,3882,1,0,0,0,3881,3878,1,0,0,0,3881,3882,1,0,0,
		0,3882,3883,1,0,0,0,3883,3884,5,208,0,0,3884,3885,5,214,0,0,3885,3889,
		5,10,0,0,3886,3887,3,1164,582,0,3887,3888,5,21,0,0,3888,3890,1,0,0,0,3889,
		3886,1,0,0,0,3889,3890,1,0,0,0,3890,3891,1,0,0,0,3891,3892,3,596,298,0,
		3892,3893,5,11,0,0,3893,689,1,0,0,0,3894,3895,5,214,0,0,3895,3896,5,10,
		0,0,3896,3897,3,1260,630,0,3897,3899,5,11,0,0,3898,3900,3,1286,643,0,3899,
		3898,1,0,0,0,3899,3900,1,0,0,0,3900,3914,1,0,0,0,3901,3902,5,214,0,0,3902,
		3903,5,10,0,0,3903,3904,5,12,0,0,3904,3906,5,11,0,0,3905,3907,3,1286,643,
		0,3906,3905,1,0,0,0,3906,3907,1,0,0,0,3907,3914,1,0,0,0,3908,3909,5,214,
		0,0,3909,3911,5,210,0,0,3910,3912,3,1286,643,0,3911,3910,1,0,0,0,3911,
		3912,1,0,0,0,3912,3914,1,0,0,0,3913,3894,1,0,0,0,3913,3901,1,0,0,0,3913,
		3908,1,0,0,0,3914,691,1,0,0,0,3915,3916,5,7,0,0,3916,3918,5,208,0,0,3917,
		3919,3,1286,643,0,3918,3917,1,0,0,0,3918,3919,1,0,0,0,3919,693,1,0,0,0,
		3920,3926,3,696,348,0,3921,3922,3,698,349,0,3922,3923,3,588,294,0,3923,
		3925,1,0,0,0,3924,3921,1,0,0,0,3925,3928,1,0,0,0,3926,3924,1,0,0,0,3926,
		3927,1,0,0,0,3927,3929,1,0,0,0,3928,3926,1,0,0,0,3929,3930,3,700,350,0,
		3930,695,1,0,0,0,3931,3932,3,1286,643,0,3932,3933,5,18,0,0,3933,3935,1,
		0,0,0,3934,3931,1,0,0,0,3934,3935,1,0,0,0,3935,3936,1,0,0,0,3936,3937,
		5,208,0,0,3937,3938,5,66,0,0,3938,3942,5,10,0,0,3939,3940,3,1164,582,0,
		3940,3941,5,21,0,0,3941,3943,1,0,0,0,3942,3939,1,0,0,0,3942,3943,1,0,0,
		0,3943,3944,1,0,0,0,3944,3945,3,596,298,0,3945,3946,5,11,0,0,3946,697,
		1,0,0,0,3947,3948,5,66,0,0,3948,3949,5,213,0,0,3949,3950,5,10,0,0,3950,
		3951,3,94,47,0,3951,3953,5,11,0,0,3952,3954,3,1286,643,0,3953,3952,1,0,
		0,0,3953,3954,1,0,0,0,3954,3969,1,0,0,0,3955,3956,5,67,0,0,3956,3957,5,
		213,0,0,3957,3958,5,10,0,0,3958,3959,3,198,99,0,3959,3961,5,11,0,0,3960,
		3962,3,1286,643,0,3961,3960,1,0,0,0,3961,3962,1,0,0,0,3962,3969,1,0,0,
		0,3963,3964,5,67,0,0,3964,3966,5,210,0,0,3965,3967,3,1286,643,0,3966,3965,
		1,0,0,0,3966,3967,1,0,0,0,3967,3969,1,0,0,0,3968,3947,1,0,0,0,3968,3955,
		1,0,0,0,3968,3963,1,0,0,0,3969,699,1,0,0,0,3970,3971,5,7,0,0,3971,3973,
		5,208,0,0,3972,3974,3,1286,643,0,3973,3972,1,0,0,0,3973,3974,1,0,0,0,3974,
		701,1,0,0,0,3975,3977,5,191,0,0,3976,3978,3,1180,590,0,3977,3976,1,0,0,
		0,3977,3978,1,0,0,0,3978,703,1,0,0,0,3979,3980,5,185,0,0,3980,3981,5,186,
		0,0,3981,3982,3,90,45,0,3982,705,1,0,0,0,3983,3984,5,185,0,0,3984,3985,
		5,186,0,0,3985,3986,5,10,0,0,3986,3987,3,1100,550,0,3987,3989,5,11,0,0,
		3988,3990,5,8,0,0,3989,3988,1,0,0,0,3989,3990,1,0,0,0,3990,3991,1,0,0,
		0,3991,3992,3,1268,634,0,3992,707,1,0,0,0,3993,3994,5,140,0,0,3994,709,
		1,0,0,0,3995,3997,5,135,0,0,3996,3998,3,714,357,0,3997,3996,1,0,0,0,3997,
		3998,1,0,0,0,3998,4003,1,0,0,0,3999,4000,5,8,0,0,4000,4001,5,136,0,0,4001,
		4002,5,50,0,0,4002,4004,3,1274,637,0,4003,3999,1,0,0,0,4003,4004,1,0,0,
		0,4004,711,1,0,0,0,4005,4006,5,134,0,0,4006,4008,5,135,0,0,4007,4009,3,
		714,357,0,4008,4007,1,0,0,0,4008,4009,1,0,0,0,4009,4014,1,0,0,0,4010,4011,
		5,8,0,0,4011,4012,5,136,0,0,4012,4013,5,50,0,0,4013,4015,3,1274,637,0,
		4014,4010,1,0,0,0,4014,4015,1,0,0,0,4015,713,1,0,0,0,4016,4019,3,1254,
		627,0,4017,4019,3,1268,634,0,4018,4016,1,0,0,0,4018,4017,1,0,0,0,4019,
		715,1,0,0,0,4020,4021,5,189,0,0,4021,4022,5,190,0,0,4022,717,1,0,0,0,4023,
		4024,5,231,0,0,4024,4025,5,130,0,0,4025,4026,5,10,0,0,4026,4029,3,720,
		360,0,4027,4028,5,8,0,0,4028,4030,3,1070,535,0,4029,4027,1,0,0,0,4029,
		4030,1,0,0,0,4030,4031,1,0,0,0,4031,4032,5,11,0,0,4032,719,1,0,0,0,4033,
		4034,3,1284,642,0,4034,721,1,0,0,0,4035,4036,5,196,0,0,4036,4042,5,56,
		0,0,4037,4039,5,10,0,0,4038,4040,3,1134,567,0,4039,4038,1,0,0,0,4039,4040,
		1,0,0,0,4040,4041,1,0,0,0,4041,4043,5,11,0,0,4042,4037,1,0,0,0,4042,4043,
		1,0,0,0,4043,723,1,0,0,0,4044,4045,5,83,0,0,4045,4046,5,50,0,0,4046,4051,
		3,496,248,0,4047,4048,5,133,0,0,4048,4049,5,50,0,0,4049,4051,3,466,233,
		0,4050,4044,1,0,0,0,4050,4047,1,0,0,0,4051,725,1,0,0,0,4052,4053,5,196,
		0,0,4053,4054,5,198,0,0,4054,4055,5,10,0,0,4055,4058,3,728,364,0,4056,
		4057,5,8,0,0,4057,4059,3,1134,567,0,4058,4056,1,0,0,0,4058,4059,1,0,0,
		0,4059,4060,1,0,0,0,4060,4061,5,11,0,0,4061,727,1,0,0,0,4062,4065,3,528,
		264,0,4063,4065,5,12,0,0,4064,4062,1,0,0,0,4064,4063,1,0,0,0,4065,729,
		1,0,0,0,4066,4067,5,196,0,0,4067,4073,5,197,0,0,4068,4070,5,10,0,0,4069,
		4071,3,1134,567,0,4070,4069,1,0,0,0,4070,4071,1,0,0,0,4071,4072,1,0,0,
		0,4072,4074,5,11,0,0,4073,4068,1,0,0,0,4073,4074,1,0,0,0,4074,731,1,0,
		0,0,4075,4076,5,196,0,0,4076,4077,5,84,0,0,4077,4078,5,10,0,0,4078,4081,
		3,616,308,0,4079,4080,5,8,0,0,4080,4082,3,1134,567,0,4081,4079,1,0,0,0,
		4081,4082,1,0,0,0,4082,4083,1,0,0,0,4083,4084,5,11,0,0,4084,733,1,0,0,
		0,4085,4086,5,129,0,0,4086,4087,5,132,0,0,4087,4088,5,10,0,0,4088,4091,
		3,736,368,0,4089,4090,5,8,0,0,4090,4092,3,1134,567,0,4091,4089,1,0,0,0,
		4091,4092,1,0,0,0,4092,4093,1,0,0,0,4093,4094,5,11,0,0,4094,735,1,0,0,
		0,4095,4096,3,1284,642,0,4096,737,1,0,0,0,4097,4098,5,129,0,0,4098,4099,
		5,130,0,0,4099,4100,5,10,0,0,4100,4103,3,736,368,0,4101,4102,5,8,0,0,4102,
		4104,3,1070,535,0,4103,4101,1,0,0,0,4103,4104,1,0,0,0,4104,4105,1,0,0,
		0,4105,4106,5,11,0,0,4106,739,1,0,0,0,4107,4110,3,742,371,0,4108,4110,
		3,724,362,0,4109,4107,1,0,0,0,4109,4108,1,0,0,0,4110,741,1,0,0,0,4111,
		4112,5,131,0,0,4112,4113,5,50,0,0,4113,4114,3,1268,634,0,4114,743,1,0,
		0,0,4115,4116,5,160,0,0,4116,4117,5,84,0,0,4117,4118,5,10,0,0,4118,4119,
		3,746,373,0,4119,4120,5,8,0,0,4120,4123,3,748,374,0,4121,4122,5,8,0,0,
		4122,4124,3,1080,540,0,4123,4121,1,0,0,0,4123,4124,1,0,0,0,4124,4125,1,
		0,0,0,4125,4126,5,11,0,0,4126,745,1,0,0,0,4127,4128,3,1268,634,0,4128,
		747,1,0,0,0,4129,4130,3,1284,642,0,4130,749,1,0,0,0,4131,4132,5,187,0,
		0,4132,4133,5,50,0,0,4133,4136,3,1268,634,0,4134,4136,3,724,362,0,4135,
		4131,1,0,0,0,4135,4134,1,0,0,0,4136,751,1,0,0,0,4137,4138,5,168,0,0,4138,
		4139,5,10,0,0,4139,4142,3,758,379,0,4140,4141,5,8,0,0,4141,4143,3,1104,
		552,0,4142,4140,1,0,0,0,4142,4143,1,0,0,0,4143,4144,1,0,0,0,4144,4145,
		5,11,0,0,4145,753,1,0,0,0,4146,4147,5,169,0,0,4147,4148,5,50,0,0,4148,
		4151,3,1276,638,0,4149,4151,3,724,362,0,4150,4146,1,0,0,0,4150,4149,1,
		0,0,0,4151,755,1,0,0,0,4152,4153,5,195,0,0,4153,4154,5,10,0,0,4154,4157,
		3,758,379,0,4155,4156,5,8,0,0,4156,4158,3,1134,567,0,4157,4155,1,0,0,0,
		4157,4158,1,0,0,0,4158,4159,1,0,0,0,4159,4160,5,11,0,0,4160,757,1,0,0,
		0,4161,4162,3,1284,642,0,4162,759,1,0,0,0,4163,4167,3,762,381,0,4164,4167,
		5,12,0,0,4165,4167,3,764,382,0,4166,4163,1,0,0,0,4166,4164,1,0,0,0,4166,
		4165,1,0,0,0,4167,761,1,0,0,0,4168,4169,3,1268,634,0,4169,763,1,0,0,0,
		4170,4171,3,414,207,0,4171,765,1,0,0,0,4172,4173,5,152,0,0,4173,4174,5,
		10,0,0,4174,4175,3,1038,519,0,4175,4176,5,11,0,0,4176,767,1,0,0,0,4177,
		4178,5,142,0,0,4178,4180,5,50,0,0,4179,4177,1,0,0,0,4179,4180,1,0,0,0,
		4180,4181,1,0,0,0,4181,4243,3,762,381,0,4182,4183,5,153,0,0,4183,4184,
		5,50,0,0,4184,4243,3,1254,627,0,4185,4186,5,154,0,0,4186,4187,5,50,0,0,
		4187,4243,3,1254,627,0,4188,4189,5,121,0,0,4189,4190,5,50,0,0,4190,4243,
		3,1254,627,0,4191,4192,5,155,0,0,4192,4193,5,50,0,0,4193,4243,3,1254,627,
		0,4194,4195,5,156,0,0,4195,4196,5,50,0,0,4196,4243,3,1254,627,0,4197,4198,
		5,157,0,0,4198,4199,5,50,0,0,4199,4243,3,1254,627,0,4200,4201,5,158,0,
		0,4201,4202,5,50,0,0,4202,4243,3,1254,627,0,4203,4204,5,145,0,0,4204,4205,
		5,50,0,0,4205,4243,3,90,45,0,4206,4207,5,159,0,0,4207,4208,5,50,0,0,4208,
		4243,3,770,385,0,4209,4210,5,160,0,0,4210,4211,5,50,0,0,4211,4243,3,1254,
		627,0,4212,4213,5,144,0,0,4213,4214,5,50,0,0,4214,4243,3,772,386,0,4215,
		4216,5,143,0,0,4216,4217,5,50,0,0,4217,4243,3,496,248,0,4218,4219,5,236,
		0,0,4219,4220,5,50,0,0,4220,4243,3,1254,627,0,4221,4222,5,161,0,0,4222,
		4223,5,50,0,0,4223,4243,3,1272,636,0,4224,4225,5,162,0,0,4225,4226,5,50,
		0,0,4226,4243,3,1254,627,0,4227,4228,5,163,0,0,4228,4229,5,50,0,0,4229,
		4243,3,1254,627,0,4230,4231,5,164,0,0,4231,4232,5,50,0,0,4232,4243,3,1268,
		634,0,4233,4234,5,165,0,0,4234,4235,5,50,0,0,4235,4243,3,1254,627,0,4236,
		4237,5,166,0,0,4237,4238,5,50,0,0,4238,4243,3,1254,627,0,4239,4240,5,146,
		0,0,4240,4241,5,50,0,0,4241,4243,3,1254,627,0,4242,4179,1,0,0,0,4242,4182,
		1,0,0,0,4242,4185,1,0,0,0,4242,4188,1,0,0,0,4242,4191,1,0,0,0,4242,4194,
		1,0,0,0,4242,4197,1,0,0,0,4242,4200,1,0,0,0,4242,4203,1,0,0,0,4242,4206,
		1,0,0,0,4242,4209,1,0,0,0,4242,4212,1,0,0,0,4242,4215,1,0,0,0,4242,4218,
		1,0,0,0,4242,4221,1,0,0,0,4242,4224,1,0,0,0,4242,4227,1,0,0,0,4242,4230,
		1,0,0,0,4242,4233,1,0,0,0,4242,4236,1,0,0,0,4242,4239,1,0,0,0,4243,769,
		1,0,0,0,4244,4245,3,1254,627,0,4245,771,1,0,0,0,4246,4247,3,1256,628,0,
		4247,773,1,0,0,0,4248,4249,5,141,0,0,4249,4250,5,10,0,0,4250,4251,3,1022,
		511,0,4251,4252,5,11,0,0,4252,775,1,0,0,0,4253,4254,5,142,0,0,4254,4256,
		5,50,0,0,4255,4253,1,0,0,0,4255,4256,1,0,0,0,4256,4257,1,0,0,0,4257,4271,
		3,762,381,0,4258,4259,5,143,0,0,4259,4260,5,50,0,0,4260,4271,3,496,248,
		0,4261,4262,5,144,0,0,4262,4263,5,50,0,0,4263,4271,3,772,386,0,4264,4265,
		5,145,0,0,4265,4266,5,50,0,0,4266,4271,3,90,45,0,4267,4268,5,146,0,0,4268,
		4269,5,50,0,0,4269,4271,3,1254,627,0,4270,4255,1,0,0,0,4270,4258,1,0,0,
		0,4270,4261,1,0,0,0,4270,4264,1,0,0,0,4270,4267,1,0,0,0,4271,777,1,0,0,
		0,4272,4273,5,45,0,0,4273,4274,5,10,0,0,4274,4275,3,1096,548,0,4275,4277,
		5,11,0,0,4276,4278,3,1090,545,0,4277,4276,1,0,0,0,4277,4278,1,0,0,0,4278,
		4286,1,0,0,0,4279,4280,5,45,0,0,4280,4283,3,788,394,0,4281,4282,5,8,0,
		0,4282,4284,3,1090,545,0,4283,4281,1,0,0,0,4283,4284,1,0,0,0,4284,4286,
		1,0,0,0,4285,4272,1,0,0,0,4285,4279,1,0,0,0,4286,779,1,0,0,0,4287,4288,
		5,48,0,0,4288,4289,5,10,0,0,4289,4290,3,1096,548,0,4290,4292,5,11,0,0,
		4291,4293,3,1114,557,0,4292,4291,1,0,0,0,4292,4293,1,0,0,0,4293,781,1,
		0,0,0,4294,4295,5,205,0,0,4295,4298,3,788,394,0,4296,4297,5,8,0,0,4297,
		4299,3,1114,557,0,4298,4296,1,0,0,0,4298,4299,1,0,0,0,4299,783,1,0,0,0,
		4300,4301,5,142,0,0,4301,4303,5,50,0,0,4302,4300,1,0,0,0,4302,4303,1,0,
		0,0,4303,4304,1,0,0,0,4304,4370,3,760,380,0,4305,4306,5,201,0,0,4306,4308,
		5,50,0,0,4307,4305,1,0,0,0,4307,4308,1,0,0,0,4308,4309,1,0,0,0,4309,4370,
		3,788,394,0,4310,4311,5,202,0,0,4311,4313,5,50,0,0,4312,4310,1,0,0,0,4312,
		4313,1,0,0,0,4313,4314,1,0,0,0,4314,4370,3,1226,613,0,4315,4316,5,203,
		0,0,4316,4317,5,50,0,0,4317,4370,3,1254,627,0,4318,4319,5,121,0,0,4319,
		4320,5,50,0,0,4320,4370,3,1252,626,0,4321,4322,5,155,0,0,4322,4323,5,50,
		0,0,4323,4370,3,1254,627,0,4324,4325,5,156,0,0,4325,4326,5,50,0,0,4326,
		4370,3,1254,627,0,4327,4328,5,157,0,0,4328,4329,5,50,0,0,4329,4370,3,1254,
		627,0,4330,4331,5,7,0,0,4331,4332,5,50,0,0,4332,4370,3,90,45,0,4333,4334,
		5,194,0,0,4334,4335,5,50,0,0,4335,4370,3,90,45,0,4336,4337,5,145,0,0,4337,
		4338,5,50,0,0,4338,4370,3,90,45,0,4339,4340,5,173,0,0,4340,4341,5,50,0,
		0,4341,4370,3,786,393,0,4342,4343,5,144,0,0,4343,4344,5,50,0,0,4344,4370,
		3,772,386,0,4345,4346,5,143,0,0,4346,4347,5,50,0,0,4347,4370,3,496,248,
		0,4348,4349,5,236,0,0,4349,4350,5,50,0,0,4350,4370,3,1254,627,0,4351,4352,
		5,162,0,0,4352,4353,5,50,0,0,4353,4370,3,1254,627,0,4354,4355,5,179,0,
		0,4355,4356,5,50,0,0,4356,4370,3,1268,634,0,4357,4358,5,204,0,0,4358,4359,
		5,50,0,0,4359,4370,3,1268,634,0,4360,4361,5,165,0,0,4361,4362,5,50,0,0,
		4362,4370,3,1254,627,0,4363,4364,5,166,0,0,4364,4365,5,50,0,0,4365,4370,
		3,1254,627,0,4366,4367,5,182,0,0,4367,4368,5,50,0,0,4368,4370,3,1272,636,
		0,4369,4302,1,0,0,0,4369,4307,1,0,0,0,4369,4312,1,0,0,0,4369,4315,1,0,
		0,0,4369,4318,1,0,0,0,4369,4321,1,0,0,0,4369,4324,1,0,0,0,4369,4327,1,
		0,0,0,4369,4330,1,0,0,0,4369,4333,1,0,0,0,4369,4336,1,0,0,0,4369,4339,
		1,0,0,0,4369,4342,1,0,0,0,4369,4345,1,0,0,0,4369,4348,1,0,0,0,4369,4351,
		1,0,0,0,4369,4354,1,0,0,0,4369,4357,1,0,0,0,4369,4360,1,0,0,0,4369,4363,
		1,0,0,0,4369,4366,1,0,0,0,4370,785,1,0,0,0,4371,4372,3,1272,636,0,4372,
		787,1,0,0,0,4373,4377,3,526,263,0,4374,4377,3,90,45,0,4375,4377,5,12,0,
		0,4376,4373,1,0,0,0,4376,4374,1,0,0,0,4376,4375,1,0,0,0,4377,789,1,0,0,
		0,4378,4381,3,408,204,0,4379,4381,3,794,397,0,4380,4378,1,0,0,0,4380,4379,
		1,0,0,0,4381,791,1,0,0,0,4382,4385,3,522,261,0,4383,4385,3,794,397,0,4384,
		4382,1,0,0,0,4384,4383,1,0,0,0,4385,793,1,0,0,0,4386,4387,5,10,0,0,4387,
		4388,3,1098,549,0,4388,4389,5,8,0,0,4389,4390,3,798,399,0,4390,4391,5,
		11,0,0,4391,795,1,0,0,0,4392,4395,3,790,395,0,4393,4395,3,792,396,0,4394,
		4392,1,0,0,0,4394,4393,1,0,0,0,4395,797,1,0,0,0,4396,4397,3,634,317,0,
		4397,4398,5,50,0,0,4398,4399,3,1268,634,0,4399,4400,5,8,0,0,4400,4403,
		3,1268,634,0,4401,4402,5,8,0,0,4402,4404,3,1268,634,0,4403,4401,1,0,0,
		0,4403,4404,1,0,0,0,4404,799,1,0,0,0,4405,4406,5,66,0,0,4406,4407,5,10,
		0,0,4407,4408,3,198,99,0,4408,4409,5,11,0,0,4409,4416,1,0,0,0,4410,4411,
		5,67,0,0,4411,4412,5,10,0,0,4412,4413,3,198,99,0,4413,4414,5,11,0,0,4414,
		4416,1,0,0,0,4415,4405,1,0,0,0,4415,4410,1,0,0,0,4416,801,1,0,0,0,4417,
		4418,5,130,0,0,4418,4419,5,10,0,0,4419,4420,3,1152,576,0,4420,4421,5,11,
		0,0,4421,803,1,0,0,0,4422,4423,5,142,0,0,4423,4425,5,50,0,0,4424,4422,
		1,0,0,0,4424,4425,1,0,0,0,4425,4426,1,0,0,0,4426,4446,3,762,381,0,4427,
		4428,5,7,0,0,4428,4429,5,50,0,0,4429,4446,3,90,45,0,4430,4431,5,194,0,
		0,4431,4432,5,50,0,0,4432,4446,3,90,45,0,4433,4434,5,145,0,0,4434,4435,
		5,50,0,0,4435,4446,3,90,45,0,4436,4437,5,173,0,0,4437,4438,5,50,0,0,4438,
		4446,3,1268,634,0,4439,4440,5,144,0,0,4440,4441,5,50,0,0,4441,4446,3,772,
		386,0,4442,4443,5,143,0,0,4443,4444,5,50,0,0,4444,4446,3,496,248,0,4445,
		4424,1,0,0,0,4445,4427,1,0,0,0,4445,4430,1,0,0,0,4445,4433,1,0,0,0,4445,
		4436,1,0,0,0,4445,4439,1,0,0,0,4445,4442,1,0,0,0,4446,805,1,0,0,0,4447,
		4448,5,148,0,0,4448,4455,3,762,381,0,4449,4450,5,148,0,0,4450,4451,5,10,
		0,0,4451,4452,3,1120,560,0,4452,4453,5,11,0,0,4453,4455,1,0,0,0,4454,4447,
		1,0,0,0,4454,4449,1,0,0,0,4455,807,1,0,0,0,4456,4457,5,137,0,0,4457,4464,
		3,762,381,0,4458,4459,5,137,0,0,4459,4460,5,10,0,0,4460,4461,3,1120,560,
		0,4461,4462,5,11,0,0,4462,4464,1,0,0,0,4463,4456,1,0,0,0,4463,4458,1,0,
		0,0,4464,809,1,0,0,0,4465,4466,5,199,0,0,4466,4473,3,762,381,0,4467,4468,
		5,199,0,0,4468,4469,5,10,0,0,4469,4470,3,1120,560,0,4470,4471,5,11,0,0,
		4471,4473,1,0,0,0,4472,4465,1,0,0,0,4472,4467,1,0,0,0,4473,811,1,0,0,0,
		4474,4475,5,142,0,0,4475,4477,5,50,0,0,4476,4474,1,0,0,0,4476,4477,1,0,
		0,0,4477,4478,1,0,0,0,4478,4489,3,762,381,0,4479,4480,5,144,0,0,4480,4481,
		5,50,0,0,4481,4489,3,772,386,0,4482,4483,5,143,0,0,4483,4484,5,50,0,0,
		4484,4489,3,496,248,0,4485,4486,5,145,0,0,4486,4487,5,50,0,0,4487,4489,
		3,90,45,0,4488,4476,1,0,0,0,4488,4479,1,0,0,0,4488,4482,1,0,0,0,4488,4485,
		1,0,0,0,4489,813,1,0,0,0,4490,4491,5,188,0,0,4491,4498,3,762,381,0,4492,
		4493,5,188,0,0,4493,4494,5,10,0,0,4494,4495,3,1078,539,0,4495,4496,5,11,
		0,0,4496,4498,1,0,0,0,4497,4490,1,0,0,0,4497,4492,1,0,0,0,4498,815,1,0,
		0,0,4499,4500,5,142,0,0,4500,4502,5,50,0,0,4501,4499,1,0,0,0,4501,4502,
		1,0,0,0,4502,4503,1,0,0,0,4503,4514,3,762,381,0,4504,4505,5,143,0,0,4505,
		4506,5,50,0,0,4506,4514,3,496,248,0,4507,4508,5,144,0,0,4508,4509,5,50,
		0,0,4509,4514,3,772,386,0,4510,4511,5,145,0,0,4511,4512,5,50,0,0,4512,
		4514,3,90,45,0,4513,4501,1,0,0,0,4513,4504,1,0,0,0,4513,4507,1,0,0,0,4513,
		4510,1,0,0,0,4514,817,1,0,0,0,4515,4516,5,170,0,0,4516,4517,5,10,0,0,4517,
		4518,3,1092,546,0,4518,4519,5,11,0,0,4519,4529,1,0,0,0,4520,4521,5,170,
		0,0,4521,4522,5,10,0,0,4522,4523,5,171,0,0,4523,4524,5,50,0,0,4524,4525,
		3,1272,636,0,4525,4526,5,11,0,0,4526,4527,3,1114,557,0,4527,4529,1,0,0,
		0,4528,4515,1,0,0,0,4528,4520,1,0,0,0,4529,819,1,0,0,0,4530,4531,5,142,
		0,0,4531,4533,5,50,0,0,4532,4530,1,0,0,0,4532,4533,1,0,0,0,4533,4534,1,
		0,0,0,4534,4644,3,762,381,0,4535,4536,5,159,0,0,4536,4537,5,50,0,0,4537,
		4644,3,770,385,0,4538,4539,5,153,0,0,4539,4540,5,50,0,0,4540,4644,3,1256,
		628,0,4541,4542,5,154,0,0,4542,4543,5,50,0,0,4543,4644,3,1256,628,0,4544,
		4545,5,121,0,0,4545,4546,5,50,0,0,4546,4644,3,1256,628,0,4547,4548,5,155,
		0,0,4548,4549,5,50,0,0,4549,4644,3,1256,628,0,4550,4551,5,156,0,0,4551,
		4552,5,50,0,0,4552,4644,3,1256,628,0,4553,4554,5,157,0,0,4554,4555,5,50,
		0,0,4555,4644,3,1256,628,0,4556,4557,5,235,0,0,4557,4558,5,50,0,0,4558,
		4644,3,1256,628,0,4559,4560,5,158,0,0,4560,4561,5,50,0,0,4561,4644,3,1256,
		628,0,4562,4563,5,145,0,0,4563,4564,5,50,0,0,4564,4644,3,90,45,0,4565,
		4566,5,172,0,0,4566,4567,5,50,0,0,4567,4644,3,1276,638,0,4568,4569,5,160,
		0,0,4569,4570,5,50,0,0,4570,4644,3,1256,628,0,4571,4572,5,46,0,0,4572,
		4573,5,50,0,0,4573,4644,3,1256,628,0,4574,4575,5,173,0,0,4575,4576,5,50,
		0,0,4576,4644,3,1268,634,0,4577,4578,5,144,0,0,4578,4579,5,50,0,0,4579,
		4644,3,772,386,0,4580,4581,5,143,0,0,4581,4582,5,50,0,0,4582,4644,3,496,
		248,0,4583,4584,5,236,0,0,4584,4585,5,50,0,0,4585,4644,3,1256,628,0,4586,
		4587,5,75,0,0,4587,4588,5,50,0,0,4588,4644,3,1256,628,0,4589,4590,5,174,
		0,0,4590,4591,5,50,0,0,4591,4644,3,1276,638,0,4592,4593,5,175,0,0,4593,
		4594,5,50,0,0,4594,4644,3,1272,636,0,4595,4596,5,176,0,0,4596,4597,5,50,
		0,0,4597,4644,3,1272,636,0,4598,4599,5,177,0,0,4599,4600,5,50,0,0,4600,
		4644,3,1276,638,0,4601,4602,5,162,0,0,4602,4603,5,50,0,0,4603,4644,3,1256,
		628,0,4604,4605,5,178,0,0,4605,4606,5,50,0,0,4606,4644,3,1276,638,0,4607,
		4608,5,179,0,0,4608,4609,5,50,0,0,4609,4644,3,1272,636,0,4610,4611,5,163,
		0,0,4611,4612,5,50,0,0,4612,4644,3,1256,628,0,4613,4614,5,45,0,0,4614,
		4615,5,50,0,0,4615,4644,3,1256,628,0,4616,4617,5,180,0,0,4617,4618,5,50,
		0,0,4618,4644,3,1256,628,0,4619,4620,5,164,0,0,4620,4621,5,50,0,0,4621,
		4644,3,1272,636,0,4622,4623,5,165,0,0,4623,4624,5,50,0,0,4624,4644,3,1256,
		628,0,4625,4626,5,181,0,0,4626,4627,5,50,0,0,4627,4644,3,1256,628,0,4628,
		4629,5,166,0,0,4629,4630,5,50,0,0,4630,4644,3,1256,628,0,4631,4632,5,182,
		0,0,4632,4633,5,50,0,0,4633,4644,3,1272,636,0,4634,4635,5,183,0,0,4635,
		4636,5,50,0,0,4636,4644,3,1256,628,0,4637,4638,5,47,0,0,4638,4639,5,50,
		0,0,4639,4644,3,1256,628,0,4640,4641,5,48,0,0,4641,4642,5,50,0,0,4642,
		4644,3,1256,628,0,4643,4532,1,0,0,0,4643,4535,1,0,0,0,4643,4538,1,0,0,
		0,4643,4541,1,0,0,0,4643,4544,1,0,0,0,4643,4547,1,0,0,0,4643,4550,1,0,
		0,0,4643,4553,1,0,0,0,4643,4556,1,0,0,0,4643,4559,1,0,0,0,4643,4562,1,
		0,0,0,4643,4565,1,0,0,0,4643,4568,1,0,0,0,4643,4571,1,0,0,0,4643,4574,
		1,0,0,0,4643,4577,1,0,0,0,4643,4580,1,0,0,0,4643,4583,1,0,0,0,4643,4586,
		1,0,0,0,4643,4589,1,0,0,0,4643,4592,1,0,0,0,4643,4595,1,0,0,0,4643,4598,
		1,0,0,0,4643,4601,1,0,0,0,4643,4604,1,0,0,0,4643,4607,1,0,0,0,4643,4610,
		1,0,0,0,4643,4613,1,0,0,0,4643,4616,1,0,0,0,4643,4619,1,0,0,0,4643,4622,
		1,0,0,0,4643,4625,1,0,0,0,4643,4628,1,0,0,0,4643,4631,1,0,0,0,4643,4634,
		1,0,0,0,4643,4637,1,0,0,0,4643,4640,1,0,0,0,4644,821,1,0,0,0,4645,4646,
		5,72,0,0,4646,4647,3,824,412,0,4647,823,1,0,0,0,4648,4650,5,10,0,0,4649,
		4651,3,826,413,0,4650,4649,1,0,0,0,4650,4651,1,0,0,0,4651,4652,1,0,0,0,
		4652,4663,5,11,0,0,4653,4657,5,10,0,0,4654,4655,3,826,413,0,4655,4656,
		5,8,0,0,4656,4658,1,0,0,0,4657,4654,1,0,0,0,4657,4658,1,0,0,0,4658,4659,
		1,0,0,0,4659,4660,3,830,415,0,4660,4661,5,11,0,0,4661,4663,1,0,0,0,4662,
		4648,1,0,0,0,4662,4653,1,0,0,0,4663,825,1,0,0,0,4664,4671,3,828,414,0,
		4665,4667,5,8,0,0,4666,4665,1,0,0,0,4666,4667,1,0,0,0,4667,4668,1,0,0,
		0,4668,4670,3,828,414,0,4669,4666,1,0,0,0,4670,4673,1,0,0,0,4671,4669,
		1,0,0,0,4671,4672,1,0,0,0,4672,827,1,0,0,0,4673,4671,1,0,0,0,4674,4676,
		3,832,416,0,4675,4674,1,0,0,0,4675,4676,1,0,0,0,4676,4677,1,0,0,0,4677,
		4688,3,834,417,0,4678,4688,3,846,423,0,4679,4688,3,864,432,0,4680,4682,
		3,832,416,0,4681,4680,1,0,0,0,4681,4682,1,0,0,0,4682,4683,1,0,0,0,4683,
		4684,5,10,0,0,4684,4685,3,826,413,0,4685,4686,5,11,0,0,4686,4688,1,0,0,
		0,4687,4675,1,0,0,0,4687,4678,1,0,0,0,4687,4679,1,0,0,0,4687,4681,1,0,
		0,0,4688,829,1,0,0,0,4689,4690,5,12,0,0,4690,4691,5,10,0,0,4691,4692,3,
		826,413,0,4692,4693,5,11,0,0,4693,831,1,0,0,0,4694,4695,3,106,53,0,4695,
		833,1,0,0,0,4696,4697,5,284,0,0,4697,4700,3,836,418,0,4698,4699,5,78,0,
		0,4699,4701,3,838,419,0,4700,4698,1,0,0,0,4700,4701,1,0,0,0,4701,4790,
		1,0,0,0,4702,4703,5,256,0,0,4703,4706,3,836,418,0,4704,4705,5,78,0,0,4705,
		4707,3,838,419,0,4706,4704,1,0,0,0,4706,4707,1,0,0,0,4707,4790,1,0,0,0,
		4708,4709,5,257,0,0,4709,4712,3,836,418,0,4710,4711,5,78,0,0,4711,4713,
		3,838,419,0,4712,4710,1,0,0,0,4712,4713,1,0,0,0,4713,4790,1,0,0,0,4714,
		4715,5,258,0,0,4715,4718,3,836,418,0,4716,4717,5,78,0,0,4717,4719,3,838,
		419,0,4718,4716,1,0,0,0,4718,4719,1,0,0,0,4719,4790,1,0,0,0,4720,4721,
		5,260,0,0,4721,4722,3,836,418,0,4722,4723,5,78,0,0,4723,4724,3,840,420,
		0,4724,4790,1,0,0,0,4725,4726,5,253,0,0,4726,4727,3,836,418,0,4727,4728,
		5,78,0,0,4728,4731,3,840,420,0,4729,4730,5,253,0,0,4730,4732,3,842,421,
		0,4731,4729,1,0,0,0,4731,4732,1,0,0,0,4732,4790,1,0,0,0,4733,4734,5,285,
		0,0,4734,4735,3,836,418,0,4735,4736,5,78,0,0,4736,4739,3,840,420,0,4737,
		4738,5,253,0,0,4738,4740,3,842,421,0,4739,4737,1,0,0,0,4739,4740,1,0,0,
		0,4740,4790,1,0,0,0,4741,4742,5,286,0,0,4742,4743,3,836,418,0,4743,4744,
		5,78,0,0,4744,4747,3,840,420,0,4745,4746,5,253,0,0,4746,4748,3,842,421,
		0,4747,4745,1,0,0,0,4747,4748,1,0,0,0,4748,4790,1,0,0,0,4749,4750,5,287,
		0,0,4750,4751,3,836,418,0,4751,4752,5,78,0,0,4752,4755,3,840,420,0,4753,
		4754,5,253,0,0,4754,4756,3,842,421,0,4755,4753,1,0,0,0,4755,4756,1,0,0,
		0,4756,4790,1,0,0,0,4757,4758,5,288,0,0,4758,4765,3,836,418,0,4759,4760,
		5,78,0,0,4760,4763,3,840,420,0,4761,4762,5,253,0,0,4762,4764,3,842,421,
		0,4763,4761,1,0,0,0,4763,4764,1,0,0,0,4764,4766,1,0,0,0,4765,4759,1,0,
		0,0,4765,4766,1,0,0,0,4766,4790,1,0,0,0,4767,4768,5,289,0,0,4768,4790,
		3,836,418,0,4769,4771,5,259,0,0,4770,4772,3,836,418,0,4771,4770,1,0,0,
		0,4771,4772,1,0,0,0,4772,4790,1,0,0,0,4773,4790,5,290,0,0,4774,4775,5,
		254,0,0,4775,4776,3,836,418,0,4776,4777,5,78,0,0,4777,4778,3,840,420,0,
		4778,4790,1,0,0,0,4779,4781,5,291,0,0,4780,4782,3,138,69,0,4781,4780,1,
		0,0,0,4781,4782,1,0,0,0,4782,4787,1,0,0,0,4783,4784,5,10,0,0,4784,4785,
		3,1148,574,0,4785,4786,5,11,0,0,4786,4788,1,0,0,0,4787,4783,1,0,0,0,4787,
		4788,1,0,0,0,4788,4790,1,0,0,0,4789,4696,1,0,0,0,4789,4702,1,0,0,0,4789,
		4708,1,0,0,0,4789,4714,1,0,0,0,4789,4720,1,0,0,0,4789,4725,1,0,0,0,4789,
		4733,1,0,0,0,4789,4741,1,0,0,0,4789,4749,1,0,0,0,4789,4757,1,0,0,0,4789,
		4767,1,0,0,0,4789,4769,1,0,0,0,4789,4773,1,0,0,0,4789,4774,1,0,0,0,4789,
		4779,1,0,0,0,4790,835,1,0,0,0,4791,4792,3,106,53,0,4792,837,1,0,0,0,4793,
		4794,3,106,53,0,4794,839,1,0,0,0,4795,4796,3,106,53,0,4796,841,1,0,0,0,
		4797,4798,3,106,53,0,4798,843,1,0,0,0,4799,4800,3,104,52,0,4800,845,1,
		0,0,0,4801,4816,3,854,427,0,4802,4816,3,856,428,0,4803,4816,3,858,429,
		0,4804,4816,3,850,425,0,4805,4816,3,860,430,0,4806,4816,3,862,431,0,4807,
		4808,3,848,424,0,4808,4809,5,263,0,0,4809,4816,1,0,0,0,4810,4816,5,18,
		0,0,4811,4813,3,832,416,0,4812,4811,1,0,0,0,4812,4813,1,0,0,0,4813,4814,
		1,0,0,0,4814,4816,5,24,0,0,4815,4801,1,0,0,0,4815,4802,1,0,0,0,4815,4803,
		1,0,0,0,4815,4804,1,0,0,0,4815,4805,1,0,0,0,4815,4806,1,0,0,0,4815,4807,
		1,0,0,0,4815,4810,1,0,0,0,4815,4812,1,0,0,0,4816,847,1,0,0,0,4817,4818,
		3,104,52,0,4818,849,1,0,0,0,4819,4820,5,280,0,0,4820,4829,3,852,426,0,
		4821,4822,5,281,0,0,4822,4829,3,852,426,0,4823,4824,5,282,0,0,4824,4829,
		3,852,426,0,4825,4826,3,852,426,0,4826,4827,5,283,0,0,4827,4829,1,0,0,
		0,4828,4819,1,0,0,0,4828,4821,1,0,0,0,4828,4823,1,0,0,0,4828,4825,1,0,
		0,0,4829,851,1,0,0,0,4830,4831,3,106,53,0,4831,853,1,0,0,0,4832,4833,7,
		12,0,0,4833,855,1,0,0,0,4834,4835,7,13,0,0,4835,857,1,0,0,0,4836,4837,
		7,14,0,0,4837,859,1,0,0,0,4838,4839,7,15,0,0,4839,861,1,0,0,0,4840,4841,
		7,16,0,0,4841,863,1,0,0,0,4842,4843,3,138,69,0,4843,865,1,0,0,0,4844,4845,
		5,6,0,0,4845,4846,3,1242,621,0,4846,867,1,0,0,0,4847,4852,5,7,0,0,4848,
		4850,5,6,0,0,4849,4851,3,1242,621,0,4850,4849,1,0,0,0,4850,4851,1,0,0,
		0,4851,4853,1,0,0,0,4852,4848,1,0,0,0,4852,4853,1,0,0,0,4853,869,1,0,0,
		0,4854,4855,5,14,0,0,4855,4856,3,1224,612,0,4856,871,1,0,0,0,4857,4862,
		5,7,0,0,4858,4860,5,14,0,0,4859,4861,3,1224,612,0,4860,4859,1,0,0,0,4860,
		4861,1,0,0,0,4861,4863,1,0,0,0,4862,4858,1,0,0,0,4862,4863,1,0,0,0,4863,
		873,1,0,0,0,4864,4870,5,51,0,0,4865,4866,5,8,0,0,4866,4868,3,876,438,0,
		4867,4865,1,0,0,0,4867,4868,1,0,0,0,4868,4869,1,0,0,0,4869,4871,5,52,0,
		0,4870,4867,1,0,0,0,4870,4871,1,0,0,0,4871,4872,1,0,0,0,4872,4875,3,1224,
		612,0,4873,4874,5,8,0,0,4874,4876,3,1126,563,0,4875,4873,1,0,0,0,4875,
		4876,1,0,0,0,4876,4893,1,0,0,0,4877,4883,5,51,0,0,4878,4879,5,8,0,0,4879,
		4881,3,876,438,0,4880,4878,1,0,0,0,4880,4881,1,0,0,0,4881,4882,1,0,0,0,
		4882,4884,5,52,0,0,4883,4880,1,0,0,0,4883,4884,1,0,0,0,4884,4885,1,0,0,
		0,4885,4886,3,1224,612,0,4886,4887,5,8,0,0,4887,4888,5,53,0,0,4888,4890,
		5,18,0,0,4889,4891,3,1112,556,0,4890,4889,1,0,0,0,4890,4891,1,0,0,0,4891,
		4893,1,0,0,0,4892,4864,1,0,0,0,4892,4877,1,0,0,0,4893,875,1,0,0,0,4894,
		4895,7,17,0,0,4895,877,1,0,0,0,4896,4897,3,1222,611,0,4897,4898,5,21,0,
		0,4898,4899,3,1298,649,0,4899,4911,1,0,0,0,4900,4901,5,22,0,0,4901,4902,
		5,10,0,0,4902,4903,3,884,442,0,4903,4904,5,11,0,0,4904,4905,5,21,0,0,4905,
		4906,5,22,0,0,4906,4907,5,10,0,0,4907,4908,3,886,443,0,4908,4909,5,11,
		0,0,4909,4911,1,0,0,0,4910,4896,1,0,0,0,4910,4900,1,0,0,0,4911,879,1,0,
		0,0,4912,4916,3,912,456,0,4913,4916,3,882,441,0,4914,4916,3,878,439,0,
		4915,4912,1,0,0,0,4915,4913,1,0,0,0,4915,4914,1,0,0,0,4916,881,1,0,0,0,
		4917,4918,3,1298,649,0,4918,883,1,0,0,0,4919,4922,3,84,42,0,4920,4922,
		3,86,43,0,4921,4919,1,0,0,0,4921,4920,1,0,0,0,4922,885,1,0,0,0,4923,4926,
		3,84,42,0,4924,4926,3,86,43,0,4925,4923,1,0,0,0,4925,4924,1,0,0,0,4926,
		887,1,0,0,0,4927,4928,5,15,0,0,4928,4929,5,10,0,0,4929,4930,3,890,445,
		0,4930,4931,5,11,0,0,4931,4932,3,1288,644,0,4932,889,1,0,0,0,4933,4936,
		3,1156,578,0,4934,4935,5,18,0,0,4935,4937,3,1228,614,0,4936,4934,1,0,0,
		0,4936,4937,1,0,0,0,4937,891,1,0,0,0,4938,4943,5,7,0,0,4939,4941,5,15,
		0,0,4940,4942,3,1288,644,0,4941,4940,1,0,0,0,4941,4942,1,0,0,0,4942,4944,
		1,0,0,0,4943,4939,1,0,0,0,4943,4944,1,0,0,0,4944,893,1,0,0,0,4945,4946,
		5,16,0,0,4946,4948,5,17,0,0,4947,4949,3,1170,585,0,4948,4947,1,0,0,0,4948,
		4949,1,0,0,0,4949,895,1,0,0,0,4950,4956,5,7,0,0,4951,4952,5,16,0,0,4952,
		4954,5,17,0,0,4953,4955,3,1170,585,0,4954,4953,1,0,0,0,4954,4955,1,0,0,
		0,4955,4957,1,0,0,0,4956,4951,1,0,0,0,4956,4957,1,0,0,0,4957,897,1,0,0,
		0,4958,4962,3,902,451,0,4959,4961,3,900,450,0,4960,4959,1,0,0,0,4961,4964,
		1,0,0,0,4962,4960,1,0,0,0,4962,4963,1,0,0,0,4963,4965,1,0,0,0,4964,4962,
		1,0,0,0,4965,4966,3,904,452,0,4966,899,1,0,0,0,4967,4970,3,906,453,0,4968,
		4970,3,908,454,0,4969,4967,1,0,0,0,4969,4968,1,0,0,0,4970,901,1,0,0,0,
		4971,4973,5,117,0,0,4972,4974,3,912,456,0,4973,4972,1,0,0,0,4973,4974,
		1,0,0,0,4974,4978,1,0,0,0,4975,4976,5,118,0,0,4976,4978,5,117,0,0,4977,
		4971,1,0,0,0,4977,4975,1,0,0,0,4978,903,1,0,0,0,4979,4980,5,7,0,0,4980,
		4982,5,117,0,0,4981,4983,3,912,456,0,4982,4981,1,0,0,0,4982,4983,1,0,0,
		0,4983,905,1,0,0,0,4984,4986,3,960,480,0,4985,4987,3,20,10,0,4986,4985,
		1,0,0,0,4986,4987,1,0,0,0,4987,4988,1,0,0,0,4988,4989,3,966,483,0,4989,
		4997,1,0,0,0,4990,4992,3,968,484,0,4991,4993,3,20,10,0,4992,4991,1,0,0,
		0,4992,4993,1,0,0,0,4993,4994,1,0,0,0,4994,4995,3,972,486,0,4995,4997,
		1,0,0,0,4996,4984,1,0,0,0,4996,4990,1,0,0,0,4997,907,1,0,0,0,4998,5000,
		5,14,0,0,4999,4998,1,0,0,0,4999,5000,1,0,0,0,5000,5001,1,0,0,0,5001,5003,
		5,96,0,0,5002,5004,5,52,0,0,5003,5002,1,0,0,0,5003,5004,1,0,0,0,5004,5005,
		1,0,0,0,5005,5006,3,1132,566,0,5006,909,1,0,0,0,5007,5008,3,1238,619,0,
		5008,911,1,0,0,0,5009,5021,3,1208,604,0,5010,5011,5,22,0,0,5011,5012,5,
		10,0,0,5012,5013,3,82,41,0,5013,5014,5,11,0,0,5014,5021,1,0,0,0,5015,5016,
		5,49,0,0,5016,5017,5,10,0,0,5017,5018,5,50,0,0,5018,5021,5,11,0,0,5019,
		5021,3,914,457,0,5020,5009,1,0,0,0,5020,5010,1,0,0,0,5020,5015,1,0,0,0,
		5020,5019,1,0,0,0,5021,913,1,0,0,0,5022,5023,5,45,0,0,5023,5024,5,10,0,
		0,5024,5025,5,46,0,0,5025,5039,5,11,0,0,5026,5027,5,45,0,0,5027,5028,5,
		10,0,0,5028,5029,5,47,0,0,5029,5039,5,11,0,0,5030,5031,5,48,0,0,5031,5032,
		5,10,0,0,5032,5033,5,46,0,0,5033,5039,5,11,0,0,5034,5035,5,48,0,0,5035,
		5036,5,10,0,0,5036,5037,5,47,0,0,5037,5039,5,11,0,0,5038,5022,1,0,0,0,
		5038,5026,1,0,0,0,5038,5030,1,0,0,0,5038,5034,1,0,0,0,5039,915,1,0,0,0,
		5040,5043,5,107,0,0,5041,5042,5,8,0,0,5042,5044,3,264,132,0,5043,5041,
		1,0,0,0,5043,5044,1,0,0,0,5044,5045,1,0,0,0,5045,5046,5,52,0,0,5046,5047,
		3,912,456,0,5047,5048,5,21,0,0,5048,5049,3,1132,566,0,5049,917,1,0,0,0,
		5050,5052,5,68,0,0,5051,5053,5,52,0,0,5052,5051,1,0,0,0,5052,5053,1,0,
		0,0,5053,5054,1,0,0,0,5054,5055,3,1074,537,0,5055,919,1,0,0,0,5056,5057,
		5,96,0,0,5057,5059,5,10,0,0,5058,5060,3,922,461,0,5059,5058,1,0,0,0,5059,
		5060,1,0,0,0,5060,5061,1,0,0,0,5061,5070,5,11,0,0,5062,5063,5,8,0,0,5063,
		5065,3,924,462,0,5064,5062,1,0,0,0,5065,5068,1,0,0,0,5066,5064,1,0,0,0,
		5066,5067,1,0,0,0,5067,5069,1,0,0,0,5068,5066,1,0,0,0,5069,5071,5,52,0,
		0,5070,5066,1,0,0,0,5070,5071,1,0,0,0,5071,5072,1,0,0,0,5072,5073,3,1124,
		562,0,5073,921,1,0,0,0,5074,5077,3,928,464,0,5075,5077,3,96,48,0,5076,
		5074,1,0,0,0,5076,5075,1,0,0,0,5077,923,1,0,0,0,5078,5090,3,264,132,0,
		5079,5090,3,958,479,0,5080,5081,5,110,0,0,5081,5082,5,10,0,0,5082,5083,
		3,306,153,0,5083,5084,5,11,0,0,5084,5090,1,0,0,0,5085,5090,5,111,0,0,5086,
		5090,5,99,0,0,5087,5090,5,112,0,0,5088,5090,5,113,0,0,5089,5078,1,0,0,
		0,5089,5079,1,0,0,0,5089,5080,1,0,0,0,5089,5085,1,0,0,0,5089,5086,1,0,
		0,0,5089,5087,1,0,0,0,5089,5088,1,0,0,0,5090,925,1,0,0,0,5091,5094,3,1236,
		618,0,5092,5093,5,21,0,0,5093,5095,3,930,465,0,5094,5092,1,0,0,0,5094,
		5095,1,0,0,0,5095,927,1,0,0,0,5096,5097,3,0,0,0,5097,929,1,0,0,0,5098,
		5101,3,262,131,0,5099,5101,3,932,466,0,5100,5098,1,0,0,0,5100,5099,1,0,
		0,0,5101,931,1,0,0,0,5102,5103,3,1238,619,0,5103,933,1,0,0,0,5104,5106,
		5,19,0,0,5105,5107,5,52,0,0,5106,5105,1,0,0,0,5106,5107,1,0,0,0,5107,5108,
		1,0,0,0,5108,5109,3,1094,547,0,5109,935,1,0,0,0,5110,5111,3,940,470,0,
		5111,5113,5,10,0,0,5112,5114,3,990,495,0,5113,5112,1,0,0,0,5113,5114,1,
		0,0,0,5114,5115,1,0,0,0,5115,5116,5,11,0,0,5116,937,1,0,0,0,5117,5118,
		5,147,0,0,5118,5124,3,940,470,0,5119,5121,5,10,0,0,5120,5122,3,990,495,
		0,5121,5120,1,0,0,0,5121,5122,1,0,0,0,5122,5123,1,0,0,0,5123,5125,5,11,
		0,0,5124,5119,1,0,0,0,5124,5125,1,0,0,0,5125,939,1,0,0,0,5126,5133,3,1238,
		619,0,5127,5133,3,554,277,0,5128,5129,3,426,213,0,5129,5130,5,90,0,0,5130,
		5131,3,1166,583,0,5131,5133,1,0,0,0,5132,5126,1,0,0,0,5132,5127,1,0,0,
		0,5132,5128,1,0,0,0,5133,941,1,0,0,0,5134,5135,3,50,25,0,5135,5136,5,50,
		0,0,5136,5138,1,0,0,0,5137,5134,1,0,0,0,5137,5138,1,0,0,0,5138,5139,1,
		0,0,0,5139,5140,3,944,472,0,5140,943,1,0,0,0,5141,5148,3,522,261,0,5142,
		5148,3,408,204,0,5143,5148,3,1238,619,0,5144,5148,3,554,277,0,5145,5148,
		3,948,474,0,5146,5148,3,946,473,0,5147,5141,1,0,0,0,5147,5142,1,0,0,0,
		5147,5143,1,0,0,0,5147,5144,1,0,0,0,5147,5145,1,0,0,0,5147,5146,1,0,0,
		0,5148,945,1,0,0,0,5149,5150,5,12,0,0,5150,5151,3,90,45,0,5151,947,1,0,
		0,0,5152,5153,5,10,0,0,5153,5154,3,1274,637,0,5154,5155,5,230,0,0,5155,
		5163,3,950,475,0,5156,5157,5,18,0,0,5157,5158,3,1274,637,0,5158,5159,5,
		230,0,0,5159,5160,3,950,475,0,5160,5162,1,0,0,0,5161,5156,1,0,0,0,5162,
		5165,1,0,0,0,5163,5161,1,0,0,0,5163,5164,1,0,0,0,5164,5166,1,0,0,0,5165,
		5163,1,0,0,0,5166,5167,5,18,0,0,5167,5168,3,950,475,0,5168,5169,5,11,0,
		0,5169,949,1,0,0,0,5170,5173,3,952,476,0,5171,5173,5,229,0,0,5172,5170,
		1,0,0,0,5172,5171,1,0,0,0,5173,951,1,0,0,0,5174,5177,3,522,261,0,5175,
		5177,3,408,204,0,5176,5174,1,0,0,0,5176,5175,1,0,0,0,5177,953,1,0,0,0,
		5178,5182,3,956,478,0,5179,5181,3,956,478,0,5180,5179,1,0,0,0,5181,5184,
		1,0,0,0,5182,5180,1,0,0,0,5182,5183,1,0,0,0,5183,955,1,0,0,0,5184,5182,
		1,0,0,0,5185,5194,3,96,48,0,5186,5194,5,227,0,0,5187,5194,5,226,0,0,5188,
		5194,5,14,0,0,5189,5194,5,225,0,0,5190,5194,5,224,0,0,5191,5194,5,223,
		0,0,5192,5194,5,238,0,0,5193,5185,1,0,0,0,5193,5186,1,0,0,0,5193,5187,
		1,0,0,0,5193,5188,1,0,0,0,5193,5189,1,0,0,0,5193,5190,1,0,0,0,5193,5191,
		1,0,0,0,5193,5192,1,0,0,0,5194,957,1,0,0,0,5195,5196,3,266,133,0,5196,
		959,1,0,0,0,5197,5199,3,954,477,0,5198,5197,1,0,0,0,5198,5199,1,0,0,0,
		5199,5200,1,0,0,0,5200,5201,5,9,0,0,5201,5202,3,1204,602,0,5202,5204,5,
		10,0,0,5203,5205,3,1056,528,0,5204,5203,1,0,0,0,5204,5205,1,0,0,0,5205,
		5206,1,0,0,0,5206,5208,5,11,0,0,5207,5209,3,964,482,0,5208,5207,1,0,0,
		0,5208,5209,1,0,0,0,5209,961,1,0,0,0,5210,5211,3,0,0,0,5211,963,1,0,0,
		0,5212,5218,3,958,479,0,5213,5214,5,76,0,0,5214,5215,5,10,0,0,5215,5216,
		3,1244,622,0,5216,5217,5,11,0,0,5217,5219,1,0,0,0,5218,5213,1,0,0,0,5218,
		5219,1,0,0,0,5219,5228,1,0,0,0,5220,5221,5,76,0,0,5221,5222,5,10,0,0,5222,
		5223,3,1244,622,0,5223,5225,5,11,0,0,5224,5226,3,958,479,0,5225,5224,1,
		0,0,0,5225,5226,1,0,0,0,5226,5228,1,0,0,0,5227,5212,1,0,0,0,5227,5220,
		1,0,0,0,5228,965,1,0,0,0,5229,5234,5,7,0,0,5230,5232,5,9,0,0,5231,5233,
		3,1204,602,0,5232,5231,1,0,0,0,5232,5233,1,0,0,0,5233,5235,1,0,0,0,5234,
		5230,1,0,0,0,5234,5235,1,0,0,0,5235,967,1,0,0,0,5236,5238,3,954,477,0,
		5237,5236,1,0,0,0,5237,5238,1,0,0,0,5238,5239,1,0,0,0,5239,5240,5,13,0,
		0,5240,5249,3,1290,645,0,5241,5243,5,10,0,0,5242,5244,3,1054,527,0,5243,
		5242,1,0,0,0,5243,5244,1,0,0,0,5244,5245,1,0,0,0,5245,5247,5,11,0,0,5246,
		5248,3,958,479,0,5247,5246,1,0,0,0,5247,5248,1,0,0,0,5248,5250,1,0,0,0,
		5249,5241,1,0,0,0,5249,5250,1,0,0,0,5250,969,1,0,0,0,5251,5254,3,962,481,
		0,5252,5254,5,12,0,0,5253,5251,1,0,0,0,5253,5252,1,0,0,0,5254,971,1,0,
		0,0,5255,5260,5,7,0,0,5256,5258,5,13,0,0,5257,5259,3,1290,645,0,5258,5257,
		1,0,0,0,5258,5259,1,0,0,0,5259,5261,1,0,0,0,5260,5256,1,0,0,0,5260,5261,
		1,0,0,0,5261,973,1,0,0,0,5262,5263,5,14,0,0,5263,5264,5,96,0,0,5264,5265,
		3,1238,619,0,5265,975,1,0,0,0,5266,5271,5,7,0,0,5267,5269,5,96,0,0,5268,
		5270,3,1238,619,0,5269,5268,1,0,0,0,5269,5270,1,0,0,0,5270,5272,1,0,0,
		0,5271,5267,1,0,0,0,5271,5272,1,0,0,0,5272,977,1,0,0,0,5273,5274,5,77,
		0,0,5274,5283,3,1190,595,0,5275,5277,5,10,0,0,5276,5278,3,1054,527,0,5277,
		5276,1,0,0,0,5277,5278,1,0,0,0,5278,5279,1,0,0,0,5279,5281,5,11,0,0,5280,
		5282,3,964,482,0,5281,5280,1,0,0,0,5281,5282,1,0,0,0,5282,5284,1,0,0,0,
		5283,5275,1,0,0,0,5283,5284,1,0,0,0,5284,979,1,0,0,0,5285,5287,5,200,0,
		0,5286,5288,3,1268,634,0,5287,5286,1,0,0,0,5287,5288,1,0,0,0,5288,981,
		1,0,0,0,5289,5290,5,105,0,0,5290,983,1,0,0,0,5291,5292,3,1204,602,0,5292,
		5294,5,10,0,0,5293,5295,3,1056,528,0,5294,5293,1,0,0,0,5294,5295,1,0,0,
		0,5295,5296,1,0,0,0,5296,5297,5,11,0,0,5297,5298,5,50,0,0,5298,5299,3,
		1258,629,0,5299,985,1,0,0,0,5300,5305,3,244,122,0,5301,5302,5,8,0,0,5302,
		5304,3,244,122,0,5303,5301,1,0,0,0,5304,5307,1,0,0,0,5305,5303,1,0,0,0,
		5305,5306,1,0,0,0,5306,987,1,0,0,0,5307,5305,1,0,0,0,5308,5313,3,312,156,
		0,5309,5310,5,8,0,0,5310,5312,3,312,156,0,5311,5309,1,0,0,0,5312,5315,
		1,0,0,0,5313,5311,1,0,0,0,5313,5314,1,0,0,0,5314,989,1,0,0,0,5315,5313,
		1,0,0,0,5316,5321,3,942,471,0,5317,5318,5,8,0,0,5318,5320,3,942,471,0,
		5319,5317,1,0,0,0,5320,5323,1,0,0,0,5321,5319,1,0,0,0,5321,5322,1,0,0,
		0,5322,991,1,0,0,0,5323,5321,1,0,0,0,5324,5329,3,464,232,0,5325,5326,5,
		8,0,0,5326,5328,3,464,232,0,5327,5325,1,0,0,0,5328,5331,1,0,0,0,5329,5327,
		1,0,0,0,5329,5330,1,0,0,0,5330,993,1,0,0,0,5331,5329,1,0,0,0,5332,5337,
		3,316,158,0,5333,5334,5,8,0,0,5334,5336,3,316,158,0,5335,5333,1,0,0,0,
		5336,5339,1,0,0,0,5337,5335,1,0,0,0,5337,5338,1,0,0,0,5338,995,1,0,0,0,
		5339,5337,1,0,0,0,5340,5345,3,486,243,0,5341,5342,5,8,0,0,5342,5344,3,
		486,243,0,5343,5341,1,0,0,0,5344,5347,1,0,0,0,5345,5343,1,0,0,0,5345,5346,
		1,0,0,0,5346,997,1,0,0,0,5347,5345,1,0,0,0,5348,5353,3,472,236,0,5349,
		5350,5,8,0,0,5350,5352,3,472,236,0,5351,5349,1,0,0,0,5352,5355,1,0,0,0,
		5353,5351,1,0,0,0,5353,5354,1,0,0,0,5354,999,1,0,0,0,5355,5353,1,0,0,0,
		5356,5361,3,474,237,0,5357,5358,5,8,0,0,5358,5360,3,474,237,0,5359,5357,
		1,0,0,0,5360,5363,1,0,0,0,5361,5359,1,0,0,0,5361,5362,1,0,0,0,5362,1001,
		1,0,0,0,5363,5361,1,0,0,0,5364,5369,3,470,235,0,5365,5366,5,8,0,0,5366,
		5368,3,470,235,0,5367,5365,1,0,0,0,5368,5371,1,0,0,0,5369,5367,1,0,0,0,
		5369,5370,1,0,0,0,5370,1003,1,0,0,0,5371,5369,1,0,0,0,5372,5377,3,594,
		297,0,5373,5374,5,8,0,0,5374,5376,3,594,297,0,5375,5373,1,0,0,0,5376,5379,
		1,0,0,0,5377,5375,1,0,0,0,5377,5378,1,0,0,0,5378,1005,1,0,0,0,5379,5377,
		1,0,0,0,5380,5385,3,296,148,0,5381,5382,5,8,0,0,5382,5384,3,296,148,0,
		5383,5381,1,0,0,0,5384,5387,1,0,0,0,5385,5383,1,0,0,0,5385,5386,1,0,0,
		0,5386,1007,1,0,0,0,5387,5385,1,0,0,0,5388,5393,3,290,145,0,5389,5390,
		5,8,0,0,5390,5392,3,290,145,0,5391,5389,1,0,0,0,5392,5395,1,0,0,0,5393,
		5391,1,0,0,0,5393,5394,1,0,0,0,5394,1009,1,0,0,0,5395,5393,1,0,0,0,5396,
		5401,3,322,161,0,5397,5398,5,8,0,0,5398,5400,3,322,161,0,5399,5397,1,0,
		0,0,5400,5403,1,0,0,0,5401,5399,1,0,0,0,5401,5402,1,0,0,0,5402,1011,1,
		0,0,0,5403,5401,1,0,0,0,5404,5409,3,194,97,0,5405,5406,5,8,0,0,5406,5408,
		3,194,97,0,5407,5405,1,0,0,0,5408,5411,1,0,0,0,5409,5407,1,0,0,0,5409,
		5410,1,0,0,0,5410,1013,1,0,0,0,5411,5409,1,0,0,0,5412,5417,3,1166,583,
		0,5413,5414,5,8,0,0,5414,5416,3,1166,583,0,5415,5413,1,0,0,0,5416,5419,
		1,0,0,0,5417,5415,1,0,0,0,5417,5418,1,0,0,0,5418,1015,1,0,0,0,5419,5417,
		1,0,0,0,5420,5425,3,548,274,0,5421,5422,5,8,0,0,5422,5424,3,548,274,0,
		5423,5421,1,0,0,0,5424,5427,1,0,0,0,5425,5423,1,0,0,0,5425,5426,1,0,0,
		0,5426,1017,1,0,0,0,5427,5425,1,0,0,0,5428,5433,3,546,273,0,5429,5430,
		5,8,0,0,5430,5432,3,546,273,0,5431,5429,1,0,0,0,5432,5435,1,0,0,0,5433,
		5431,1,0,0,0,5433,5434,1,0,0,0,5434,1019,1,0,0,0,5435,5433,1,0,0,0,5436,
		5441,3,682,341,0,5437,5438,5,8,0,0,5438,5440,3,682,341,0,5439,5437,1,0,
		0,0,5440,5443,1,0,0,0,5441,5439,1,0,0,0,5441,5442,1,0,0,0,5442,1021,1,
		0,0,0,5443,5441,1,0,0,0,5444,5449,3,776,388,0,5445,5446,5,8,0,0,5446,5448,
		3,776,388,0,5447,5445,1,0,0,0,5448,5451,1,0,0,0,5449,5447,1,0,0,0,5449,
		5450,1,0,0,0,5450,1023,1,0,0,0,5451,5449,1,0,0,0,5452,5457,3,612,306,0,
		5453,5454,5,8,0,0,5454,5456,3,612,306,0,5455,5453,1,0,0,0,5456,5459,1,
		0,0,0,5457,5455,1,0,0,0,5457,5458,1,0,0,0,5458,1025,1,0,0,0,5459,5457,
		1,0,0,0,5460,5465,3,326,163,0,5461,5462,5,8,0,0,5462,5464,3,326,163,0,
		5463,5461,1,0,0,0,5464,5467,1,0,0,0,5465,5463,1,0,0,0,5465,5466,1,0,0,
		0,5466,1027,1,0,0,0,5467,5465,1,0,0,0,5468,5473,3,404,202,0,5469,5470,
		5,8,0,0,5470,5472,3,404,202,0,5471,5469,1,0,0,0,5472,5475,1,0,0,0,5473,
		5471,1,0,0,0,5473,5474,1,0,0,0,5474,1029,1,0,0,0,5475,5473,1,0,0,0,5476,
		5481,3,166,83,0,5477,5478,5,8,0,0,5478,5480,3,166,83,0,5479,5477,1,0,0,
		0,5480,5483,1,0,0,0,5481,5479,1,0,0,0,5481,5482,1,0,0,0,5482,1031,1,0,
		0,0,5483,5481,1,0,0,0,5484,5489,3,168,84,0,5485,5486,5,8,0,0,5486,5488,
		3,168,84,0,5487,5485,1,0,0,0,5488,5491,1,0,0,0,5489,5487,1,0,0,0,5489,
		5490,1,0,0,0,5490,1033,1,0,0,0,5491,5489,1,0,0,0,5492,5497,3,204,102,0,
		5493,5494,5,8,0,0,5494,5496,3,204,102,0,5495,5493,1,0,0,0,5496,5499,1,
		0,0,0,5497,5495,1,0,0,0,5497,5498,1,0,0,0,5498,1035,1,0,0,0,5499,5497,
		1,0,0,0,5500,5505,3,638,319,0,5501,5502,5,8,0,0,5502,5504,3,638,319,0,
		5503,5501,1,0,0,0,5504,5507,1,0,0,0,5505,5503,1,0,0,0,5505,5506,1,0,0,
		0,5506,1037,1,0,0,0,5507,5505,1,0,0,0,5508,5513,3,768,384,0,5509,5510,
		5,8,0,0,5510,5512,3,768,384,0,5511,5509,1,0,0,0,5512,5515,1,0,0,0,5513,
		5511,1,0,0,0,5513,5514,1,0,0,0,5514,1039,1,0,0,0,5515,5513,1,0,0,0,5516,
		5521,3,458,229,0,5517,5518,5,8,0,0,5518,5520,3,458,229,0,5519,5517,1,0,
		0,0,5520,5523,1,0,0,0,5521,5519,1,0,0,0,5521,5522,1,0,0,0,5522,1041,1,
		0,0,0,5523,5521,1,0,0,0,5524,5529,3,338,169,0,5525,5526,5,8,0,0,5526,5528,
		3,338,169,0,5527,5525,1,0,0,0,5528,5531,1,0,0,0,5529,5527,1,0,0,0,5529,
		5530,1,0,0,0,5530,1043,1,0,0,0,5531,5529,1,0,0,0,5532,5537,3,334,167,0,
		5533,5534,5,8,0,0,5534,5536,3,334,167,0,5535,5533,1,0,0,0,5536,5539,1,
		0,0,0,5537,5535,1,0,0,0,5537,5538,1,0,0,0,5538,1045,1,0,0,0,5539,5537,
		1,0,0,0,5540,5545,3,342,171,0,5541,5542,5,8,0,0,5542,5544,3,342,171,0,
		5543,5541,1,0,0,0,5544,5547,1,0,0,0,5545,5543,1,0,0,0,5545,5546,1,0,0,
		0,5546,1047,1,0,0,0,5547,5545,1,0,0,0,5548,5553,3,494,247,0,5549,5550,
		5,8,0,0,5550,5552,3,494,247,0,5551,5549,1,0,0,0,5552,5555,1,0,0,0,5553,
		5551,1,0,0,0,5553,5554,1,0,0,0,5554,1049,1,0,0,0,5555,5553,1,0,0,0,5556,
		5561,3,270,135,0,5557,5558,5,8,0,0,5558,5560,3,270,135,0,5559,5557,1,0,
		0,0,5560,5563,1,0,0,0,5561,5559,1,0,0,0,5561,5562,1,0,0,0,5562,1051,1,
		0,0,0,5563,5561,1,0,0,0,5564,5569,3,294,147,0,5565,5566,5,8,0,0,5566,5568,
		3,294,147,0,5567,5565,1,0,0,0,5568,5571,1,0,0,0,5569,5567,1,0,0,0,5569,
		5570,1,0,0,0,5570,1053,1,0,0,0,5571,5569,1,0,0,0,5572,5577,3,970,485,0,
		5573,5574,5,8,0,0,5574,5576,3,970,485,0,5575,5573,1,0,0,0,5576,5579,1,
		0,0,0,5577,5575,1,0,0,0,5577,5578,1,0,0,0,5578,1055,1,0,0,0,5579,5577,
		1,0,0,0,5580,5585,3,962,481,0,5581,5582,5,8,0,0,5582,5584,3,962,481,0,
		5583,5581,1,0,0,0,5584,5587,1,0,0,0,5585,5583,1,0,0,0,5585,5586,1,0,0,
		0,5586,1057,1,0,0,0,5587,5585,1,0,0,0,5588,5593,3,256,128,0,5589,5590,
		5,8,0,0,5590,5592,3,256,128,0,5591,5589,1,0,0,0,5592,5595,1,0,0,0,5593,
		5591,1,0,0,0,5593,5594,1,0,0,0,5594,1059,1,0,0,0,5595,5593,1,0,0,0,5596,
		5601,3,1188,594,0,5597,5598,5,8,0,0,5598,5600,3,1188,594,0,5599,5597,1,
		0,0,0,5600,5603,1,0,0,0,5601,5599,1,0,0,0,5601,5602,1,0,0,0,5602,1061,
		1,0,0,0,5603,5601,1,0,0,0,5604,5609,3,214,107,0,5605,5606,5,8,0,0,5606,
		5608,3,214,107,0,5607,5605,1,0,0,0,5608,5611,1,0,0,0,5609,5607,1,0,0,0,
		5609,5610,1,0,0,0,5610,1063,1,0,0,0,5611,5609,1,0,0,0,5612,5617,3,1196,
		598,0,5613,5614,5,8,0,0,5614,5616,3,1196,598,0,5615,5613,1,0,0,0,5616,
		5619,1,0,0,0,5617,5615,1,0,0,0,5617,5618,1,0,0,0,5618,1065,1,0,0,0,5619,
		5617,1,0,0,0,5620,5625,3,400,200,0,5621,5622,5,8,0,0,5622,5624,3,400,200,
		0,5623,5621,1,0,0,0,5624,5627,1,0,0,0,5625,5623,1,0,0,0,5625,5626,1,0,
		0,0,5626,1067,1,0,0,0,5627,5625,1,0,0,0,5628,5633,3,398,199,0,5629,5630,
		5,8,0,0,5630,5632,3,398,199,0,5631,5629,1,0,0,0,5632,5635,1,0,0,0,5633,
		5631,1,0,0,0,5633,5634,1,0,0,0,5634,1069,1,0,0,0,5635,5633,1,0,0,0,5636,
		5641,3,740,370,0,5637,5638,5,8,0,0,5638,5640,3,740,370,0,5639,5637,1,0,
		0,0,5640,5643,1,0,0,0,5641,5639,1,0,0,0,5641,5642,1,0,0,0,5642,1071,1,
		0,0,0,5643,5641,1,0,0,0,5644,5649,3,280,140,0,5645,5646,5,8,0,0,5646,5648,
		3,280,140,0,5647,5645,1,0,0,0,5648,5651,1,0,0,0,5649,5647,1,0,0,0,5649,
		5650,1,0,0,0,5650,1073,1,0,0,0,5651,5649,1,0,0,0,5652,5657,3,1198,599,
		0,5653,5654,5,8,0,0,5654,5656,3,1198,599,0,5655,5653,1,0,0,0,5656,5659,
		1,0,0,0,5657,5655,1,0,0,0,5657,5658,1,0,0,0,5658,1075,1,0,0,0,5659,5657,
		1,0,0,0,5660,5665,3,1200,600,0,5661,5662,5,8,0,0,5662,5664,3,1200,600,
		0,5663,5661,1,0,0,0,5664,5667,1,0,0,0,5665,5663,1,0,0,0,5665,5666,1,0,
		0,0,5666,1077,1,0,0,0,5667,5665,1,0,0,0,5668,5673,3,816,408,0,5669,5670,
		5,8,0,0,5670,5672,3,816,408,0,5671,5669,1,0,0,0,5672,5675,1,0,0,0,5673,
		5671,1,0,0,0,5673,5674,1,0,0,0,5674,1079,1,0,0,0,5675,5673,1,0,0,0,5676,
		5681,3,750,375,0,5677,5678,5,8,0,0,5678,5680,3,750,375,0,5679,5677,1,0,
		0,0,5680,5683,1,0,0,0,5681,5679,1,0,0,0,5681,5682,1,0,0,0,5682,1081,1,
		0,0,0,5683,5681,1,0,0,0,5684,5689,3,460,230,0,5685,5686,5,8,0,0,5686,5688,
		3,460,230,0,5687,5685,1,0,0,0,5688,5691,1,0,0,0,5689,5687,1,0,0,0,5689,
		5690,1,0,0,0,5690,1083,1,0,0,0,5691,5689,1,0,0,0,5692,5697,3,388,194,0,
		5693,5694,5,8,0,0,5694,5696,3,388,194,0,5695,5693,1,0,0,0,5696,5699,1,
		0,0,0,5697,5695,1,0,0,0,5697,5698,1,0,0,0,5698,1085,1,0,0,0,5699,5697,
		1,0,0,0,5700,5705,3,384,192,0,5701,5702,5,8,0,0,5702,5704,3,384,192,0,
		5703,5701,1,0,0,0,5704,5707,1,0,0,0,5705,5703,1,0,0,0,5705,5706,1,0,0,
		0,5706,1087,1,0,0,0,5707,5705,1,0,0,0,5708,5713,3,1212,606,0,5709,5710,
		5,8,0,0,5710,5712,3,1212,606,0,5711,5709,1,0,0,0,5712,5715,1,0,0,0,5713,
		5711,1,0,0,0,5713,5714,1,0,0,0,5714,1089,1,0,0,0,5715,5713,1,0,0,0,5716,
		5721,3,790,395,0,5717,5718,5,8,0,0,5718,5720,3,790,395,0,5719,5717,1,0,
		0,0,5720,5723,1,0,0,0,5721,5719,1,0,0,0,5721,5722,1,0,0,0,5722,1091,1,
		0,0,0,5723,5721,1,0,0,0,5724,5729,3,820,410,0,5725,5726,5,8,0,0,5726,5728,
		3,820,410,0,5727,5725,1,0,0,0,5728,5731,1,0,0,0,5729,5727,1,0,0,0,5729,
		5730,1,0,0,0,5730,1093,1,0,0,0,5731,5729,1,0,0,0,5732,5737,3,1220,610,
		0,5733,5734,5,8,0,0,5734,5736,3,1220,610,0,5735,5733,1,0,0,0,5736,5739,
		1,0,0,0,5737,5735,1,0,0,0,5737,5738,1,0,0,0,5738,1095,1,0,0,0,5739,5737,
		1,0,0,0,5740,5745,3,784,392,0,5741,5742,5,8,0,0,5742,5744,3,784,392,0,
		5743,5741,1,0,0,0,5744,5747,1,0,0,0,5745,5743,1,0,0,0,5745,5746,1,0,0,
		0,5746,1097,1,0,0,0,5747,5745,1,0,0,0,5748,5753,3,796,398,0,5749,5750,
		5,8,0,0,5750,5752,3,794,397,0,5751,5749,1,0,0,0,5752,5755,1,0,0,0,5753,
		5751,1,0,0,0,5753,5754,1,0,0,0,5754,1099,1,0,0,0,5755,5753,1,0,0,0,5756,
		5761,3,90,45,0,5757,5758,5,8,0,0,5758,5760,3,90,45,0,5759,5757,1,0,0,0,
		5760,5763,1,0,0,0,5761,5759,1,0,0,0,5761,5762,1,0,0,0,5762,1101,1,0,0,
		0,5763,5761,1,0,0,0,5764,5769,5,240,0,0,5765,5766,5,8,0,0,5766,5768,5,
		240,0,0,5767,5765,1,0,0,0,5768,5771,1,0,0,0,5769,5767,1,0,0,0,5769,5770,
		1,0,0,0,5770,1103,1,0,0,0,5771,5769,1,0,0,0,5772,5777,3,754,377,0,5773,
		5774,5,8,0,0,5774,5776,3,754,377,0,5775,5773,1,0,0,0,5776,5779,1,0,0,0,
		5777,5775,1,0,0,0,5777,5778,1,0,0,0,5778,1105,1,0,0,0,5779,5777,1,0,0,
		0,5780,5785,3,360,180,0,5781,5782,5,8,0,0,5782,5784,3,360,180,0,5783,5781,
		1,0,0,0,5784,5787,1,0,0,0,5785,5783,1,0,0,0,5785,5786,1,0,0,0,5786,1107,
		1,0,0,0,5787,5785,1,0,0,0,5788,5793,3,394,197,0,5789,5790,5,8,0,0,5790,
		5792,3,394,197,0,5791,5789,1,0,0,0,5792,5795,1,0,0,0,5793,5791,1,0,0,0,
		5793,5794,1,0,0,0,5794,1109,1,0,0,0,5795,5793,1,0,0,0,5796,5801,3,258,
		129,0,5797,5798,5,8,0,0,5798,5800,3,258,129,0,5799,5797,1,0,0,0,5800,5803,
		1,0,0,0,5801,5799,1,0,0,0,5801,5802,1,0,0,0,5802,1111,1,0,0,0,5803,5801,
		1,0,0,0,5804,5809,3,880,440,0,5805,5806,5,8,0,0,5806,5808,3,880,440,0,
		5807,5805,1,0,0,0,5808,5811,1,0,0,0,5809,5807,1,0,0,0,5809,5810,1,0,0,
		0,5810,1113,1,0,0,0,5811,5809,1,0,0,0,5812,5817,3,792,396,0,5813,5814,
		5,8,0,0,5814,5816,3,792,396,0,5815,5813,1,0,0,0,5816,5819,1,0,0,0,5817,
		5815,1,0,0,0,5817,5818,1,0,0,0,5818,1115,1,0,0,0,5819,5817,1,0,0,0,5820,
		5825,3,364,182,0,5821,5822,5,8,0,0,5822,5824,3,364,182,0,5823,5821,1,0,
		0,0,5824,5827,1,0,0,0,5825,5823,1,0,0,0,5825,5826,1,0,0,0,5826,1117,1,
		0,0,0,5827,5825,1,0,0,0,5828,5833,3,490,245,0,5829,5830,5,8,0,0,5830,5832,
		3,490,245,0,5831,5829,1,0,0,0,5832,5835,1,0,0,0,5833,5831,1,0,0,0,5833,
		5834,1,0,0,0,5834,1119,1,0,0,0,5835,5833,1,0,0,0,5836,5841,3,812,406,0,
		5837,5838,5,8,0,0,5838,5840,3,812,406,0,5839,5837,1,0,0,0,5840,5843,1,
		0,0,0,5841,5839,1,0,0,0,5841,5842,1,0,0,0,5842,1121,1,0,0,0,5843,5841,
		1,0,0,0,5844,5849,3,174,87,0,5845,5846,5,8,0,0,5846,5848,3,174,87,0,5847,
		5845,1,0,0,0,5848,5851,1,0,0,0,5849,5847,1,0,0,0,5849,5850,1,0,0,0,5850,
		1123,1,0,0,0,5851,5849,1,0,0,0,5852,5857,3,926,463,0,5853,5854,5,8,0,0,
		5854,5856,3,926,463,0,5855,5853,1,0,0,0,5856,5859,1,0,0,0,5857,5855,1,
		0,0,0,5857,5858,1,0,0,0,5858,1125,1,0,0,0,5859,5857,1,0,0,0,5860,5865,
		3,878,439,0,5861,5862,5,8,0,0,5862,5864,3,878,439,0,5863,5861,1,0,0,0,
		5864,5867,1,0,0,0,5865,5863,1,0,0,0,5865,5866,1,0,0,0,5866,1127,1,0,0,
		0,5867,5865,1,0,0,0,5868,5873,3,370,185,0,5869,5870,5,8,0,0,5870,5872,
		3,370,185,0,5871,5869,1,0,0,0,5872,5875,1,0,0,0,5873,5871,1,0,0,0,5873,
		5874,1,0,0,0,5874,1129,1,0,0,0,5875,5873,1,0,0,0,5876,5881,3,446,223,0,
		5877,5878,5,8,0,0,5878,5880,3,446,223,0,5879,5877,1,0,0,0,5880,5883,1,
		0,0,0,5881,5879,1,0,0,0,5881,5882,1,0,0,0,5882,1131,1,0,0,0,5883,5881,
		1,0,0,0,5884,5889,3,910,455,0,5885,5886,5,8,0,0,5886,5888,3,910,455,0,
		5887,5885,1,0,0,0,5888,5891,1,0,0,0,5889,5887,1,0,0,0,5889,5890,1,0,0,
		0,5890,1133,1,0,0,0,5891,5889,1,0,0,0,5892,5897,3,724,362,0,5893,5894,
		5,8,0,0,5894,5896,3,724,362,0,5895,5893,1,0,0,0,5896,5899,1,0,0,0,5897,
		5895,1,0,0,0,5897,5898,1,0,0,0,5898,1135,1,0,0,0,5899,5897,1,0,0,0,5900,
		5905,3,376,188,0,5901,5902,5,8,0,0,5902,5904,3,376,188,0,5903,5901,1,0,
		0,0,5904,5907,1,0,0,0,5905,5903,1,0,0,0,5905,5906,1,0,0,0,5906,1137,1,
		0,0,0,5907,5905,1,0,0,0,5908,5913,3,146,73,0,5909,5910,5,8,0,0,5910,5912,
		3,146,73,0,5911,5909,1,0,0,0,5912,5915,1,0,0,0,5913,5911,1,0,0,0,5913,
		5914,1,0,0,0,5914,1139,1,0,0,0,5915,5913,1,0,0,0,5916,5921,3,190,95,0,
		5917,5918,5,8,0,0,5918,5920,3,190,95,0,5919,5917,1,0,0,0,5920,5923,1,0,
		0,0,5921,5919,1,0,0,0,5921,5922,1,0,0,0,5922,1141,1,0,0,0,5923,5921,1,
		0,0,0,5924,5929,3,156,78,0,5925,5926,5,8,0,0,5926,5928,3,156,78,0,5927,
		5925,1,0,0,0,5928,5931,1,0,0,0,5929,5927,1,0,0,0,5929,5930,1,0,0,0,5930,
		1143,1,0,0,0,5931,5929,1,0,0,0,5932,5937,3,1296,648,0,5933,5934,5,8,0,
		0,5934,5936,3,1296,648,0,5935,5933,1,0,0,0,5936,5939,1,0,0,0,5937,5935,
		1,0,0,0,5937,5938,1,0,0,0,5938,1145,1,0,0,0,5939,5937,1,0,0,0,5940,5945,
		3,200,100,0,5941,5942,5,8,0,0,5942,5944,3,200,100,0,5943,5941,1,0,0,0,
		5944,5947,1,0,0,0,5945,5943,1,0,0,0,5945,5946,1,0,0,0,5946,1147,1,0,0,
		0,5947,5945,1,0,0,0,5948,5953,3,844,422,0,5949,5950,5,8,0,0,5950,5952,
		3,844,422,0,5951,5949,1,0,0,0,5952,5955,1,0,0,0,5953,5951,1,0,0,0,5953,
		5954,1,0,0,0,5954,1149,1,0,0,0,5955,5953,1,0,0,0,5956,5961,3,410,205,0,
		5957,5958,5,8,0,0,5958,5960,3,410,205,0,5959,5957,1,0,0,0,5960,5963,1,
		0,0,0,5961,5959,1,0,0,0,5961,5962,1,0,0,0,5962,1151,1,0,0,0,5963,5961,
		1,0,0,0,5964,5969,3,804,402,0,5965,5966,5,8,0,0,5966,5968,3,804,402,0,
		5967,5965,1,0,0,0,5968,5971,1,0,0,0,5969,5967,1,0,0,0,5969,5970,1,0,0,
		0,5970,1153,1,0,0,0,5971,5969,1,0,0,0,5972,5973,3,0,0,0,5973,1155,1,0,
		0,0,5974,5975,3,0,0,0,5975,1157,1,0,0,0,5976,5977,3,0,0,0,5977,1159,1,
		0,0,0,5978,5979,3,0,0,0,5979,1161,1,0,0,0,5980,5981,3,0,0,0,5981,1163,
		1,0,0,0,5982,5983,3,0,0,0,5983,1165,1,0,0,0,5984,5985,3,0,0,0,5985,1167,
		1,0,0,0,5986,5987,3,0,0,0,5987,1169,1,0,0,0,5988,5989,3,0,0,0,5989,1171,
		1,0,0,0,5990,5991,3,0,0,0,5991,1173,1,0,0,0,5992,5993,3,0,0,0,5993,1175,
		1,0,0,0,5994,5995,3,0,0,0,5995,1177,1,0,0,0,5996,5997,3,0,0,0,5997,1179,
		1,0,0,0,5998,5999,3,0,0,0,5999,1181,1,0,0,0,6000,6001,3,0,0,0,6001,1183,
		1,0,0,0,6002,6003,3,0,0,0,6003,1185,1,0,0,0,6004,6005,3,0,0,0,6005,1187,
		1,0,0,0,6006,6007,3,0,0,0,6007,1189,1,0,0,0,6008,6009,3,0,0,0,6009,1191,
		1,0,0,0,6010,6011,3,0,0,0,6011,1193,1,0,0,0,6012,6013,3,0,0,0,6013,1195,
		1,0,0,0,6014,6015,3,0,0,0,6015,1197,1,0,0,0,6016,6017,3,0,0,0,6017,1199,
		1,0,0,0,6018,6019,3,0,0,0,6019,1201,1,0,0,0,6020,6021,3,0,0,0,6021,1203,
		1,0,0,0,6022,6023,3,0,0,0,6023,1205,1,0,0,0,6024,6025,3,0,0,0,6025,1207,
		1,0,0,0,6026,6027,3,0,0,0,6027,1209,1,0,0,0,6028,6029,3,0,0,0,6029,1211,
		1,0,0,0,6030,6031,3,0,0,0,6031,1213,1,0,0,0,6032,6033,3,0,0,0,6033,1215,
		1,0,0,0,6034,6035,3,0,0,0,6035,1217,1,0,0,0,6036,6037,3,0,0,0,6037,1219,
		1,0,0,0,6038,6039,3,0,0,0,6039,1221,1,0,0,0,6040,6041,3,0,0,0,6041,1223,
		1,0,0,0,6042,6043,3,0,0,0,6043,1225,1,0,0,0,6044,6045,3,0,0,0,6045,1227,
		1,0,0,0,6046,6047,3,0,0,0,6047,1229,1,0,0,0,6048,6049,3,0,0,0,6049,1231,
		1,0,0,0,6050,6051,3,0,0,0,6051,1233,1,0,0,0,6052,6053,3,0,0,0,6053,1235,
		1,0,0,0,6054,6055,3,0,0,0,6055,1237,1,0,0,0,6056,6057,3,0,0,0,6057,1239,
		1,0,0,0,6058,6059,3,0,0,0,6059,1241,1,0,0,0,6060,6061,3,0,0,0,6061,1243,
		1,0,0,0,6062,6063,3,0,0,0,6063,1245,1,0,0,0,6064,6065,3,534,267,0,6065,
		1247,1,0,0,0,6066,6067,3,350,175,0,6067,1249,1,0,0,0,6068,6069,3,54,27,
		0,6069,1251,1,0,0,0,6070,6071,3,536,268,0,6071,1253,1,0,0,0,6072,6073,
		3,526,263,0,6073,1255,1,0,0,0,6074,6075,3,416,208,0,6075,1257,1,0,0,0,
		6076,6077,3,522,261,0,6077,1259,1,0,0,0,6078,6079,3,538,269,0,6079,1261,
		1,0,0,0,6080,6081,3,1216,608,0,6081,1263,1,0,0,0,6082,6083,3,348,174,0,
		6083,1265,1,0,0,0,6084,6085,3,60,30,0,6085,1267,1,0,0,0,6086,6087,3,528,
		264,0,6087,1269,1,0,0,0,6088,6089,3,1218,609,0,6089,1271,1,0,0,0,6090,
		6091,3,418,209,0,6091,1273,1,0,0,0,6092,6093,3,524,262,0,6093,1275,1,0,
		0,0,6094,6095,3,412,206,0,6095,1277,1,0,0,0,6096,6097,3,568,284,0,6097,
		1279,1,0,0,0,6098,6099,3,430,215,0,6099,1281,1,0,0,0,6100,6101,3,410,205,
		0,6101,1283,1,0,0,0,6102,6103,3,408,204,0,6103,1285,1,0,0,0,6104,6105,
		3,0,0,0,6105,1287,1,0,0,0,6106,6107,3,0,0,0,6107,1289,1,0,0,0,6108,6109,
		3,0,0,0,6109,1291,1,0,0,0,6110,6111,3,0,0,0,6111,1293,1,0,0,0,6112,6113,
		3,0,0,0,6113,1295,1,0,0,0,6114,6115,3,0,0,0,6115,1297,1,0,0,0,6116,6117,
		3,0,0,0,6117,1299,1,0,0,0,6118,6119,3,0,0,0,6119,1301,1,0,0,0,592,1308,
		1316,1319,1322,1325,1328,1334,1338,1341,1344,1350,1353,1356,1362,1365,
		1371,1374,1380,1387,1393,1397,1402,1408,1417,1424,1435,1441,1448,1454,
		1459,1465,1471,1475,1478,1481,1505,1519,1560,1568,1576,1591,1614,1627,
		1633,1679,1684,1690,1694,1698,1700,1704,1709,1715,1722,1726,1729,1738,
		1746,1750,1757,1759,1764,1768,1783,1788,1806,1819,1823,1828,1836,1838,
		1845,1850,1856,1859,1864,1869,1871,1877,1883,1887,1890,1897,1900,1907,
		1920,1924,1929,1942,1949,1954,1959,1962,1980,1987,1993,1997,2000,2004,
		2009,2024,2027,2035,2043,2048,2056,2061,2064,2076,2081,2086,2102,2104,
		2108,2117,2122,2129,2136,2143,2150,2163,2167,2174,2191,2200,2203,2209,
		2217,2236,2244,2247,2255,2266,2275,2284,2288,2323,2330,2336,2340,2343,
		2348,2350,2360,2373,2379,2386,2393,2399,2416,2421,2432,2443,2448,2460,
		2485,2488,2492,2496,2505,2511,2515,2521,2530,2534,2545,2552,2557,2567,
		2575,2584,2591,2598,2604,2615,2623,2637,2645,2651,2666,2675,2678,2682,
		2688,2691,2699,2705,2714,2720,2724,2730,2740,2743,2745,2758,2761,2774,
		2782,2791,2808,2813,2816,2820,2824,2830,2838,2848,2853,2861,2863,2871,
		2880,2884,2891,2897,2920,2923,2927,2934,2942,2945,2959,2972,2975,2987,
		2990,2994,2998,3002,3006,3010,3020,3038,3045,3050,3066,3077,3083,3089,
		3097,3099,3103,3108,3123,3128,3135,3147,3154,3164,3182,3195,3203,3211,
		3219,3226,3233,3242,3248,3253,3263,3272,3281,3290,3318,3351,3358,3371,
		3380,3392,3399,3404,3411,3414,3421,3431,3442,3446,3451,3457,3465,3475,
		3479,3484,3493,3503,3516,3521,3525,3533,3540,3546,3552,3558,3567,3575,
		3579,3591,3594,3597,3608,3613,3616,3621,3629,3634,3639,3644,3648,3651,
		3660,3663,3671,3677,3685,3690,3701,3710,3739,3743,3749,3754,3758,3767,
		3773,3780,3795,3799,3804,3818,3826,3837,3842,3851,3863,3873,3881,3889,
		3899,3906,3911,3913,3918,3926,3934,3942,3953,3961,3966,3968,3973,3977,
		3989,3997,4003,4008,4014,4018,4029,4039,4042,4050,4058,4064,4070,4073,
		4081,4091,4103,4109,4123,4135,4142,4150,4157,4166,4179,4242,4255,4270,
		4277,4283,4285,4292,4298,4302,4307,4312,4369,4376,4380,4384,4394,4403,
		4415,4424,4445,4454,4463,4472,4476,4488,4497,4501,4513,4528,4532,4643,
		4650,4657,4662,4666,4671,4675,4681,4687,4700,4706,4712,4718,4731,4739,
		4747,4755,4763,4765,4771,4781,4787,4789,4812,4815,4828,4850,4852,4860,
		4862,4867,4870,4875,4880,4883,4890,4892,4910,4915,4921,4925,4936,4941,
		4943,4948,4954,4956,4962,4969,4973,4977,4982,4986,4992,4996,4999,5003,
		5020,5038,5043,5052,5059,5066,5070,5076,5089,5094,5100,5106,5113,5121,
		5124,5132,5137,5147,5163,5172,5176,5182,5193,5198,5204,5208,5218,5225,
		5227,5232,5234,5237,5243,5247,5249,5253,5258,5260,5269,5271,5277,5281,
		5283,5287,5294,5305,5313,5321,5329,5337,5345,5353,5361,5369,5377,5385,
		5393,5401,5409,5417,5425,5433,5441,5449,5457,5465,5473,5481,5489,5497,
		5505,5513,5521,5529,5537,5545,5553,5561,5569,5577,5585,5593,5601,5609,
		5617,5625,5633,5641,5649,5657,5665,5673,5681,5689,5697,5705,5713,5721,
		5729,5737,5745,5753,5761,5769,5777,5785,5793,5801,5809,5817,5825,5833,
		5841,5849,5857,5865,5873,5881,5889,5897,5905,5913,5921,5929,5937,5945,
		5953,5961,5969
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
